[
    {
        "id": "e2f8f6ddadbe6098",
        "type": "tab",
        "label": "que broker",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b9310c7ff0384fdb",
        "type": "tab",
        "label": "w1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cfa22530d851bb95",
        "type": "tab",
        "label": "w2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fdbc682a3811866c",
        "type": "tab",
        "label": "w3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cbc582fb4cfdc843",
        "type": "tab",
        "label": "Init",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "20ab889ce2631bfa",
        "type": "tab",
        "label": "settings",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9e409c9c9837deb5",
        "type": "tab",
        "label": "API",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1ec2a5454ef9b5bf",
        "type": "tab",
        "label": "TestB",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "814fe3ad47c48a59",
        "type": "group",
        "z": "cbc582fb4cfdc843",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7b940e6ce5fb40c7",
            "b8dd96d5d9b54edd",
            "642ebd6d0bd5aa4a",
            "aee34947d1368921",
            "73c112648392b803"
        ],
        "x": 54,
        "y": 399,
        "w": 912,
        "h": 82
    },
    {
        "id": "a515f6f54037387e",
        "type": "group",
        "z": "9e409c9c9837deb5",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "25e6c65f2f6568ee",
            "68c731b8655af003",
            "b2d858d0eb793a63"
        ],
        "x": 54,
        "y": 139,
        "w": 552,
        "h": 122
    },
    {
        "id": "d7d6cef1ce4f6e57",
        "type": "group",
        "z": "9e409c9c9837deb5",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "25b9ff6cfe13789f",
            "204e4fcca9e41ae8",
            "fa4d426a57d36957",
            "a36eda51026852aa",
            "f33e9568474183b7",
            "577c5da19353e540"
        ],
        "x": 54,
        "y": 319,
        "w": 992,
        "h": 82
    },
    {
        "id": "059ffa7d94296656",
        "type": "group",
        "z": "20ab889ce2631bfa",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "0cfabb644d6aa8f3",
            "5548e297bd837328",
            "d97d5150d8ce9e83",
            "07cdc954b5e03b36",
            "8456a6b45afaeda2",
            "f846c54cb84d797a",
            "6bd28aa1c02f86cc",
            "66d508960f16e5a9",
            "3021a55b57b30753",
            "6395daf51c0731fb",
            "c5af8bec5b629110",
            "1d761d29e2faa81c",
            "2a66ab862e037a3f",
            "75c386499a8c9e9d"
        ],
        "x": 34,
        "y": 399,
        "w": 1352,
        "h": 289.5
    },
    {
        "id": "4a012a101ff347b5",
        "type": "group",
        "z": "9e409c9c9837deb5",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "f5ac041f9b81d217",
            "93d5612ae58c67d6",
            "bf5179dcdbbe05d1"
        ],
        "x": 54,
        "y": 459,
        "w": 532,
        "h": 82
    },
    {
        "id": "a8d6ba6a06e24f8f",
        "type": "group",
        "z": "9e409c9c9837deb5",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "8eff915ffb68dabf",
            "bab1247535b484ca",
            "f30ec3b5862e0b3d"
        ],
        "x": 54,
        "y": 559,
        "w": 572,
        "h": 82
    },
    {
        "id": "032640c9ece6fb0c",
        "type": "group",
        "z": "cbc582fb4cfdc843",
        "name": "loop save to REDIS ",
        "style": {
            "label": true
        },
        "nodes": [
            "9dd629e2c6dffb84",
            "60505863e2a2cc5f",
            "18e2cabaa3df9c83",
            "242adff1739cb0a3",
            "678e045e7541c09c",
            "54d897991f1f8504",
            "8f0f16e7afac3a07"
        ],
        "x": 54,
        "y": 219,
        "w": 892,
        "h": 142
    },
    {
        "id": "fcb359042f8f2e6b",
        "type": "group",
        "z": "9e409c9c9837deb5",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "b94c9a52b8188b84",
            "d6d33416822fec6c",
            "f32453e4809b959e",
            "a96f8e67cbdf8c8a",
            "4da3f56705dc171d"
        ],
        "x": 54,
        "y": 659,
        "w": 572,
        "h": 122
    },
    {
        "id": "dcde9240ab799f60",
        "type": "group",
        "z": "9e409c9c9837deb5",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "64f344ad14ce6c21",
            "5c54b33249078696",
            "59c13278a90805c5",
            "471d24978a59da55"
        ],
        "x": 54,
        "y": 819,
        "w": 652,
        "h": 122
    },
    {
        "id": "f2b33317485d5d4f",
        "type": "group",
        "z": "9e409c9c9837deb5",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "d695863ae8e1117b",
            "f432641a6b1e4228",
            "2adb3fcbc808f268",
            "694ab46133617e16"
        ],
        "x": 54,
        "y": 959,
        "w": 652,
        "h": 122
    },
    {
        "id": "9ab4c1482a5eaf83",
        "type": "group",
        "z": "e2f8f6ddadbe6098",
        "name": "check",
        "style": {
            "label": true
        },
        "nodes": [
            "f44cd2897bdfc5e9",
            "daa8145379f6bc24",
            "f0af7dbbc6fe9566",
            "e8b0752907f9cd1d",
            "fbcf833e59abfb60",
            "606ff3508e672cda",
            "6d48139c89886c3c",
            "e0716d48f7d77ed0",
            "7db872d079a2f960",
            "de53f4ba0be6a64f",
            "09de10ecda7d9742"
        ],
        "x": 34,
        "y": 379,
        "w": 852,
        "h": 202
    },
    {
        "id": "d970d6cc7dfe208a",
        "type": "group",
        "z": "e2f8f6ddadbe6098",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "bc53ea987f518761",
            "d719794db43bb891",
            "c545aa996653992f",
            "77fbbda1446d25e8",
            "8689ab68a1909080",
            "ed8a30fb4032fd66",
            "470c2c0a36932e97",
            "35210ad5697a39f3",
            "bdd8e23954413cbb",
            "120386eec6be28fc",
            "1d2cb4a2dd77c525"
        ],
        "x": 34,
        "y": 59,
        "w": 1212,
        "h": 262
    },
    {
        "id": "b808c37db35bbc10",
        "type": "group",
        "z": "cbc582fb4cfdc843",
        "name": "logger",
        "style": {
            "label": true,
            "color": "#a4a4a4"
        },
        "nodes": [
            "7df07f175c58e9ed",
            "05b768c3580a190e",
            "26744aeff70a4a94",
            "aef77d3128029bc4",
            "edafaa1ad7c68a08",
            "8a423c7cd6527fef",
            "80e64e7cf3e1af1e",
            "0167751a5ecb2a28"
        ],
        "x": 54,
        "y": 519,
        "w": 872,
        "h": 162
    },
    {
        "id": "f62fd70165c51782",
        "type": "group",
        "z": "e2f8f6ddadbe6098",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "7678297415d602c7",
            "61ebd0c1c6bb24a6",
            "c4604e369bf7a157",
            "cc02d6f81dacd297",
            "af2ff82bace3f021",
            "5e1de2b4536d746f"
        ],
        "x": 34,
        "y": 639,
        "w": 612,
        "h": 122
    },
    {
        "id": "83701de4c94d991c",
        "type": "group",
        "z": "b9310c7ff0384fdb",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "59537e3a48525f0b",
            "5414653793a9dc88",
            "4f93a5d7b7a5c9c3",
            "ce8a7a692c3f6e2a",
            "bd1f4ad645c66c64",
            "ecee2844604823d8",
            "bb17c377c91aaa32",
            "83ec01ef3a96c722"
        ],
        "x": 614,
        "y": 39,
        "w": 612,
        "h": 222
    },
    {
        "id": "e4586fe15e86dc62",
        "type": "group",
        "z": "e2f8f6ddadbe6098",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "190c5abea4aa467c",
            "6a9fa0bd2dea7a4a",
            "e07696ee28c2c500",
            "95b125b9e24ef12b",
            "8259300183eff3f0"
        ],
        "x": 1374,
        "y": 79,
        "w": 472,
        "h": 202
    },
    {
        "id": "afc9f0aaf46d5bf8",
        "type": "group",
        "z": "9e409c9c9837deb5",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "1eeb5fcc8fab4402",
            "6f462701c8514a72",
            "970f7ce4c2dbc737",
            "5d00fd89db535d24"
        ],
        "x": 54,
        "y": 1119,
        "w": 752,
        "h": 122
    },
    {
        "id": "35c2a239ec051eff",
        "type": "group",
        "z": "b9310c7ff0384fdb",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "2b2a4d3dea5b3b23",
            "279dfe95f979e767",
            "335696d4483c8523",
            "a79383e70d444c8d",
            "2fef2cb707937aa1"
        ],
        "x": 1354,
        "y": 79,
        "w": 532,
        "h": 142
    },
    {
        "id": "8d9652841578873f",
        "type": "group",
        "z": "cfa22530d851bb95",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "c5981311db05dc2d",
            "1107aa8f9a1c0dae",
            "85121c1fd6c8653a",
            "c58b35895b1cb82b",
            "a2b40c9c0995c701",
            "2aeec6c09a137820",
            "cb971c7c18b23d99",
            "308e49969036f6b0"
        ],
        "x": 614,
        "y": 19,
        "w": 612,
        "h": 222
    },
    {
        "id": "7f32f00d81c1f721",
        "type": "group",
        "z": "cfa22530d851bb95",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "b36b590670477a56",
            "ba89d3763932ce26",
            "becafd7870cee9bf",
            "7c39eb46b26148db",
            "3c2f9ee785f2d2a3"
        ],
        "x": 1354,
        "y": 59,
        "w": 532,
        "h": 142
    },
    {
        "id": "cf3f124e81357c79",
        "type": "group",
        "z": "fdbc682a3811866c",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "8a6f4f8d7865a23b",
            "c9d413644d84ca70",
            "66c1153ac7d26b72",
            "54ff3e999101d602",
            "feca67f7c39edc8b",
            "d3597615d65be527",
            "c3b418043da3f184",
            "80d7f2bbd1c79bdf"
        ],
        "x": 614,
        "y": 19,
        "w": 612,
        "h": 222
    },
    {
        "id": "9551480d826d4a72",
        "type": "group",
        "z": "fdbc682a3811866c",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "bcb20cd4fa324a91",
            "24757f4c130afe7c",
            "502e9e3f9f99fa9e",
            "e103fda050740ec5",
            "98773ca176569e38"
        ],
        "x": 1354,
        "y": 59,
        "w": 532,
        "h": 142
    },
    {
        "id": "2080f36ce7985358",
        "type": "ui-base",
        "name": "My Dashboard",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control",
            "ui-switch",
            "ui-form",
            "ui-table",
            "ui-template"
        ],
        "showPathInSidebar": false,
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": 1,
        "showDisconnectNotification": true
    },
    {
        "id": "6f84b4e31dd5cbe3",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "e1602f0e338bcf95",
        "type": "ui-page",
        "name": "Настройки",
        "ui": "2080f36ce7985358",
        "path": "/settings",
        "icon": "settings",
        "layout": "flex",
        "theme": "6f84b4e31dd5cbe3",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "43df5421e413c8ff",
        "type": "ui-group",
        "name": "Binance",
        "page": "e1602f0e338bcf95",
        "width": "5",
        "height": 1,
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": true,
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "a0efbb89.5e42d8",
        "type": "redis-config",
        "name": "local",
        "options": "redis://:YzRAdGgkF25g@redis:6379",
        "cluster": false,
        "optionsType": "str"
    },
    {
        "id": "4662e0b321ab1639",
        "type": "ui-spacer",
        "group": "43df5421e413c8ff",
        "name": "spacer",
        "order": 4,
        "width": 1,
        "height": 1,
        "className": ""
    },
    {
        "id": "d762fbf9ae7f207a",
        "type": "ui-page",
        "name": "Мониторинг",
        "ui": "2080f36ce7985358",
        "path": "/mon",
        "icon": "home",
        "layout": "grid",
        "theme": "6f84b4e31dd5cbe3",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 2,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "f9b0b0f6ab1793ef",
        "type": "ui-group",
        "name": "Телеграмм",
        "page": "e1602f0e338bcf95",
        "width": "5",
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "d403defdfbeecc46",
        "type": "ui-group",
        "name": "Мониторинг",
        "page": "d762fbf9ae7f207a",
        "width": 6,
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "9b8f9d406589678f",
        "type": "ui-page",
        "name": "TestB",
        "ui": "2080f36ce7985358",
        "path": "/testb",
        "icon": "test",
        "layout": "grid",
        "theme": "6f84b4e31dd5cbe3",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 3,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "fef3d44274af6766",
        "type": "ui-group",
        "name": "Ручное управление статусом",
        "page": "9b8f9d406589678f",
        "width": 6,
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "f44cd2897bdfc5e9",
        "type": "function",
        "z": "e2f8f6ddadbe6098",
        "g": "9ab4c1482a5eaf83",
        "name": "cmd: \"check\"",
        "func": "msg.payload = {\n    task:{\n        bot_id: msg.payload,\n        cmd: \"check\"\n    }\n    \n}\nmsg.topic = \"new_tasks\"\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 420,
        "wires": [
            [
                "09de10ecda7d9742"
            ]
        ]
    },
    {
        "id": "daa8145379f6bc24",
        "type": "function",
        "z": "e2f8f6ddadbe6098",
        "g": "9ab4c1482a5eaf83",
        "name": "getbotlist",
        "func": "msg.topic = \"\"\nmsg.payload = global.get(\"bots:list\");\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 480,
        "wires": [
            [
                "f0af7dbbc6fe9566"
            ]
        ]
    },
    {
        "id": "f0af7dbbc6fe9566",
        "type": "split",
        "z": "e2f8f6ddadbe6098",
        "g": "9ab4c1482a5eaf83",
        "name": "",
        "splt": "1",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 810,
        "y": 480,
        "wires": [
            [
                "e8b0752907f9cd1d"
            ]
        ]
    },
    {
        "id": "e8b0752907f9cd1d",
        "type": "function",
        "z": "e2f8f6ddadbe6098",
        "g": "9ab4c1482a5eaf83",
        "name": "getbot ",
        "func": "let redis = context.global.get('redis');\nconst config = context.global.get('config');\n\n// ==== Функция проверки, занят ли бот ====\nasync function isBotBusy(botId) {\n    try {\n        let value = await redis.get(config.redis.botLockPrefix + botId);\n        return value !== null;\n    } catch (err) {\n        node.error(`Ошибка при проверке занятости бота ${botId}:`, err);\n        throw err;\n    }\n}\n\nasync function getBot(botId) {\n    let key = \"bots:\" + botId + \":data\";\n    return new Promise((resolve, reject) => {\n        redis.get(key, (err, data) => {\n            err ? reject(err) : resolve(data);\n        });\n    });\n}\n\n  \n\nmsg.botname = msg.payload;\n\nconst isBotBusyb = await isBotBusy(msg.botname);\nnode.log(isBotBusyb);\nif (isBotBusyb) { return }\nlet bot = await getBot(msg.botname)\nmsg.bot = JSON.parse(bot)\nreturn msg;\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 420,
        "wires": [
            [
                "fbcf833e59abfb60"
            ]
        ]
    },
    {
        "id": "fbcf833e59abfb60",
        "type": "filter",
        "z": "e2f8f6ddadbe6098",
        "g": "9ab4c1482a5eaf83",
        "name": "filter off",
        "property": "bot.onoff",
        "propertyType": "msg",
        "asArray": false,
        "itemProperty": "",
        "itemPropertyType": "item",
        "rules": [
            {
                "t": "true",
                "output": 1
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 420,
        "y": 420,
        "wires": [
            [
                "f44cd2897bdfc5e9"
            ]
        ]
    },
    {
        "id": "606ff3508e672cda",
        "type": "trigger",
        "z": "e2f8f6ddadbe6098",
        "g": "9ab4c1482a5eaf83",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 460,
        "y": 480,
        "wires": [
            [
                "daa8145379f6bc24"
            ]
        ]
    },
    {
        "id": "6d48139c89886c3c",
        "type": "delay",
        "z": "e2f8f6ddadbe6098",
        "g": "9ab4c1482a5eaf83",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 250,
        "y": 480,
        "wires": [
            [
                "606ff3508e672cda"
            ]
        ]
    },
    {
        "id": "e0716d48f7d77ed0",
        "type": "redis-in",
        "z": "e2f8f6ddadbe6098",
        "g": "9ab4c1482a5eaf83",
        "server": "a0efbb89.5e42d8",
        "command": "subscribe",
        "name": "",
        "topic": "start",
        "obj": true,
        "timeout": 0,
        "x": 110,
        "y": 480,
        "wires": [
            [
                "6d48139c89886c3c"
            ]
        ]
    },
    {
        "id": "7db872d079a2f960",
        "type": "redis-in",
        "z": "e2f8f6ddadbe6098",
        "g": "9ab4c1482a5eaf83",
        "server": "a0efbb89.5e42d8",
        "command": "subscribe",
        "name": "",
        "topic": "stop",
        "obj": true,
        "timeout": 0,
        "x": 110,
        "y": 540,
        "wires": [
            [
                "de53f4ba0be6a64f"
            ]
        ]
    },
    {
        "id": "de53f4ba0be6a64f",
        "type": "function",
        "z": "e2f8f6ddadbe6098",
        "g": "9ab4c1482a5eaf83",
        "name": "stop",
        "func": "msg.reset = true;\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 540,
        "wires": [
            [
                "606ff3508e672cda"
            ]
        ]
    },
    {
        "id": "09de10ecda7d9742",
        "type": "redis-out",
        "z": "e2f8f6ddadbe6098",
        "g": "9ab4c1482a5eaf83",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 790,
        "y": 420,
        "wires": []
    },
    {
        "id": "bc53ea987f518761",
        "type": "trigger",
        "z": "e2f8f6ddadbe6098",
        "g": "d970d6cc7dfe208a",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-100",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 460,
        "y": 140,
        "wires": [
            [
                "470c2c0a36932e97"
            ]
        ]
    },
    {
        "id": "d719794db43bb891",
        "type": "delay",
        "z": "e2f8f6ddadbe6098",
        "g": "d970d6cc7dfe208a",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 250,
        "y": 140,
        "wires": [
            [
                "bc53ea987f518761"
            ]
        ]
    },
    {
        "id": "c545aa996653992f",
        "type": "redis-in",
        "z": "e2f8f6ddadbe6098",
        "g": "d970d6cc7dfe208a",
        "server": "a0efbb89.5e42d8",
        "command": "subscribe",
        "name": "",
        "topic": "start",
        "obj": true,
        "timeout": 0,
        "x": 110,
        "y": 140,
        "wires": [
            [
                "d719794db43bb891"
            ]
        ]
    },
    {
        "id": "77fbbda1446d25e8",
        "type": "redis-in",
        "z": "e2f8f6ddadbe6098",
        "g": "d970d6cc7dfe208a",
        "server": "a0efbb89.5e42d8",
        "command": "subscribe",
        "name": "",
        "topic": "stop",
        "obj": true,
        "timeout": 0,
        "x": 110,
        "y": 200,
        "wires": [
            [
                "8689ab68a1909080"
            ]
        ]
    },
    {
        "id": "8689ab68a1909080",
        "type": "function",
        "z": "e2f8f6ddadbe6098",
        "g": "d970d6cc7dfe208a",
        "name": "stop",
        "func": "msg.reset = true;\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 200,
        "wires": [
            [
                "bc53ea987f518761"
            ]
        ]
    },
    {
        "id": "6a9fa0bd2dea7a4a",
        "type": "function",
        "z": "e2f8f6ddadbe6098",
        "g": "e4586fe15e86dc62",
        "name": "getBotDifferences",
        "func": "function getBotDifferences(bot, botStart, ignorePaths = []) {\n    const ignoreSet = new Set(ignorePaths);\n\n    function compareObjects(a, b, differences = {}, path = []) {\n        const allKeys = new Set([...Object.keys(a), ...Object.keys(b)]);\n        allKeys.forEach(key => {\n            const currentPath = [...path, key];\n            const pathString = currentPath.join('.');\n\n            if (ignoreSet.has(pathString)) return;\n\n            const aVal = a[key];\n            const bVal = b[key];\n\n            if (typeof aVal === 'object' && aVal !== null && typeof bVal === 'object' && bVal !== null) {\n                compareObjects(aVal, bVal, differences, currentPath);\n            } else if (Array.isArray(aVal) && Array.isArray(bVal)) {\n                if (JSON.stringify(aVal) !== JSON.stringify(bVal)) {\n                    differences[key] = { old: bVal, new: aVal };\n                }\n            } else if (aVal !== bVal) {\n                differences[key] = { old: bVal, new: aVal };\n            }\n        });\n        return differences;\n    }\n\n    return compareObjects(bot, botStart);\n}\n\nglobal.set('getBotDifferences', getBotDifferences);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "e07696ee28c2c500",
        "type": "inject",
        "z": "e2f8f6ddadbe6098",
        "g": "e4586fe15e86dc62",
        "name": "init functions",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1490,
        "y": 120,
        "wires": [
            [
                "6a9fa0bd2dea7a4a",
                "190c5abea4aa467c",
                "95b125b9e24ef12b"
            ]
        ]
    },
    {
        "id": "ed8a30fb4032fd66",
        "type": "ui-chart",
        "z": "e2f8f6ddadbe6098",
        "g": "d970d6cc7dfe208a",
        "group": "d403defdfbeecc46",
        "name": "Кол-во задач в очереди",
        "label": "Кол-во задач в очереди",
        "order": 2,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "timestamp",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "payload",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": "2",
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "60",
        "removeOlderPoints": "",
        "colors": [
            "#0095ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 1090,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "470c2c0a36932e97",
        "type": "function",
        "z": "e2f8f6ddadbe6098",
        "g": "d970d6cc7dfe208a",
        "name": "Broker: Check Tasks and Workers",
        "func": "// ==== Настройка ====\nlet redis = context.global.get('redis');\nconst config = context.global.get('config');\n\n// ==== Функция проверки, занят ли бот ====\nasync function isBotBusy(botId) {\n    try {\n        let value = await redis.get(config.redis.botLockPrefix + botId);\n        return value !== null;\n    } catch (err) {\n        node.error(`Ошибка при проверке занятости бота ${botId}:`, err);\n        throw err;\n    }\n}\n\n// ==== Функция проверки, занят ли воркер ====\nasync function isWorkerBusy(workerId) {\n    try {\n        let value = await redis.get(config.redis.workerLockPrefix + workerId);\n        return value !== null;\n    } catch (err) {\n        node.error(`Ошибка при проверке занятости воркера ${workerId}:`, err);\n        throw err;\n    }\n}\n\n// ==== Функция блокировки бота ====\nasync function lockBot(botId) {\n    try {\n        await redis.set(config.redis.botLockPrefix + botId, 1, 'EX', config.lockTTL);\n        node.log(`Бот ${botId} заблокирован на ${config.lockTTL} секунд.`);\n    } catch (err) {\n        node.error(`Ошибка при блокировке бота ${botId}:`, err);\n        throw err;\n    }\n}\n\n// ==== Функция блокировки воркера ====\nasync function lockWorker(workerId) {\n    try {\n        await redis.set(config.redis.workerLockPrefix + workerId, 1, 'EX', config.lockTTL);\n        node.log(`Воркер ${workerId} заблокирован на ${config.lockTTL} секунд.`);\n    } catch (err) {\n        node.error(`Ошибка при блокировке воркера ${workerId}:`, err);\n        throw err;\n    }\n}\n\n// ==== Функция получения свободного воркера ====\nasync function getFreeWorker() {\n    try {\n        let cursor = '0';\n        do {\n            const result = await redis.scan(cursor, 'MATCH', 'worker:*');\n            cursor = result[0];\n            const workers = result[1];\n            for (const worker of workers) {\n                const isBusy = await isWorkerBusy(worker);\n                if (!isBusy) {\n                    return worker;\n                }\n            }\n        } while (cursor !== '0');\n        return null;\n    } catch (err) {\n        node.error('Ошибка при выборе воркера:', err);\n        throw err;\n    }\n}\n\n// ==== Логика брокера ====\nasync function processTask() {\n    try {\n        const currentTime = Date.now();\n\n        // Проверка времени выполнения активных задач\n        let cursor = '0';\n        do {\n            const result = await redis.scan(cursor, 'MATCH', `${config.redis.activeTasksPrefix}*`);\n            cursor = result[0];\n            const activeTasks = result[1];\n\n            for (const taskKey of activeTasks) {\n                const taskInfo = await redis.get(taskKey);\n                if (taskInfo) {\n                    const task = JSON.parse(taskInfo);\n                    const elapsedTime = currentTime - task.startTime;\n\n                    if (elapsedTime > config.taskTimeout * 1000) {\n                        node.warn(`Задача ${taskKey} не завершена в течение ${config.taskTimeout} секунд.`);\n                        await redis.del(taskKey);\n                        node.send([null, { error: `Задача ${taskKey} не завершена в течение ${config.taskTimeout} секунд.`, task: task }]);\n                    }\n                }\n            }\n        } while (cursor !== '0');\n\n        // Обработка одной задачи из очереди\n        let taskData = await redis.lpop(config.redis.taskQueueName);\n\n        if (!taskData) {\n            node.log('Очередь задач пуста.');\n            return;\n        }\n\n        let task;\n        try {\n            task = JSON.parse(taskData);\n        } catch (err) {\n            node.error('Ошибка при парсинге задачи:', err);\n            await redis.rpush(config.redis.taskQueueName, taskData);\n            return;\n        }\n\n        if (!task.task || !task.task.bot_id || !task.task.cmd) {\n            node.warn('Некорректная задача: отсутствуют обязательные поля.');\n            await redis.rpush(config.redis.taskQueueName, taskData);\n            return;\n        }\n\n        let botData;\n        try {\n            botData = await redis.get(`bots:${task.task.bot_id}:data`);\n            if (botData) {\n                task.bot = JSON.parse(botData);\n                task.bot_start = task.bot;\n            } else {\n                node.warn(`Данные бота ${task.task.bot_id} не найдены в Redis.`);\n                await redis.rpush(config.redis.taskQueueName, taskData);\n                return;\n            }\n        } catch (err) {\n            node.error('Ошибка при получении данных бота:', err);\n            await redis.rpush(config.redis.taskQueueName, taskData);\n            return;\n        }\n\n        const shouldLockBot = !config.noLockCommands.includes(task.task.cmd);\n\n        if (shouldLockBot) {\n            try {\n                const isBotBusyb = await isBotBusy(task.task.bot_id);\n                if (isBotBusyb) {\n                    node.warn(`Бот ${task.task.bot_id} занят. Возвращаем задачу в очередь.`);\n                    await redis.rpush(config.redis.taskQueueName, taskData);\n                    return;\n                }\n            } catch (err) {\n                node.error('Ошибка при проверке занятости бота:', err);\n                await redis.rpush(config.redis.taskQueueName, taskData);\n                return;\n            }\n        }\n\n        let workerId;\n        try {\n            workerId = await getFreeWorker();\n            if (!workerId) {\n                node.warn('Нет доступных воркеров. Возвращаем задачу в очередь.');\n                await redis.rpush(config.redis.taskQueueName, taskData);\n                return;\n            }\n        } catch (err) {\n            node.error('Ошибка при выборе воркера:', err);\n            await redis.rpush(config.redis.taskQueueName, taskData);\n            return;\n        }\n\n        if (shouldLockBot) {\n            try {\n                await lockBot(task.task.bot_id);\n            } catch (err) {\n                node.error('Ошибка при блокировке бота:', err);\n                await redis.rpush(config.redis.taskQueueName, taskData);\n                return;\n            }\n        }\n\n        try {\n            await lockWorker(workerId);\n        } catch (err) {\n            node.error('Ошибка при блокировке воркера:', err);\n            await redis.rpush(config.redis.taskQueueName, taskData);\n            return;\n        }\n\n        task.workerId = workerId;\n        task.startTime = currentTime;\n\n        // Сохраняем задачу как активную\n        const taskKey = `${config.redis.activeTasksPrefix}${workerId}:${task.task.bot_id}:${task.task.cmd}`;\n        await redis.set(taskKey, JSON.stringify(task), 'EX', config.taskTimeout);\n\n        try {\n            await redis.publish(config.redis.jobChannel, JSON.stringify(task));\n        } catch (err) {\n            node.error('Ошибка при отправке задачи воркеру:', err);\n            await redis.rpush(config.redis.taskQueueName, taskData);\n            return;\n        }\n\n        let queueLength = await redis.llen(config.redis.taskQueueName);\n        msg.payload = queueLength;\n        node.send(msg);\n\n    } catch (err) {\n        node.error(\"Ошибка в логике брокера: \" + err);\n    }\n}\n\n// Вызов функции для обработки одной задачи\nprocessTask();",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 140,
        "wires": [
            [
                "ed8a30fb4032fd66"
            ],
            [
                "35210ad5697a39f3",
                "ed8a30fb4032fd66"
            ]
        ]
    },
    {
        "id": "35210ad5697a39f3",
        "type": "debug",
        "z": "e2f8f6ddadbe6098",
        "g": "d970d6cc7dfe208a",
        "name": "debug 69",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 180,
        "wires": []
    },
    {
        "id": "bdd8e23954413cbb",
        "type": "function",
        "z": "e2f8f6ddadbe6098",
        "g": "d970d6cc7dfe208a",
        "name": "Broker: Analyse Results",
        "func": "// ==== Настройка ====\nlet redis = context.global.get('redis');\nconst config = context.global.get('config');\nconst getBotDifferences = global.get('getBotDifferences');\n\n// ==== Функция разблокировки воркера ====\nasync function unlockWorker(workerId) {\n    try {\n        await redis.del(config.redis.workerLockPrefix + workerId);\n        node.log(`Воркер ${workerId} разблокирован.`);\n    } catch (err) {\n        node.error(`Ошибка при разблокировке воркера ${workerId}:`, err);\n        throw err;\n    }\n}\n\n// ==== Функция разблокировки бота ====\nasync function unlockBot(botId) {\n    try {\n        await redis.del(config.redis.botLockPrefix + botId);\n        node.log(`Бот ${botId} разблокирован.`);\n    } catch (err) {\n        node.error(`Ошибка при разблокировке бота ${botId}:`, err);\n        throw err;\n    }\n}\n\n// ==== Логика анализа результатов ====\n(async () => {\n    try {\n        const msg2 = msg.payload;\n\n        // Выполняем анализ:\n        const changes = getBotDifferences(msg2.bot, msg2.bot_start);\n        msg.changes = changes;\n        node.log(`Изменения в данных ${JSON.stringify(changes, null, 2)}`);\n\n        const finishTime = Date.now();\n        let durationJob = finishTime - msg2.startTime;\n        let topickey = msg2.workerId + ' - ' + msg2.task.bot_id + ' - ' + msg2.task.cmd;\n        msg.topic = topickey;\n        msg.payload = durationJob;\n\n        // Удаляем задачу из активных\n        const taskKey = `${config.redis.activeTasksPrefix}${msg2.workerId}:${msg2.task.bot_id}:${msg2.task.cmd}`;\n        await redis.del(taskKey);\n        node.log(`Задача ${taskKey} завершена успешно.`);\n\n        // Разблокируем воркера\n        await unlockWorker(msg2.workerId);\n\n        // Разблокируем бота, если команда требует блокировки\n        if (!config.noLockCommands.includes(msg2.task.cmd)) {\n            await redis.set(`bots:${msg2.task.bot_id}:data`, JSON.stringify(msg2.bot));\n            await unlockBot(msg2.task.bot_id);\n        }\n\n        node.send(msg);\n    } catch (err) {\n        node.error(\"Ошибка при анализе результатов: \" + err);\n    }\n})();\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 280,
        "wires": [
            [
                "1d2cb4a2dd77c525"
            ]
        ]
    },
    {
        "id": "120386eec6be28fc",
        "type": "redis-in",
        "z": "e2f8f6ddadbe6098",
        "g": "d970d6cc7dfe208a",
        "server": "a0efbb89.5e42d8",
        "command": "subscribe",
        "name": "fjob",
        "topic": "fjob",
        "obj": true,
        "timeout": 0,
        "x": 510,
        "y": 280,
        "wires": [
            [
                "bdd8e23954413cbb"
            ]
        ]
    },
    {
        "id": "1d2cb4a2dd77c525",
        "type": "ui-chart",
        "z": "e2f8f6ddadbe6098",
        "g": "d970d6cc7dfe208a",
        "group": "d403defdfbeecc46",
        "name": "Время выполнения задач",
        "label": "Время выполнения задач",
        "order": 1,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "timestamp",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "payload",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": "2",
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "60",
        "removeOlderPoints": "",
        "colors": [
            "#0095ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 1100,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "190c5abea4aa467c",
        "type": "function",
        "z": "e2f8f6ddadbe6098",
        "g": "e4586fe15e86dc62",
        "name": "config",
        "func": "// ==== Инициализация конфигурации ====\nconst config = {\n    redis: {\n        taskQueueName: 'new_tasks',\n        jobChannel: 'job',\n        returnChannel: 'return_channel',\n        botLockPrefix: 'bot_lock:',\n        workerLockPrefix: 'worker_lock:',\n        activeTasksPrefix: 'active_task:',\n    },\n    noLockCommands: [\n        'sell_on_binance',\n        'cancel_on_binance',\n        'sell_cancel_on_binance',\n        'msell_on_binance',\n        'cancel_for_msell_on_binance',\n        'order_status_on_binance',\n        'buy_on_binance'\n        ],\n    lockTTL: 3,\n    maxTasksPerRun: 10,\n    taskTimeout: 2,\n    enableLogging: true,\n};\n\n// Сохраняем конфигурацию в глобальный контекст\ncontext.global.set('config', config);\n\n// Возвращаем сообщение без изменений\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "7678297415d602c7",
        "type": "inject",
        "z": "e2f8f6ddadbe6098",
        "g": "f62fd70165c51782",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 680,
        "wires": [
            [
                "61ebd0c1c6bb24a6"
            ]
        ]
    },
    {
        "id": "61ebd0c1c6bb24a6",
        "type": "redis-out",
        "z": "e2f8f6ddadbe6098",
        "g": "f62fd70165c51782",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 310,
        "y": 720,
        "wires": []
    },
    {
        "id": "c4604e369bf7a157",
        "type": "inject",
        "z": "e2f8f6ddadbe6098",
        "g": "f62fd70165c51782",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 680,
        "wires": [
            [
                "cc02d6f81dacd297"
            ]
        ]
    },
    {
        "id": "cc02d6f81dacd297",
        "type": "redis-out",
        "z": "e2f8f6ddadbe6098",
        "g": "f62fd70165c51782",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 130,
        "y": 720,
        "wires": []
    },
    {
        "id": "af2ff82bace3f021",
        "type": "inject",
        "z": "e2f8f6ddadbe6098",
        "g": "f62fd70165c51782",
        "name": "check1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 550,
        "y": 680,
        "wires": [
            [
                "5e1de2b4536d746f"
            ]
        ]
    },
    {
        "id": "5e1de2b4536d746f",
        "type": "redis-out",
        "z": "e2f8f6ddadbe6098",
        "g": "f62fd70165c51782",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "check1",
        "obj": false,
        "x": 560,
        "y": 720,
        "wires": []
    },
    {
        "id": "95b125b9e24ef12b",
        "type": "function",
        "z": "e2f8f6ddadbe6098",
        "g": "e4586fe15e86dc62",
        "name": "clean workers",
        "func": "let redis = context.global.get('redis');\nlet cursor = '0'\ndo {\n    const result = await redis.scan(cursor, 'MATCH', `worker*`);\n    cursor = result[0];\n    const workers = result[1];\n\n    for (const workerkey of workers) {\n        await redis.del(workerkey);\n    }\n\n} while (cursor !== '0');\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "8259300183eff3f0",
        "type": "redis-instance",
        "z": "e2f8f6ddadbe6098",
        "g": "e4586fe15e86dc62",
        "server": "a0efbb89.5e42d8",
        "name": "",
        "topic": "redis",
        "location": "global",
        "x": 1470,
        "y": 240,
        "wires": []
    },
    {
        "id": "efa9f4667d8665e7",
        "type": "inject",
        "z": "b9310c7ff0384fdb",
        "name": "Init Worker ",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "true",
        "payloadType": "str",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "45647650c8a31a9e"
            ]
        ]
    },
    {
        "id": "4c652e363251404a",
        "type": "redis-in",
        "z": "b9310c7ff0384fdb",
        "server": "a0efbb89.5e42d8",
        "command": "subscribe",
        "name": "job",
        "topic": "job",
        "obj": true,
        "timeout": 0,
        "x": 130,
        "y": 600,
        "wires": [
            [
                "afbc17bb319af3ab"
            ]
        ]
    },
    {
        "id": "45647650c8a31a9e",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "Worker : Init",
        "func": "// ==== Настройка ====\nlet redis = context.global.get('redis');\n\n// Используем context.flow для получения ID воркера, если он уже существует, иначе генерируем новый\nconst workerId = context.flow.get('workerId') || 'worker:' + RED.util.generateId();\ncontext.flow.set('workerId', workerId);\n\n// Регистрируем воркера\n(async () => await redis.set(workerId, 1))();\nnode.status({fill:\"green\",shape:\"dot\",text:\"Воркер запущен:\" + workerId});\n\nmsg.workerID = workerId;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "afbc17bb319af3ab",
        "type": "switch",
        "z": "b9310c7ff0384fdb",
        "name": "workerId",
        "property": "payload.workerId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "workerId",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 140,
        "y": 660,
        "wires": [
            [
                "79c6f8a9780abef6"
            ]
        ]
    },
    {
        "id": "79c6f8a9780abef6",
        "type": "switch",
        "z": "b9310c7ff0384fdb",
        "name": "task.cmd",
        "property": "payload.task.cmd",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "changesettings",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "onoff",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "tsl_edit",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "check",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "regist_lead",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "buy_on_binance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cancel_on_binance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sell_on_binance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "msell_on_binance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sell_cancel_on_binance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cancel_for_msell_on_binance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "order_status_on_binance",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 12,
        "x": 320,
        "y": 720,
        "wires": [
            [
                "8b0716b2f93b4c0e"
            ],
            [
                "b1243a9c6954c10a"
            ],
            [
                "505bb4ed1fa65027"
            ],
            [
                "3702ed463a1cd996"
            ],
            [
                "01aea1be869be083"
            ],
            [
                "ebffc348710dfe19"
            ],
            [
                "3a19690f59269984"
            ],
            [
                "baeaecab02f398df"
            ],
            [
                "b4fb194f870a0113"
            ],
            [
                "4fe7639cf07bbba0"
            ],
            [
                "cc24952e62fcfd58"
            ],
            [
                "0d81a014b071e8e8"
            ]
        ]
    },
    {
        "id": "b1243a9c6954c10a",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "onoff",
        "func": "msg.payload.bot.onoff = !msg.payload.bot.onoff\n\nif (!msg.payload.bot.onoff) {\n    msg.payload.bot.status.rezhim=\"Остановлен\"\n}\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 440,
        "wires": [
            [
                "832de08b7dde7fc9"
            ]
        ]
    },
    {
        "id": "505bb4ed1fa65027",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "tsl_edit",
        "func": "msg.payload.bot.tsl = msg.payload.task.tsl\nmsg.payload.bot.status = msg.payload.task.status\nmsg.payload.bot.onoff = msg.payload.task.onoff\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 520,
        "wires": [
            [
                "b7423b4a7c0f9536"
            ]
        ]
    },
    {
        "id": "3702ed463a1cd996",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "check ",
        "func": "const redis = context.global.get('redis');\nconst tilog = global.get('tilog');\nconst botname = msg.payload.bot.botname;\nconst enableLogging = true;\n\nfunction log(nodeName, logNumber, message, data = null) {\n    if (enableLogging && tilog) {\n        const text = data ? `${message}: ${JSON.stringify(data, null, 2)}` : message;\n        tilog(botname, `[${nodeName}] [${logNumber}] ${text}`);\n    }\n}\n\nfunction getCurrentPrice(key) {\n    return new Promise((resolve, reject) => {\n        redis.get(key, (err, data) => {\n            err ? reject(err) : resolve(data);\n        });\n    });\n}\n\nconst pair = msg.payload.bot.settings.pair;\nconst exchange = msg.payload.bot.settings.exchange;\n\nlet redisKey;\nif (exchange === \"TestB\") {\n    redisKey = 'testb:currentprice';\n    log('calc-raschstopprice', '1', `Using TestB exchange, fetching price from Redis key: ${redisKey}`);\n} else {\n    redisKey = `prices:${pair}`;\n    //  log('calc-raschstopprice', '2', `Using default exchange, fetching price from Redis key: ${redisKey}`);\n}\n\nlet currentprice = await getCurrentPrice(redisKey);\ncurrentprice = Number(currentprice);\n\n\nmsg.payload.bot.status.currentprice = currentprice;\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 860,
        "wires": [
            [
                "26cd6d7cd125cd7c"
            ]
        ]
    },
    {
        "id": "01aea1be869be083",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "регистрация сделки",
        "func": "let leads = global.get('leads') || [];\n\nlet node_time = new Date().getTime();\nlet date = new Date();\nlet endtime = date.toString().split('GMT')[0];\n\n\nfunction calculateProfitAndCommission(data) {\n    const buyed = data.openpos.buyed;\n    const sellInfo = data.tsl.resp;\n\n    // Рассчитываем общие затраты на покупку (включая комиссию)\n    let totalBuyCost = 0;\n    let totalBuyQuantity = 0;\n    let totalCommission = 0;\n\n    for (const buy of buyed) {\n        const [orderId, quantityStr, priceStr, commissionStr] = buy;\n        const quantity = parseFloat(quantityStr);\n        const price = parseFloat(priceStr);\n        const commission = parseFloat(commissionStr);\n\n        totalBuyCost += quantity * price;\n        totalBuyQuantity += quantity;\n        totalCommission += commission;\n    }\n\n    // Получаем данные о продаже\n    const sellQuantity = parseFloat(sellInfo.executedQty);\n    const sellPrice = parseFloat(sellInfo.price);\n    const sellAmount = parseFloat(sellInfo.cummulativeQuoteQty);\n\n    // Проверяем, что количество купленного и проданного совпадает\n    if (Math.abs(totalBuyQuantity - sellQuantity) > 0.0001) {\n        console.warn(`Количество купленного (${totalBuyQuantity}) и проданного (${sellQuantity}) не совпадает!`);\n    }\n\n    // Рассчитываем прибыль\n    const profit = sellAmount - totalBuyCost;\n\n    // Комиссия при продаже (Binance берет комиссию с суммы сделки)\n    const sellCommission = sellAmount * 0.001; // предполагаемая комиссия 0.1%\n    totalCommission += sellCommission;\n\n    return {\n        profit: profit,\n        totalCommission: totalCommission,\n        netProfit: profit - totalCommission,\n        buyCost: totalBuyCost,\n        sellAmount: sellAmount,\n        buyQuantity: totalBuyQuantity,\n        sellQuantity: sellQuantity,\n        averageBuyPrice: totalBuyCost / totalBuyQuantity,\n        sellPrice: sellPrice\n    };\n}\n\n// Функция для форматирования времени\nfunction formatTime(timestamp) {\n    let date = new Date(timestamp);\n    return date.toString().split('GMT')[0];\n}\n\n// Функция для вычисления временного интервала\nfunction timeDistance(date1, date2) {\n    let distance = Math.abs(date1 - date2);\n    const hours = Math.floor(distance / 3600000);\n    distance -= hours * 3600000;\n    const minutes = Math.floor(distance / 60000);\n    distance -= minutes * 60000;\n    const seconds = Math.floor(distance / 1000);\n    return `${hours}:${('0' + minutes).slice(-2)}:${('0' + seconds).slice(-2)}`;\n}\n\n// Функция для логирования\nfunction log(nodeName, logNumber, message, data = null) {\n    if (enableLogging && tilog) {\n        if (data) {\n            tilog(botname, `[${nodeName}] [${logNumber}] ${message}: ${JSON.stringify(data, null, 2)}`);\n        } else {\n            tilog(botname, `[${nodeName}] [${logNumber}] ${message}`);\n        }\n    }\n}\n\nconst botname = msg.payload.bot.botname;\nconst tilog = global.get('tilog');\nconst enableLogging = true;\n\nconst calcResult = calculateProfitAndCommission(msg.payload.bot);\n\n// Формируем отчет в виде строки для телеграма\nconst result = `\n📊 Отчет о сделке: ${botname}\n\n🛒 Покупка:\n- Средняя цена покупки: ${calcResult.averageBuyPrice.toFixed(8)}\n- Общее количество: ${calcResult.buyQuantity.toFixed(8)}\n- Общая стоимость: ${calcResult.buyCost.toFixed(8)}\n\n💰 Продажа:\n- Цена продажи: ${calcResult.sellPrice.toFixed(8)}\n- Количество: ${calcResult.sellQuantity.toFixed(8)}\n- Сумма продажи: ${calcResult.sellAmount.toFixed(8)}\n\n💵 Финансовый результат:\n- Прибыль: ${calcResult.profit.toFixed(8)}\n- Комиссии: ${calcResult.totalCommission.toFixed(8)}\n- Чистая прибыль: ${calcResult.netProfit.toFixed(8)}\n\n⏱ Время завершения: ${endtime}\n`;\n\nnode.send([null, {payload: result, originalData: calcResult}]);\n\nlog('registration', 3, \"complete\");\nnode.status({ fill: \"green\", shape: \"dot\" });\nnode.warn(\"Регистрация сделки\");\n\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1260,
        "wires": [
            [
                "486384c15ac2cbec"
            ],
            [
                "2769a5b5babcb473"
            ]
        ]
    },
    {
        "id": "ebffc348710dfe19",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "buy_on_binance",
        "func": "const binance = global.get('binance');\nconst tilog = global.get('tilog'); // Логирование\nconst botname = msg.payload.bot.botname;\n\n// Переменная для управления логированием\nconst enableLogging = true; // true - логирование включено, false - выключено\n\n// Функция для логирования\nfunction log(message, data = null) {\n    let nodeName = node.name;\n    let botname = msg.payload.bot.botname;\n    if (enableLogging && tilog) {\n        if (data) {\n            tilog(botname, `[${nodeName}] ${message}: ${JSON.stringify(data, null, 2)}`);\n        } else {\n            tilog(botname, `[${nodeName}] ${message}`);\n        }\n    }\n}\n\n// Функция для парсинга ошибок API\nfunction parseApiError(error) {\n    if (error.body) {\n        try {\n            const resp = JSON.parse(error.body);\n            return resp.msg;\n        } catch (e) {\n            // pass thru\n        }\n    }\n    return `Unknown error. Status code: ${error.statusCode}`;\n}\n\n// Промисификация функции binance.buy\nasync function buyBinanceOrder(pair, quantity, price) {\n    return new Promise((resolve, reject) => {\n        binance.buy(pair, quantity, price, { type: 'LIMIT' }, (err, resp) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(resp);\n            }\n        });\n    });\n}\n\n// Функция для обработки ошибок\nfunction handleError(msg, err) {\n    const errorMsg = parseApiError(err);\n    log(`Ошибка при покупке: ${errorMsg}`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = `Остановлен в результате ошибки ${errorMsg}`;\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    msg.err = err;\n    node.send([msg, null]);\n}\n\n// Функция для обработки успешного выполнения\nfunction handleSuccess(msg, resp, floor, quantity) {\n    log(`Ордер успешно размещен: orderId=${resp.orderId}, status=${resp.status}`);\n\n    floor.status = \"set_buy\"; // Обновлено состояние\n    floor.buyId = resp.orderId;\n    floor.buyDate = new Date().getTime();\n    floor.buyStatus = resp.status;\n    floor.vol = quantity;\n    msg.payload.bot.floors[msg.payload.task.floor.floorNumber] = floor;\n\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"green\", shape: \"dot\" });\n    msg.resp = resp;\n    node.send([msg, msg]);\n}\n\n// Функция для обработки таймаута\nfunction handleTimeout(msg) {\n    log(`Таймаут при размещении ордера`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = \"Остановлен в результате таймаута\";\n    msg.payload.bot.status.updated = new Date().getTime();\n\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    node.send([msg, null]);\n}\n\nconst floor = msg.payload.task.floor;\nconst quantity = Number((Number(msg.payload.bot.finance.depo) * Number(msg.payload.bot.settings.ordersize) / 100 / Number(msg.payload.bot.status.currentprice)).toFixed(msg.payload.bot.settings.digitq));\nconst pair = msg.payload.bot.settings.pair;\nconst price = floor.initBuyPrice;\n\nlog(`Начало размещения ордера: pair=${pair}, quantity=${quantity}, price=${price}`);\n\nconst TIMEOUT = 2000;\n\nconst timeout = setTimeout(() => {\n    handleTimeout(msg);\n}, TIMEOUT);\n\n// Используем серверное время для размещения ордера\nbinance.useServerTime(async () => {\n    try {\n        const resp = await buyBinanceOrder(pair, quantity, price);\n        if (resp && resp.code) {\n            log(`Ошибка: ${resp.msg}`);\n            handleError(msg, { body: JSON.stringify({ msg: resp.msg, floor: floor }) });\n        } else {\n\n            clearTimeout(timeout);\n            handleSuccess(msg, resp, floor, quantity);\n        }\n    } catch (err) {\n        clearTimeout(timeout);\n        handleError(msg, err);\n    }\n});\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1340,
        "wires": [
            [
                "c459adbd79eee616"
            ],
            [
                "76bdbc41f9aa4e75"
            ]
        ]
    },
    {
        "id": "3a19690f59269984",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": " cancel_on_binance",
        "func": "const binance = global.get('binance');\nconst tilog = global.get('tilog'); // Логирование\nconst botname = msg.payload.bot.botname;\n\n// Переменная для управления логированием\nconst enableLogging = true; // true - логирование включено, false - выключено\n\n// Функция для логирования\nfunction log(message, data = null) {\n    let nodeName = node.name;\n    let botname = msg.payload.bot.botname;\n    if (enableLogging && tilog) {\n        if (data) {\n            tilog(botname, `[${nodeName}] ${message}: ${JSON.stringify(data, null, 2)}`);\n        } else {\n            tilog(botname, `[${nodeName}] ${message}`);\n        }\n    }\n}\n\n// Функция для парсинга ошибок API\nfunction parseApiError(error) {\n    if (error.body) {\n        try {\n            const resp = JSON.parse(error.body);\n            return resp.msg;\n        } catch (e) {\n            // pass thru\n        }\n    }\n    return `Unknown error. Status code: ${error.statusCode}`;\n}\n\n// Промисификация функции binance.buy\n\nasync function cancelBinanceOrder(pair, orderId) {\n    return new Promise((resolve, reject) => {\n        binance.cancel(pair, orderId, (err, resp) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(resp);\n            }\n        });\n    });\n}\n\n// Функция для обработки ошибок\nfunction handleError(msg, err) {\n    const errorMsg = parseApiError(err);\n    log(`Ошибка : ${errorMsg}`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = `Остановлен в результате ошибки ${errorMsg}`;\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    msg.err = err;\n    node.send([msg, null]);\n}\n\n// Функция для обработки таймаута\nfunction handleTimeout(msg) {\n    log(`Остановлен в результате таймаута`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = \"Остановлен в результате таймаута\";\n    msg.payload.bot.status.updated = new Date().getTime();\n\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    node.send([msg, null]);\n}\n\nconst floor = msg.payload.task.floor;\nconst pair = msg.payload.bot.settings.pair;\nconst TIMEOUT = 2000;\n\nconst timeout = setTimeout(() => {\n    handleTimeout(msg);\n}, TIMEOUT);\n\n// Используем серверное время для размещения ордера\nbinance.useServerTime(async () => {\n    try {\n        const resp = await cancelBinanceOrder(pair, floor.buyId);\n        clearTimeout(timeout);\n\n        if (resp && resp.code) {\n            log(5, `Ошибка при отмене ордера: ${resp.msg}`);\n            handleError(msg, { body: JSON.stringify({ msg: resp.msg, floor: floor }) });\n        } else {\n            log(6, `Ордер успешно отменен`);\n            floor.buyStatus = \"CANCELED\";\n            floor.status = \"0\";\n            msg.payload.bot.floors[floor.floorNumber] = floor; // Обновляем объект бота\n\n            msg.payload.bot.status.updated = new Date().getTime();\n            msg.topic = \"fjob\";\n            node.status({ fill: \"green\", shape: \"dot\" });\n            node.send([msg, msg]);\n        }\n    } catch (err) {\n        clearTimeout(timeout);\n        handleError(msg, err);\n    }\n});\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1440,
        "wires": [
            [
                "bb115e77e6812b68"
            ],
            [
                "7448a29ea843ad6d"
            ]
        ]
    },
    {
        "id": "baeaecab02f398df",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": " sell_on_binance",
        "func": "const binance = global.get('binance');\nconst tilog = global.get('tilog'); // Логирование\nconst botname = msg.payload.bot.botname;\n\n// Переменная для управления логированием\nconst enableLogging = true; // true - логирование включено, false - выключено\n\n// Функция для логирования\nfunction log(message, data = null) {\n    let nodeName = node.name;\n    let botname = msg.payload.bot.botname;\n    if (enableLogging && tilog) {\n        if (data) {\n            tilog(botname, `[${nodeName}] ${message}: ${JSON.stringify(data, null, 2)}`);\n        } else {\n            tilog(botname, `[${nodeName}] ${message}`);\n        }\n    }\n}\n\n// Функция для парсинга ошибок API\nfunction parseApiError(error) {\n    if (error.body) {\n        try {\n            const resp = JSON.parse(error.body);\n            return resp.msg;\n        } catch (e) {\n            // pass thru\n        }\n    }\n    return `Unknown error. Status code: ${error.statusCode}`;\n}\n\nasync function sellBinanceOrder(pair, quantity, price, stopPrice) {\n    return new Promise((resolve, reject) => {\n        binance.sell(pair, quantity, price, {\n            stopPrice,\n            type: \"STOP_LOSS_LIMIT\"\n        }, (err, resp) => {\n            if (err) {\n                log(`Ошибка при размещении sell ордера: ${JSON.stringify(err)}`);\n                reject(err);\n            } else {\n                log(`Sell ордер успешно размещен: ${JSON.stringify(resp)}`);\n                resolve(resp);\n            }\n        });\n    });\n}\n\n// Функция для обработки ошибок\nfunction handleError(msg, err) {\n    const errorMsg = parseApiError(err);\n    log(`Ошибка : ${errorMsg}`);\n    node.warn(errorMsg);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = `Остановлен в результате ошибки ${errorMsg}`;\n\n    node.status({ fill: \"red\", shape: \"ring\" });\n    msg.err = err;\n    node.send([msg, msg]);\n}\n\n// Функция для обработки успешного выполнения\nfunction handleSuccess(msg) {\n    log(`Успешно`);\n    // Обновляем состояние\n    msg.payload.bot.tsl = {\n        ...msg.payload.bot.tsl,\n        curorderid: msg.payload.bot.tsl.curorderid,\n        curstop: msg.payload.bot.tsl.curstop,\n        curprice: msg.payload.bot.tsl.curprice,\n        curquantity: msg.payload.bot.tsl.curquantity,\n        state: 'set_sell'\n    };\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send([msg, msg]);\n}\n\n// Используем серверное время для размещения ордера\nbinance.useServerTime(async () => {\n    try {\n        const { pair, price, stopprice, quantity } = msg.payload.task.params;\n        const resp = await sellBinanceOrder(pair, quantity, price, stopprice);\n\n        if (resp && resp.code) {\n            log(`Ошибка: ${resp.msg}`);\n            handleError(msg, { body: JSON.stringify({ msg: resp.msg }) });\n        } else {\n            // Обновление состояния бота\n            msg.payload.bot.tsl = {\n                ...msg.payload.bot.tsl,\n                curorderid: resp.orderId,\n                curstop: stopprice,\n                curprice: price,\n                curquantity: quantity,\n                state: 'set_sell'\n            };\n            handleSuccess(msg);\n        }\n    } catch (err) {\n        handleError(msg, err);\n    }\n});",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1560,
        "wires": [
            [
                "865561afb5f6cf3e"
            ],
            [
                "c688b059e3dbd458"
            ]
        ]
    },
    {
        "id": "b4fb194f870a0113",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": " msell_on_binance",
        "func": "const binance = global.get('binance');\nconst tilog = global.get('tilog'); // Логирование\nconst botname = msg.payload.bot.botname;\n\n// Переменная для управления логированием\nconst enableLogging = true; // true - логирование включено, false - выключено\n\n// Функция для логирования\nfunction log(message, data = null) {\n    let nodeName = node.name;\n    let botname = msg.payload.bot.botname;\n    if (enableLogging && tilog) {\n        if (data) {\n            tilog(botname, `[${nodeName}] ${message}: ${JSON.stringify(data, null, 2)}`);\n        } else {\n            tilog(botname, `[${nodeName}] ${message}`);\n        }\n    }\n}\n\n// Функция для парсинга ошибок API\nfunction parseApiError(error) {\n    if (error.body) {\n        try {\n            const resp = JSON.parse(error.body);\n            return resp.msg;\n        } catch (e) {\n            // pass thru\n        }\n    }\n    return `Unknown error. Status code: ${error.statusCode}`;\n}\n\nasync function marketSellBinanceOrder(pair, quantity) {\n    return new Promise((resolve, reject) => {\n        binance.marketSell(pair, quantity, (err, resp) => {\n            if (err) {\n                log(2, `Ошибка при размещении market sell ордера: ${JSON.stringify(err)}`);\n                reject(err);\n            } else {\n                log(3, `Market sell ордер успешно размещен: ${JSON.stringify(resp)}`);\n                resolve(resp);\n            }\n        });\n    });\n}\n\n// Функция для обработки ошибок\nfunction handleError(msg, err) {\n    const errorMsg = parseApiError(err);\n    log(`Ошибка : ${errorMsg}`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = `Остановлен в результате ошибки ${errorMsg}`;\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    msg.err = err;\n    node.send([msg, null]);\n}\n\n// Функция для обработки успешного выполнения\nfunction handleSuccess(msg) {\n    log(`Успешно`);\n    //обновляем состояние\n\n    ///\n\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send([msg, msg]);\n}\n\n// Функция для обработки таймаута\nfunction handleTimeout(msg) {\n    log(`Остановлен в результате таймаута`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = \"Остановлен в результате таймаута\";\n    msg.payload.bot.status.updated = new Date().getTime();\n\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    node.send([msg, null]);\n}\n\n\nconst TIMEOUT = 2000;\n\nconst timeout = setTimeout(() => {\n    handleTimeout(msg);\n}, TIMEOUT);\n\n\nconst { pair } = msg.payload.bot.settings;\nconst quantity = msg.payload.bot.tsl.quantity_for_msell;\n\n// Используем серверное время для размещения ордера\nbinance.useServerTime(async () => {\n    try {\n        const resp = await marketSellBinanceOrder(pair, quantity);\n        clearTimeout(timeout);\n\n        // Обновление состояния бота\n        msg.payload.bot.tsl = {\n            ...msg.payload.bot.tsl,\n            curorderid: resp.orderId,\n            msellresp: resp,\n            state: 'sold'\n        };\n\n\n        handleSuccess(msg);\n    } catch (err) {\n        clearTimeout(timeout);\n        handleError(msg, err);\n    }\n});\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1660,
        "wires": [
            [
                "e77cbcad1a44565e"
            ],
            [
                "19db3f798c256501"
            ]
        ]
    },
    {
        "id": "4fe7639cf07bbba0",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": " sell_cancel_on_binance",
        "func": "const binance = global.get('binance');\nconst redis = context.global.get('redis');\nconst tilog = global.get('tilog'); // Логирование\nconst botname = msg.payload.bot.botname;\n\n// Переменная для управления логированием\nconst enableLogging = true; // true - логирование включено, false - выключено\n\n// Функция для логирования\nfunction log(message, data = null) {\n    let nodeName = node.name;\n    let botname = msg.payload.bot.botname;\n    if (enableLogging && tilog) {\n        if (data) {\n            tilog(botname, `[${nodeName}] ${message}: ${JSON.stringify(data, null, 2)}`);\n        } else {\n            tilog(botname, `[${nodeName}] ${message}`);\n        }\n    }\n}\n\n// Функция для парсинга ошибок API\nfunction parseApiError(error) {\n    if (error.body) {\n        try {\n            const resp = JSON.parse(error.body);\n            return resp.msg;\n        } catch (e) {\n            // pass thru\n        }\n    }\n    return `Unknown error. Status code: ${error.statusCode}`;\n}\n\n\n\nasync function cancelBinanceOrder(pair, orderId) {\n    return new Promise((resolve, reject) => {\n        binance.cancel(pair, orderId, (err, resp) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(resp);\n            }\n        });\n    });\n}\n\n// Функция для обработки ошибок\nfunction handleError(msg, err) {\n    const errorMsg = parseApiError(err);\n    log(`Ошибка : ${errorMsg}`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = `Остановлен в результате ошибки ${errorMsg}`;\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    msg.err = err;\n    node.send([msg, null]);\n}\n\n// Функция для обработки успешного выполнения\nfunction handleSuccess(msg) {\n    log(`Успешно`);\n    //обновляем состояние\n\n    ///\n\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send([msg, msg]);\n}\n\n// Функция для обработки таймаута\nfunction handleTimeout(msg) {\n    log(`Остановлен в результате таймаута`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = \"Остановлен в результате таймаута\";\n    msg.payload.bot.status.updated = new Date().getTime();\n\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    node.send([msg, null]);\n}\n\n\nconst TIMEOUT = 2000;\n\nconst timeout = setTimeout(() => {\n    handleTimeout(msg);\n}, TIMEOUT);\n\nconst { pair } = msg.payload.bot.settings;\nconst orderId = msg.payload.bot.tsl?.curorderid;\n\n// Используем серверное время для размещения ордера\nbinance.useServerTime(async () => {\n    try {\n        const resp = await cancelBinanceOrder(pair, orderId);\n        clearTimeout(timeout);\n        if (resp && resp.code) {\n            log(`Ошибка: ${resp.msg}`);\n            handleError(msg, { body: JSON.stringify({ msg: resp.msg }) });\n        } else {\n            // Обновление состояния\n            msg.payload.bot.tsl = {\n                \n                curorderid: null,\n                curstop: 0,\n                curprice: 0,\n                curquantity: 0,\n                state: '0',\n                orderstatus: null\n            };\n            clearTimeout(timeout);\n            redis.set(`orders-status:${pair}:${orderId}`, 'CANCELED');\n            handleSuccess(msg);\n        }\n    } catch (err) {\n        clearTimeout(timeout);\n        handleError(msg, err);\n    }\n});\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1760,
        "wires": [
            [
                "d04bcd8ccb523fe0"
            ],
            [
                "dff68e49a7c22ebe"
            ]
        ]
    },
    {
        "id": "cc24952e62fcfd58",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": " cancel_for_msell_on_binance",
        "func": "const binance = global.get('binance');\nconst tilog = global.get('tilog'); // Логирование\nconst botname = msg.payload.bot.botname;\n\n// Переменная для управления логированием\nconst enableLogging = true; // true - логирование включено, false - выключено\n\n// Функция для логирования\nfunction log(message, data = null) {\n    let nodeName = node.name;\n    let botname = msg.payload.bot.botname;\n    if (enableLogging && tilog) {\n        if (data) {\n            tilog(botname, `[${nodeName}] ${message}: ${JSON.stringify(data, null, 2)}`);\n        } else {\n            tilog(botname, `[${nodeName}] ${message}`);\n        }\n    }\n}\n\n// Функция для парсинга ошибок API\nfunction parseApiError(error) {\n    if (error.body) {\n        try {\n            const resp = JSON.parse(error.body);\n            return resp.msg;\n        } catch (e) {\n            // pass thru\n        }\n    }\n    return `Unknown error. Status code: ${error.statusCode}`;\n}\n\n\n\nasync function cancelBinanceOrder(pair, orderId) {\n    return new Promise((resolve, reject) => {\n        binance.cancel(pair, orderId, (err, resp) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(resp);\n            }\n        });\n    });\n}\n\n// Функция для обработки ошибок\nfunction handleError(msg, err) {\n    const errorMsg = parseApiError(err);\n    log(`Ошибка : ${errorMsg}`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = `Остановлен в результате ошибки ${errorMsg}`;\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    msg.err = err;\n    node.send([msg, null]);\n}\n\n// Функция для обработки успешного выполнения\nfunction handleSuccess(msg) {\n    log(`Успешно`);\n    //обновляем состояние\n\n    ///\n\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send([msg, msg]);\n}\n\n// Функция для обработки таймаута\nfunction handleTimeout(msg) {\n    log(`Остановлен в результате таймаута`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = \"Остановлен в результате таймаута\";\n    msg.payload.bot.status.updated = new Date().getTime();\n\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    node.send([msg, null]);\n}\n\n\nconst TIMEOUT = 2000;\n\nconst timeout = setTimeout(() => {\n    handleTimeout(msg);\n}, TIMEOUT);\n\n// Используем серверное время для размещения ордера\nbinance.useServerTime(async () => {\n    try {\n        const resp = await cancelBinanceOrder(msg.payload.bot.settings.pair, msg.payload.bot.tsl.curorderid)\n        clearTimeout(timeout);\n        if (resp && resp.code) {\n            log(`Ошибка: ${resp.msg}`);\n            handleError(msg, { body: JSON.stringify({ msg: resp.msg }) });\n        } else {\n            // Обновление состояния\n       \n        \n        msg.payload.bot.tsl = {\n            ...msg.payload.bot.tsl,\n            curorderid: null,\n            curstop: 0,\n            curprice: 0,\n            curquantity: 0,\n            state: 'canceled_for_msell'\n        };\n            clearTimeout(timeout);\n            handleSuccess(msg);\n        }\n    } catch (err) {\n        clearTimeout(timeout);\n        handleError(msg, err);\n    }\n});\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1860,
        "wires": [
            [
                "51f759e94b4a4b67"
            ],
            [
                "48ecf583d4854517"
            ]
        ]
    },
    {
        "id": "0d81a014b071e8e8",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": " order_status_on_binance",
        "func": "const binance = global.get('binance');\nconst tilog = global.get('tilog'); // Логирование\nconst botname = msg.payload.bot.botname;\n\n// Переменная для управления логированием\nconst enableLogging = true; // true - логирование включено, false - выключено\n\n// Функция для логирования\nfunction log(message, data = null) {\n    let nodeName = node.name;\n    let botname = msg.payload.bot.botname;\n    if (enableLogging && tilog) {\n        if (data) {\n            tilog(botname, `[${nodeName}] ${message}: ${JSON.stringify(data, null, 2)}`);\n        } else {\n            tilog(botname, `[${nodeName}] ${message}`);\n        }\n    }\n}\n\n// Функция для парсинга ошибок API\nfunction parseApiError(error) {\n    if (error.body) {\n        try {\n            const resp = JSON.parse(error.body);\n            return resp.msg;\n        } catch (e) {\n            // pass thru\n        }\n    }\n    return `Unknown error. Status code: ${error.statusCode}`;\n}\n\n// Промисификация функции binance.orderStatus\nasync function orderStatus(msg) {\n    return new Promise((resolve, reject) => {\n        binance.orderStatus(msg.payload.bot.settings.pair, undefined, (error, resp, symbol) => {\n            if (error) {\n                reject(error);\n            } else {\n                resolve(resp);\n            }\n        }, { orderId: msg.payload.bot.tsl.curorderid });\n\n\n\n\n\n    });\n}\n\n// Функция для обработки ошибок\nfunction handleError(msg, err) {\n    const errorMsg = parseApiError(err);\n    log(`Ошибка : ${errorMsg}`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = `Остановлен в результате ошибки ${errorMsg}`;\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    msg.err = err;\n    node.send([msg, null]);\n}\n\n// Функция для обработки успешного выполнения\nfunction handleSuccess(msg) {\n    log(`Успешно`);\n    //обновляем состояние\n\n    ///\n\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send([msg, msg]);\n}\n\n// Функция для обработки таймаута\nfunction handleTimeout(msg) {\n    log(`Остановлен в результате таймаута`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = \"Остановлен в результате таймаута\";\n    msg.payload.bot.status.updated = new Date().getTime();\n\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    node.send([msg, null]);\n}\n\n\nconst TIMEOUT = 2000;\n\nconst timeout = setTimeout(() => {\n    handleTimeout(msg);\n}, TIMEOUT);\n\n// Используем серверное время для размещения ордера\nbinance.useServerTime(async () => {\n    try {\n        const resp = await orderStatus(msg);\n\n        msg.payload.bot.tsl = {\n            ...msg.payload.bot.tsl,\n            resp: resp,\n            state: \"order_status\"\n        };\n\n        clearTimeout(timeout);\n        handleSuccess(msg);\n    } catch (err) {\n        clearTimeout(timeout);\n        handleError(msg, err);\n    }\n});\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1980,
        "wires": [
            [
                "67bacb5012d1d1f4"
            ],
            [
                "cea05990a01fcfdf"
            ]
        ]
    },
    {
        "id": "96c7a54b1904fca4",
        "type": "switch",
        "z": "b9310c7ff0384fdb",
        "name": "openpos.quantity > 0",
        "property": "msg.payload.bot.openpos.quantity",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 980,
        "y": 860,
        "wires": [
            [
                "d397ea75698f5833"
            ],
            [
                "c3b5da06a1755cac"
            ]
        ]
    },
    {
        "id": "76bdbc41f9aa4e75",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "floor_edit",
        "func": "msg.payload  = {\n\n    task: {\n        bot_id: msg.payload.bot.botname,\n        cmd: \"floor_edit\",\n        floor: msg.payload.bot.floors[msg.payload.task.floor.floorNumber]\n\n    }\n}\nmsg.topic = \"new_tasks \"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1380,
        "wires": [
            [
                "4457cea50df1f40c"
            ]
        ]
    },
    {
        "id": "7448a29ea843ad6d",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "floor_edit",
        "func": "msg.payload  = {\n\n    task: {\n        bot_id: msg.payload.bot.botname,\n        cmd: \"floor_edit\",\n        floor: msg.payload.bot.floors[msg.payload.task.floor.floorNumber]\n\n    }\n}\nmsg.topic = \"new_tasks\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1480,
        "wires": [
            [
                "c1695bd1c8bd7515"
            ]
        ]
    },
    {
        "id": "c688b059e3dbd458",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "tsl_edit",
        "func": "msg.payload  = {\n\n    task: {\n        bot_id: msg.payload.bot.botname,\n        cmd: \"tsl_edit\",\n        tsl: msg.payload.bot.tsl,\n        status: msg.payload.bot.status,\n        onoff: msg.payload.bot.onoff\n\n    }\n}\nmsg.topic = \"new_tasks\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1600,
        "wires": [
            [
                "514ab471abf12959"
            ]
        ]
    },
    {
        "id": "19db3f798c256501",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "tsl_edit",
        "func": "msg.payload  = {\n\n    task: {\n        bot_id: msg.payload.bot.botname,\n        cmd: \"tsl_edit\",\n        tsl: msg.payload.bot.tsl,\n        status: msg.payload.bot.status,\n        onoff: msg.payload.bot.onoff\n\n    }\n}\nmsg.topic = \"new_tasks\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1700,
        "wires": [
            [
                "43bcad2c5cf12a93"
            ]
        ]
    },
    {
        "id": "dff68e49a7c22ebe",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "tsl_edit",
        "func": "msg.payload  = {\n\n    task: {\n        bot_id: msg.payload.bot.botname,\n        cmd: \"tsl_edit\",\n        tsl: msg.payload.bot.tsl,\n        status: msg.payload.bot.status,\n        onoff: msg.payload.bot.onoff\n\n    }\n}\nmsg.topic = \"new_tasks\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1800,
        "wires": [
            [
                "156a620d1406bd49"
            ]
        ]
    },
    {
        "id": "48ecf583d4854517",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "tsl_edit",
        "func": "msg.payload  = {\n\n    task: {\n        bot_id: msg.payload.bot.botname,\n        cmd: \"tsl_edit\",\n        tsl: msg.payload.bot.tsl,\n        status: msg.payload.bot.status,\n        onoff: msg.payload.bot.onoff\n\n    }\n}\nmsg.topic = \"new_tasks\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1900,
        "wires": [
            [
                "28b93e6149a128a4"
            ]
        ]
    },
    {
        "id": "cea05990a01fcfdf",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "tsl_edit",
        "func": "msg.payload  = {\n\n    task: {\n        bot_id: msg.payload.bot.botname,\n        cmd: \"tsl_edit\",\n        tsl: msg.payload.bot.tsl,\n        status: msg.payload.bot.status,\n        onoff: msg.payload.bot.onoff\n\n    }\n}\nmsg.topic = \"new_tasks\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 2020,
        "wires": [
            [
                "cb345add78b4b87f"
            ]
        ]
    },
    {
        "id": "d397ea75698f5833",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "calc raschstopprice",
        "func": "const redis = context.global.get('redis');\nconst tilog = global.get('tilog');\nconst botname = msg.payload.bot.botname;\nconst enableLogging = true;\n\nfunction log(nodeName, logNumber, message, data = null) {\n    if (enableLogging && tilog) {\n        const text = data ? `${message}: ${JSON.stringify(data, null, 2)}` : message;\n        tilog(botname, `[${nodeName}] [${logNumber}] ${text}`);\n    }\n}\n\nconst pair = msg.payload.bot.settings.pair;\nconst offsettop = Number(msg.payload.bot.settings.offsettop);\nconst digitprice = Number(msg.payload.bot.settings.digitprice);\n\nlet currentprice = Number(msg.payload.bot.status.currentprice);\n\nmsg.payload.bot.status.currentprice = currentprice;\nmsg.payload.bot.tsl.raschstopprice = Number((currentprice * (1 - offsettop / 100)).toFixed(digitprice));\n//log('calc-raschstopprice', '4', `Calculated raschstopprice: ${msg.payload.bot.tsl.raschstopprice}`);\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 860,
        "wires": [
            [
                "0a42d4944c8cf3b4"
            ]
        ]
    },
    {
        "id": "c3b5da06a1755cac",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "bypass1",
        "func": "\nmsg.payload.bot.status.rezhim = \"Ожидание покупки\"\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 940,
        "wires": [
            [
                "399f7ce95e9ae28f"
            ]
        ]
    },
    {
        "id": "0a42d4944c8cf3b4",
        "type": "switch",
        "z": "b9310c7ff0384fdb",
        "name": "tsl.state",
        "property": "payload.bot.tsl.state",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "set_sell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "order_status",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "canceled_for_msell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sold",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pending_order_status",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pending_cancel_for_msell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pending_sell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pending_cancel_up",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pending_msell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pending_for_regist",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 12,
        "x": 1400,
        "y": 860,
        "wires": [
            [
                "2f1324ca25290589"
            ],
            [
                "89230a76215c1f78"
            ],
            [
                "a3a57f1700974db2"
            ],
            [
                "5b75b663ce2fc656"
            ],
            [
                "d43bef31bc0f3f6e"
            ],
            [
                "3935e79eaed70349"
            ],
            [
                "3935e79eaed70349"
            ],
            [
                "3935e79eaed70349"
            ],
            [
                "3935e79eaed70349"
            ],
            [
                "3935e79eaed70349"
            ],
            [
                "3935e79eaed70349"
            ],
            [
                "3935e79eaed70349"
            ]
        ]
    },
    {
        "id": "399f7ce95e9ae28f",
        "type": "link out",
        "z": "b9310c7ff0384fdb",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "8a2aec482a22cb84"
        ],
        "x": 1285,
        "y": 940,
        "wires": []
    },
    {
        "id": "2f1324ca25290589",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "sell_on_binance",
        "func": "const tilog = global.get('tilog');\nconst botname = msg.payload.bot.botname;\nconst enableLogging = true;\n\nfunction log(nodeName, logNumber, message, data = null) {\n    if (enableLogging && tilog) {\n        const text = data ? `${message}: ${JSON.stringify(data, null, 2)}` : message;\n        tilog(botname, `[${nodeName}] [${logNumber}] ${text}`);\n    }\n}\n\nconst pair = msg.payload.bot.settings.pair;\nconst offsettop = Number(msg.payload.bot.settings.offsettop);\nconst digitprice = Number(msg.payload.bot.settings.digitprice);\nlet raschstopprice = msg.payload.bot.tsl.raschstopprice;\nconst offsetbottom = Number(msg.payload.bot.settings.offsetbottom);\n\n\nconst price = Number((raschstopprice * (1 - offsetbottom / 100)).toFixed(digitprice));\nconst stopprice = Number(raschstopprice.toFixed(digitprice));\nconst quantity = msg.payload.bot.openpos.quantity;\n\nnode.log(`Рассчитанная цена: ${price}, стоп-цена: ${stopprice}, количество: ${quantity}`);\n\nmsg.payload.bot.status.rezhim = `Размещен ордер - цена: ${price}, стоп-цена: ${stopprice}, количество: ${quantity}`;\nmsg.payload.bot.tsl.state = 'pending_sell';\nmsg.payload.bot.tsl.curstop = stopprice;\n\n\nnode.send([null, {\n    payload: {\n\n        task: {\n            bot_id: msg.payload.bot.botname,\n            cmd: `sell_on_${msg.payload.bot.settings.exchange.toLowerCase()}`,\n            params: {\n                pair,\n                quantity,\n                price,\n                stopprice\n            }\n        }\n    }\n}]);\n\nnode.log(`Отправлена команда на продажу с параметрами: ${JSON.stringify({ pair, quantity, price, stopprice })}`);\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 600,
        "wires": [
            [
                "8425bd140dc65ef9"
            ],
            [
                "651036bf57bcabeb"
            ]
        ]
    },
    {
        "id": "89230a76215c1f78",
        "type": "switch",
        "z": "b9310c7ff0384fdb",
        "name": "raschstopprice > curstop",
        "property": "payload.bot.tsl.raschstopprice",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "payload.bot.tsl.curstop",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1690,
        "y": 700,
        "wires": [
            [
                "be79782622ba9c6e"
            ],
            [
                "e786191d874735bb"
            ]
        ]
    },
    {
        "id": "a3a57f1700974db2",
        "type": "switch",
        "z": "b9310c7ff0384fdb",
        "name": "resp.status",
        "property": "payload.bot.tsl.resp.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1650,
        "y": 840,
        "wires": [
            [
                "bee938dd25e732a8"
            ],
            [
                "e1a9efd9c4efe8bc"
            ]
        ]
    },
    {
        "id": "5b75b663ce2fc656",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "msell",
        "func": "const pair = msg.payload.bot.settings.pair;\nconst quantity = msg.payload.bot.tsl.quantity_for_msell\n\n\nmsg.payload.bot.tsl.state = 'pending_msell';\n\n\nnode.send([null, {\n    payload: {\n\n        task: {\n            bot_id: msg.payload.bot.botname,\n            cmd: `msell_on_${msg.payload.bot.settings.exchange.toLowerCase()}`,\n            params: {\n                pair,\n                quantity,\n                \n            }\n        }\n    }\n}]);\n\nmsg.topic = 'fjob';\nmsg.payload.bot.status.updated = new Date().getTime();\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 940,
        "wires": [
            [
                "0e786f9d73a9ecc1"
            ],
            [
                "e9c26c5b8a16eefc"
            ]
        ]
    },
    {
        "id": "d43bef31bc0f3f6e",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "regist_lead",
        "func": "msg.payload.bot.tsl.state = 'pending_for_regist';\nmsg.payload.bot.status.rezhim = `Регистрация сделки`;\nnode.send([null, {\n    payload: {\n        task: {\n            bot_id: msg.payload.bot.botname,\n            cmd: `regist_lead`,\n\n        }\n    }\n}]);\n\n\n\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 1060,
        "wires": [
            [
                "468eda9e80941718"
            ],
            [
                "eaa37e2bfabb08dd"
            ]
        ]
    },
    {
        "id": "3935e79eaed70349",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "bypass4",
        "func": "msg.topic = 'fjob';\nmsg.payload.bot.status.updated = new Date().getTime();\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1140,
        "wires": [
            [
                "a006f2078a3ea7bb"
            ]
        ]
    },
    {
        "id": "8425bd140dc65ef9",
        "type": "link out",
        "z": "b9310c7ff0384fdb",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "8a2aec482a22cb84"
        ],
        "x": 1795,
        "y": 580,
        "wires": []
    },
    {
        "id": "be79782622ba9c6e",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "cancel_up",
        "func": "//отменяем ордер, что повлечет за собой его выставление заново\nconst redis = context.global.get('redis');\nconst pair = msg.payload.bot.settings.pair;\nconst curorderid = msg.payload.bot.tsl.curorderid;\n\nasync function getOrderStatus(orderId) {\n    return new Promise((resolve, reject) => {\n        redis.get(`orders-status:${pair}:${orderId}`, (err, data) => {\n            err ? reject(err) : resolve(data);\n        });\n    });\n}\nconst status = await getOrderStatus(curorderid);\nif (status === \"NEW\") {\n    msg.payload.bot.tsl.state = 'pending_cancel_up';\n    msg.payload.bot.status.rezhim = `Перевыставляю ордер`;\n    node.send([null, {\n        payload: {\n\n            task: {\n                bot_id: msg.payload.bot.botname,\n                cmd: `sell_cancel_on_${msg.payload.bot.settings.exchange.toLowerCase()}`,\n                params: {\n                    orderId: curorderid\n                }\n            }\n        }\n    }]);\n}\n\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 660,
        "wires": [
            [
                "5366d350f5892c01"
            ],
            [
                "44bc3bf586530a4a"
            ]
        ]
    },
    {
        "id": "e786191d874735bb",
        "type": "switch",
        "z": "b9310c7ff0384fdb",
        "name": "currentprice >= curstop",
        "property": "payload.bot.status.currentprice",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "payload.bot.tsl.curstop",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1990,
        "y": 740,
        "wires": [
            [
                "9ee1e25c6151a1b8"
            ],
            [
                "b167bbeca05d254a"
            ]
        ],
        "outputLabels": [
            "",
            "Проскальзывание"
        ]
    },
    {
        "id": "bee938dd25e732a8",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "sold",
        "func": "\n//msg.payload.bot.tsl.averageSellPrice = \n\nmsg.payload.bot.tsl.state = 'sold';\n\nmsg.topic = 'fjob';\nmsg.payload.bot.status.updated = new Date().getTime();\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 820,
        "wires": [
            [
                "d9fe2498224a8e97"
            ]
        ]
    },
    {
        "id": "e1a9efd9c4efe8bc",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "cancel_for_msell",
        "func": "\nlet executedQty = msg.payload.bot.tsl.resp.executedQty;\nlet cummulativeQuoteQty = msg.payload.bot.tsl.resp.cummulativeQuoteQty;\n\nlet curorderid = msg.payload.bot.tsl.curorderid;\n\n\nmsg.payload.bot.tsl.sellprice1 = Number(cummulativeQuoteQty)/Number(executedQty);\n\nmsg.payload.bot.tsl.quantity_for_msell = msg.payload.bot.tsl.curquantity - executedQty;\n\nmsg.payload.bot.tsl.state = 'pending_cancel_for_msell';\n  node.send([null, {\n        payload: {\n\n            task: {\n                bot_id: msg.payload.bot.botname,\n                cmd: `cancel_for_msell_on_${msg.payload.bot.settings.exchange.toLowerCase()}`,\n                params: {\n                    orderId: curorderid\n                }\n            }\n        }\n    }]);\n\n\nmsg.topic = 'fjob';\nmsg.payload.bot.status.updated = new Date().getTime();\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 860,
        "wires": [
            [
                "461b25c5ec2dca21"
            ],
            [
                "1b9df361fa12e8af"
            ]
        ]
    },
    {
        "id": "0e786f9d73a9ecc1",
        "type": "link out",
        "z": "b9310c7ff0384fdb",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "8a2aec482a22cb84"
        ],
        "x": 1735,
        "y": 920,
        "wires": []
    },
    {
        "id": "468eda9e80941718",
        "type": "link out",
        "z": "b9310c7ff0384fdb",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "8a2aec482a22cb84"
        ],
        "x": 1775,
        "y": 1040,
        "wires": []
    },
    {
        "id": "a006f2078a3ea7bb",
        "type": "link out",
        "z": "b9310c7ff0384fdb",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "8a2aec482a22cb84"
        ],
        "x": 1755,
        "y": 1140,
        "wires": []
    },
    {
        "id": "5366d350f5892c01",
        "type": "link out",
        "z": "b9310c7ff0384fdb",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "8a2aec482a22cb84"
        ],
        "x": 2075,
        "y": 640,
        "wires": []
    },
    {
        "id": "9ee1e25c6151a1b8",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "getOrderStatus1",
        "func": "const redis = context.global.get('redis');\nconst tilog = global.get('tilog');\n\nconst botname = msg.payload.bot.botname;\n\n\n\nconst pair = msg.payload.bot.settings.pair;\n\nasync function getOrderStatus(orderId) {\n    return new Promise((resolve, reject) => {\n        redis.get(`orders-status:${pair}:${orderId}`, (err, data) => {\n            err ? reject(err) : resolve(data);\n        });\n    });\n}\n\n\nconst orderId = msg.payload.bot.tsl.curorderid;\nconst status = await getOrderStatus(orderId);\n\nmsg.payload.bot.tsl.orderstatus = status;\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2300,
        "y": 680,
        "wires": [
            [
                "872b9132e8acfd71"
            ]
        ]
    },
    {
        "id": "b167bbeca05d254a",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "getOrderStatus2",
        "func": "const redis = context.global.get('redis');\nconst tilog = global.get('tilog');\n\nconst botname = msg.payload.bot.botname;\n\nconst enableLogging = true;\n\nfunction log(nodeName, logNumber, message, data = null) {\n    if (enableLogging && tilog) {\n        const text = data ? `${message}: ${JSON.stringify(data, null, 2)}` : message;\n        tilog(botname, `[${nodeName}] [${logNumber}] ${text}`);\n    }\n}\n\nconst pair = msg.payload.bot.settings.pair;\n\nfunction getOrderStatus(orderId) {\n    return new Promise((resolve, reject) => {\n        redis.get(`orders-status:${pair}:${orderId}`, (err, data) => {\n            err ? reject(err) : resolve(data);\n        });\n    });\n}\n\n\nconst orderId = msg.payload.bot.tsl.curorderid;\nconst status = await getOrderStatus(orderId);\n\nmsg.payload.bot.tsl.orderstatus = status;\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2300,
        "y": 820,
        "wires": [
            [
                "964195bdde8f2c4d"
            ]
        ]
    },
    {
        "id": "d9fe2498224a8e97",
        "type": "link out",
        "z": "b9310c7ff0384fdb",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "8a2aec482a22cb84"
        ],
        "x": 1915,
        "y": 820,
        "wires": []
    },
    {
        "id": "461b25c5ec2dca21",
        "type": "link out",
        "z": "b9310c7ff0384fdb",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "8a2aec482a22cb84"
        ],
        "x": 1995,
        "y": 840,
        "wires": []
    },
    {
        "id": "872b9132e8acfd71",
        "type": "switch",
        "z": "b9310c7ff0384fdb",
        "name": "статус ордера",
        "property": "payload.bot.tsl.orderstatus",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 2500,
        "y": 680,
        "wires": [
            [
                "4efd058e38274df3"
            ],
            [
                "400861f3e634958b"
            ],
            [
                "400861f3e634958b"
            ],
            [
                "400861f3e634958b"
            ],
            [
                "400861f3e634958b"
            ],
            [
                "400861f3e634958b"
            ],
            [
                "400861f3e634958b"
            ]
        ]
    },
    {
        "id": "964195bdde8f2c4d",
        "type": "switch",
        "z": "b9310c7ff0384fdb",
        "name": "статус ордера",
        "property": "payload.bot.tsl.orderstatus",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 2500,
        "y": 820,
        "wires": [
            [
                "983c942433962d0f"
            ],
            [
                "983c942433962d0f"
            ],
            [
                "47cb60a58c4b504b"
            ],
            [
                "47cb60a58c4b504b"
            ],
            [
                "47cb60a58c4b504b"
            ],
            [
                "47cb60a58c4b504b"
            ],
            [
                "47cb60a58c4b504b"
            ]
        ]
    },
    {
        "id": "4efd058e38274df3",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "fetchOrderOnExch1",
        "func": "\nconst curorderid = msg.payload.bot.tsl.curorderid;\n\n\nmsg.payload.bot.tsl.state = 'pending_order_status';\n  node.send([null, {\n        payload: {\n\n            task: {\n                bot_id: msg.payload.bot.botname,\n                cmd: `order_status_on_${msg.payload.bot.settings.exchange.toLowerCase()}`,\n                params: {\n                    orderId: curorderid\n                }\n            }\n        }\n    }]);\n\n\nmsg.topic = 'fjob';\nmsg.payload.bot.status.updated = new Date().getTime();\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2720,
        "y": 640,
        "wires": [
            [
                "cbb10309c0e456b7"
            ],
            [
                "65f854095593faa6"
            ]
        ]
    },
    {
        "id": "400861f3e634958b",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "bypass2",
        "func": "\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2680,
        "y": 700,
        "wires": [
            [
                "b6ecaffc47d2d014"
            ]
        ]
    },
    {
        "id": "983c942433962d0f",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "fetchOrderOnExch2",
        "func": "\nconst curorderid = msg.payload.bot.tsl.curorderid;\n\n\nmsg.payload.bot.tsl.state = 'pending_order_status';\n  node.send([null, {\n        payload: {\n\n            task: {\n                bot_id: msg.payload.bot.botname,\n                cmd: `order_status_on_${msg.payload.bot.settings.exchange.toLowerCase()}`,\n                params: {\n                    orderId: curorderid\n                }\n            }\n        }\n    }]);\n\n\nmsg.topic = 'fjob';\nmsg.payload.bot.status.updated = new Date().getTime();\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2720,
        "y": 780,
        "wires": [
            [
                "c20aecd268a3c25c"
            ],
            [
                "81a14afc69bc13a6"
            ]
        ]
    },
    {
        "id": "47cb60a58c4b504b",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "bypass3",
        "func": "msg.topic = 'fjob';\nmsg.payload.bot.status.updated = new Date().getTime();\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2680,
        "y": 840,
        "wires": [
            [
                "32eba14e60381aaf"
            ]
        ]
    },
    {
        "id": "cbb10309c0e456b7",
        "type": "link out",
        "z": "b9310c7ff0384fdb",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "8a2aec482a22cb84"
        ],
        "x": 2875,
        "y": 620,
        "wires": []
    },
    {
        "id": "b6ecaffc47d2d014",
        "type": "link out",
        "z": "b9310c7ff0384fdb",
        "name": "link out 10",
        "mode": "link",
        "links": [
            "8a2aec482a22cb84"
        ],
        "x": 2795,
        "y": 700,
        "wires": []
    },
    {
        "id": "c20aecd268a3c25c",
        "type": "link out",
        "z": "b9310c7ff0384fdb",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "8a2aec482a22cb84"
        ],
        "x": 2875,
        "y": 760,
        "wires": []
    },
    {
        "id": "32eba14e60381aaf",
        "type": "link out",
        "z": "b9310c7ff0384fdb",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "8a2aec482a22cb84"
        ],
        "x": 2795,
        "y": 840,
        "wires": []
    },
    {
        "id": "8a2aec482a22cb84",
        "type": "link in",
        "z": "b9310c7ff0384fdb",
        "name": "link in 3",
        "links": [
            "399f7ce95e9ae28f",
            "8425bd140dc65ef9",
            "5366d350f5892c01",
            "d9fe2498224a8e97",
            "461b25c5ec2dca21",
            "b6ecaffc47d2d014",
            "cbb10309c0e456b7",
            "c20aecd268a3c25c",
            "32eba14e60381aaf",
            "468eda9e80941718",
            "0e786f9d73a9ecc1",
            "a006f2078a3ea7bb",
            "832de08b7dde7fc9",
            "b7423b4a7c0f9536",
            "fd5527b8effd7c86",
            "c459adbd79eee616",
            "865561afb5f6cf3e",
            "e77cbcad1a44565e",
            "d04bcd8ccb523fe0",
            "51f759e94b4a4b67",
            "67bacb5012d1d1f4",
            "bb115e77e6812b68",
            "330e686a8d79990b"
        ],
        "x": 105,
        "y": 920,
        "wires": [
            [
                "59d25948ac1b8522"
            ]
        ]
    },
    {
        "id": "651036bf57bcabeb",
        "type": "redis-out",
        "z": "b9310c7ff0384fdb",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1850,
        "y": 620,
        "wires": []
    },
    {
        "id": "44bc3bf586530a4a",
        "type": "redis-out",
        "z": "b9310c7ff0384fdb",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 2130,
        "y": 680,
        "wires": []
    },
    {
        "id": "1b9df361fa12e8af",
        "type": "redis-out",
        "z": "b9310c7ff0384fdb",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 2050,
        "y": 880,
        "wires": []
    },
    {
        "id": "e9c26c5b8a16eefc",
        "type": "redis-out",
        "z": "b9310c7ff0384fdb",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1790,
        "y": 960,
        "wires": []
    },
    {
        "id": "eaa37e2bfabb08dd",
        "type": "redis-out",
        "z": "b9310c7ff0384fdb",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1830,
        "y": 1080,
        "wires": []
    },
    {
        "id": "65f854095593faa6",
        "type": "redis-out",
        "z": "b9310c7ff0384fdb",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 2930,
        "y": 660,
        "wires": []
    },
    {
        "id": "81a14afc69bc13a6",
        "type": "redis-out",
        "z": "b9310c7ff0384fdb",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 2930,
        "y": 800,
        "wires": []
    },
    {
        "id": "4457cea50df1f40c",
        "type": "redis-out",
        "z": "b9310c7ff0384fdb",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1008.3333129882812,
        "y": 1386.6666259765625,
        "wires": []
    },
    {
        "id": "c1695bd1c8bd7515",
        "type": "redis-out",
        "z": "b9310c7ff0384fdb",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1010,
        "y": 1480,
        "wires": []
    },
    {
        "id": "514ab471abf12959",
        "type": "redis-out",
        "z": "b9310c7ff0384fdb",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1010,
        "y": 1600,
        "wires": []
    },
    {
        "id": "43bcad2c5cf12a93",
        "type": "redis-out",
        "z": "b9310c7ff0384fdb",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1010,
        "y": 1700,
        "wires": []
    },
    {
        "id": "156a620d1406bd49",
        "type": "redis-out",
        "z": "b9310c7ff0384fdb",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1010,
        "y": 1800,
        "wires": []
    },
    {
        "id": "28b93e6149a128a4",
        "type": "redis-out",
        "z": "b9310c7ff0384fdb",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1010,
        "y": 1900,
        "wires": []
    },
    {
        "id": "cb345add78b4b87f",
        "type": "redis-out",
        "z": "b9310c7ff0384fdb",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1010,
        "y": 2020,
        "wires": []
    },
    {
        "id": "2b2a4d3dea5b3b23",
        "type": "debug",
        "z": "b9310c7ff0384fdb",
        "g": "35c2a239ec051eff",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1780,
        "y": 120,
        "wires": []
    },
    {
        "id": "279dfe95f979e767",
        "type": "catch",
        "z": "b9310c7ff0384fdb",
        "g": "35c2a239ec051eff",
        "name": "catch all",
        "scope": null,
        "uncaught": false,
        "x": 1440,
        "y": 180,
        "wires": [
            [
                "2b2a4d3dea5b3b23",
                "a79383e70d444c8d"
            ]
        ]
    },
    {
        "id": "335696d4483c8523",
        "type": "redis-out",
        "z": "b9310c7ff0384fdb",
        "g": "35c2a239ec051eff",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 1790,
        "y": 180,
        "wires": []
    },
    {
        "id": "832de08b7dde7fc9",
        "type": "link out",
        "z": "b9310c7ff0384fdb",
        "name": "link out 13",
        "mode": "link",
        "links": [
            "8a2aec482a22cb84"
        ],
        "x": 815,
        "y": 440,
        "wires": []
    },
    {
        "id": "b7423b4a7c0f9536",
        "type": "link out",
        "z": "b9310c7ff0384fdb",
        "name": "link out 14",
        "mode": "link",
        "links": [
            "8a2aec482a22cb84"
        ],
        "x": 825,
        "y": 520,
        "wires": []
    },
    {
        "id": "fd5527b8effd7c86",
        "type": "link out",
        "z": "b9310c7ff0384fdb",
        "name": "link out 15",
        "mode": "link",
        "links": [
            "8a2aec482a22cb84"
        ],
        "x": 1125,
        "y": 1240,
        "wires": []
    },
    {
        "id": "c459adbd79eee616",
        "type": "link out",
        "z": "b9310c7ff0384fdb",
        "name": "link out 16",
        "mode": "link",
        "links": [
            "8a2aec482a22cb84"
        ],
        "x": 955,
        "y": 1340,
        "wires": []
    },
    {
        "id": "865561afb5f6cf3e",
        "type": "link out",
        "z": "b9310c7ff0384fdb",
        "name": "link out 17",
        "mode": "link",
        "links": [
            "8a2aec482a22cb84"
        ],
        "x": 955,
        "y": 1560,
        "wires": []
    },
    {
        "id": "e77cbcad1a44565e",
        "type": "link out",
        "z": "b9310c7ff0384fdb",
        "name": "link out 18",
        "mode": "link",
        "links": [
            "8a2aec482a22cb84"
        ],
        "x": 955,
        "y": 1660,
        "wires": []
    },
    {
        "id": "d04bcd8ccb523fe0",
        "type": "link out",
        "z": "b9310c7ff0384fdb",
        "name": "link out 19",
        "mode": "link",
        "links": [
            "8a2aec482a22cb84"
        ],
        "x": 955,
        "y": 1760,
        "wires": []
    },
    {
        "id": "51f759e94b4a4b67",
        "type": "link out",
        "z": "b9310c7ff0384fdb",
        "name": "link out 20",
        "mode": "link",
        "links": [
            "8a2aec482a22cb84"
        ],
        "x": 955,
        "y": 1860,
        "wires": []
    },
    {
        "id": "67bacb5012d1d1f4",
        "type": "link out",
        "z": "b9310c7ff0384fdb",
        "name": "link out 21",
        "mode": "link",
        "links": [
            "8a2aec482a22cb84"
        ],
        "x": 955,
        "y": 1980,
        "wires": []
    },
    {
        "id": "98360c8fbac76e91",
        "type": "redis-out",
        "z": "b9310c7ff0384fdb",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "fjob",
        "obj": true,
        "x": 150,
        "y": 980,
        "wires": []
    },
    {
        "id": "59d25948ac1b8522",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "msg.topic = \"fjob\"",
        "func": "msg.payload.bot.status.updated = new Date().getTime();\nmsg.topic = \"fjob\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 920,
        "wires": [
            [
                "98360c8fbac76e91"
            ]
        ]
    },
    {
        "id": "bb115e77e6812b68",
        "type": "link out",
        "z": "b9310c7ff0384fdb",
        "name": "link out 22",
        "mode": "link",
        "links": [
            "8a2aec482a22cb84"
        ],
        "x": 955,
        "y": 1440,
        "wires": []
    },
    {
        "id": "a79383e70d444c8d",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "g": "35c2a239ec051eff",
        "name": "msg.reset = true",
        "func": "msg.reset = true\nmsg.topic = 'stop'\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 180,
        "wires": [
            [
                "335696d4483c8523"
            ]
        ]
    },
    {
        "id": "26cd6d7cd125cd7c",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "buyed",
        "func": "// Функция для сканирования и обработки ордеров\nfunction scanAndProcessOrders(pair, redisClient, callback) {\n\n    let cursor = '0'; // Начальный курсор для SCAN\n\n    function scan(cursor) {\n        redisClient.scan(cursor, 'MATCH', `orders-status:${pair}:*`, 'COUNT', 100, (err, reply) => {\n            if (err) {\n                node.error(\"Ошибка при сканировании Redis: \" + err, msg);\n                return callback(buyed); // Возвращаем пустой массив в случае ошибки\n            }\n\n            let nextCursor = reply[0]; // Следующий курсор\n            let keys = reply[1]; // Найденные ключи\n\n\n            // Если ключи найдены\n            if (keys.length > 0) {\n                let processedKeys = 0; // Счетчик обработанных ключей\n\n                keys.forEach(key => {\n                    // Проверяем, что ключ заканчивается на \"-side\"\n                    if (key.endsWith(\"-side\")) {\n                        redisClient.get(key, (err, side) => {\n                            if (err) {\n                                node.error(\"Ошибка при получении значения ключа: \" + err, msg);\n                                return;\n                            }\n\n                            // Проверяем, что side = 'BUY'\n                            if (side === 'BUY') {\n                                // Извлекаем номер ордера (удаляем суффикс \"-side\")\n                                let number = key.split(':')[2].replace(\"-side\", \"\");\n\n\n                                // Проверяем, есть ли номер ордера уже в buyed\n                                let isAlreadyProcessed = buyed.some(order => order[0] === number);\n\n                                // Если ордер еще не обработан\n                                if (!isAlreadyProcessed) {\n                                    // Получаем данные по ордеру\n                                    redisClient.mget(\n                                        [\n                                            `orders-status:${pair}:${number}-price`,\n                                            `orders-status:${pair}:${number}-comsa`,\n                                            `orders-status:${pair}:${number}-quantity`\n                                        ],\n                                        (err, results) => {\n                                            if (err) {\n                                                node.error(\"Ошибка при получении данных ордера: \" + err, msg);\n                                                return;\n                                            }\n\n                                            let [price, comsa, quantity] = results;\n\n                                            // Добавляем данные в массив buyed\n                                            buyed.push([number, quantity, price, comsa]);\n\n                                            // Увеличиваем счетчик обработанных ключей\n                                            processedKeys++;\n\n                                            // Если все ключи обработаны, продолжаем сканирование\n                                            if (processedKeys === keys.length && nextCursor !== '0') {\n                                                scan(nextCursor);\n                                            } else if (processedKeys === keys.length && nextCursor === '0') {\n                                                callback(buyed); // Возвращаем результат, если сканирование завершено\n                                            }\n                                        }\n                                    );\n                                } else {\n                                    // Увеличиваем счетчик обработанных ключей\n                                    processedKeys++;\n\n                                    // Если все ключи обработаны, продолжаем сканирование\n                                    if (processedKeys === keys.length && nextCursor !== '0') {\n                                        scan(nextCursor);\n                                    } else if (processedKeys === keys.length && nextCursor === '0') {\n                                        callback(buyed); // Возвращаем результат, если сканирование завершено\n                                    }\n                                }\n                            } else {\n                                // Увеличиваем счетчик обработанных ключей\n                                processedKeys++;\n\n                                // Если все ключи обработаны, продолжаем сканирование\n                                if (processedKeys === keys.length && nextCursor !== '0') {\n                                    scan(nextCursor);\n                                } else if (processedKeys === keys.length && nextCursor === '0') {\n                                    callback(buyed); // Возвращаем результат, если сканирование завершено\n                                }\n                            }\n                        });\n                    } else {\n                        // Если ключ не заканчивается на \"-side\", просто увеличиваем счетчик\n                        processedKeys++;\n\n                        // Если все ключи обработаны, продолжаем сканирование\n                        if (processedKeys === keys.length && nextCursor !== '0') {\n                            scan(nextCursor);\n                        } else if (processedKeys === keys.length && nextCursor === '0') {\n                            callback(buyed); // Возвращаем результат, если сканирование завершено\n                        }\n                    }\n                });\n            } else {\n                // Если ключей нет, продолжаем сканирование или завершаем\n                if (nextCursor !== '0') {\n                    scan(nextCursor);\n                } else {\n                    callback(buyed); // Возвращаем результат, если сканирование завершено\n                }\n            }\n        });\n    }\n\n    scan(cursor); // Начинаем сканирование\n}\n\nfunction sumSecondElements(array) {\n    return array.reduce((sum, subArray) => sum + parseFloat(subArray[1]), 0);\n}\n\n// Основная логика\nlet pair = msg.payload.bot.settings.pair\nconst redisClient = context.global.get('redis');\nconst digitq = Number(msg.payload.bot.settings.digitq);\nlet buyed = msg.payload.bot.openpos.buyed || []; // Массив для хранения данных о купленных ордерах\n\n\nscanAndProcessOrders(pair, redisClient, (buyed) => {\n\n    msg.payload.bot.openpos.buyed = buyed // Записываем результат \n\n    let q = sumSecondElements(buyed);\n    msg.payload.bot.openpos.quantity = Number((q).toFixed(digitq));\nmsg.payload.bot.finance.depo = msg.payload.bot.openpos.quantity * msg.payload.bot.status.currentprice\n\n    let totalBuyCost = 0;\n    for (const buy of buyed) {\n        const [orderId, quantityStr, priceStr, commissionStr] = buy;\n        const quantity = parseFloat(quantityStr);\n        const price = parseFloat(priceStr);\n        const commission = parseFloat(commissionStr);\n\n        totalBuyCost += quantity * price;\n\n    }\n\n\n\n    msg.payload.bot.finance.startdepo = totalBuyCost\n \n\n    if (msg.payload.bot.openpos.quantity !== msg.payload.bot.tsl.curquantity) {\n        msg.payload.bot.status.rezhim = `Изменился размер ордера`;\n        node.send([null, msg]);\n    }\n    node.send([msg, null]); // Отправляем сообщение дальше\n});",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 860,
        "wires": [
            [
                "96c7a54b1904fca4"
            ],
            [
                "cf64d3604b8a4562"
            ]
        ]
    },
    {
        "id": "8b0716b2f93b4c0e",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "changesettings",
        "func": "let newsettings = msg.payload.task.params\nmsg.payload.bot.settings = newsettings\n\n\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 380,
        "wires": [
            [
                "79297c84a5079b15"
            ]
        ]
    },
    {
        "id": "330e686a8d79990b",
        "type": "link out",
        "z": "b9310c7ff0384fdb",
        "name": "link out 23",
        "mode": "link",
        "links": [
            "8a2aec482a22cb84"
        ],
        "x": 1015,
        "y": 360,
        "wires": []
    },
    {
        "id": "2769a5b5babcb473",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "tgmsg",
        "func": "let tgmsg = msg.payload;\n\n\nmsg = {};\nmsg.payload = {tgmsg};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1280,
        "wires": [
            [
                "04833c8c132076bf"
            ]
        ]
    },
    {
        "id": "04833c8c132076bf",
        "type": "redis-out",
        "z": "b9310c7ff0384fdb",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "tgpost",
        "obj": true,
        "x": 1030,
        "y": 1280,
        "wires": []
    },
    {
        "id": "79297c84a5079b15",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "cancel_up",
        "func": "//отменяем ордер, что повлечет за собой его выставление заново\nconst redis = context.global.get('redis');\nconst pair = msg.payload.bot.settings.pair;\nconst curorderid = msg.payload.bot.tsl.curorderid;\n\nasync function getOrderStatus(orderId) {\n    return new Promise((resolve, reject) => {\n        redis.get(`orders-status:${pair}:${orderId}`, (err, data) => {\n            err ? reject(err) : resolve(data);\n        });\n    });\n}\nconst status = await getOrderStatus(curorderid);\nif (status === \"NEW\") {\n    msg.payload.bot.tsl.state = 'pending_cancel_up';\n    msg.payload.bot.status.rezhim = `Изменились настройки - перевыставляю ордер`;\n    node.send([null, {\n        payload: {\n\n            task: {\n                bot_id: msg.payload.bot.botname,\n                cmd: `sell_cancel_on_${msg.payload.bot.settings.exchange.toLowerCase()}`,\n                params: {\n                    orderId: curorderid\n                }\n            }\n        }\n    }]);\n}\n\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 380,
        "wires": [
            [
                "330e686a8d79990b"
            ],
            [
                "f83c77a954e9e3a0"
            ]
        ]
    },
    {
        "id": "f83c77a954e9e3a0",
        "type": "redis-out",
        "z": "b9310c7ff0384fdb",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1070,
        "y": 400,
        "wires": []
    },
    {
        "id": "2e9f14edfaba824a",
        "type": "redis-out",
        "z": "b9310c7ff0384fdb",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 970,
        "y": 940,
        "wires": []
    },
    {
        "id": "cf64d3604b8a4562",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "cancel_up",
        "func": "//отменяем ордер, что повлечет за собой его выставление заново\nconst redis = context.global.get('redis');\nconst pair = msg.payload.bot.settings.pair;\nconst curorderid = msg.payload.bot.tsl.curorderid;\n\nasync function getOrderStatus(orderId) {\n    return new Promise((resolve, reject) => {\n        redis.get(`orders-status:${pair}:${orderId}`, (err, data) => {\n            err ? reject(err) : resolve(data);\n        });\n    });\n}\nconst status = await getOrderStatus(curorderid);\nif (status === \"NEW\") {\n    msg.payload.bot.tsl.state = 'pending_cancel_up';\n\n    node.send([{\n        payload: {\n\n            task: {\n                bot_id: msg.payload.bot.botname,\n                cmd: `sell_cancel_on_${msg.payload.bot.settings.exchange.toLowerCase()}`,\n                params: {\n                    orderId: curorderid\n                }\n            }\n        }\n    }]);\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 940,
        "wires": [
            [
                "2e9f14edfaba824a"
            ]
        ]
    },
    {
        "id": "486384c15ac2cbec",
        "type": "function",
        "z": "b9310c7ff0384fdb",
        "name": "сброс TSL и openpos",
        "func": "msg.payload.bot.tsl = { \"raschstopprice\": 0, \"curstop\": 0, \"curorderid\": 0, \"quantity\": 0, \"filledquantity\": 0, \"sold\": false, \"state\": \"0\", \"busy\": false }\nmsg.payload.bot.openpos = { \"quantity\": 0, \"buyed\": [] }\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1240,
        "wires": [
            [
                "fd5527b8effd7c86"
            ]
        ]
    },
    {
        "id": "59537e3a48525f0b",
        "type": "inject",
        "z": "b9310c7ff0384fdb",
        "g": "83701de4c94d991c",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 890,
        "y": 80,
        "wires": [
            [
                "5414653793a9dc88"
            ]
        ]
    },
    {
        "id": "5414653793a9dc88",
        "type": "redis-out",
        "z": "b9310c7ff0384fdb",
        "g": "83701de4c94d991c",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 890,
        "y": 120,
        "wires": []
    },
    {
        "id": "4f93a5d7b7a5c9c3",
        "type": "inject",
        "z": "b9310c7ff0384fdb",
        "g": "83701de4c94d991c",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 710,
        "y": 80,
        "wires": [
            [
                "ce8a7a692c3f6e2a"
            ]
        ]
    },
    {
        "id": "ce8a7a692c3f6e2a",
        "type": "redis-out",
        "z": "b9310c7ff0384fdb",
        "g": "83701de4c94d991c",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 710,
        "y": 120,
        "wires": []
    },
    {
        "id": "bd1f4ad645c66c64",
        "type": "inject",
        "z": "b9310c7ff0384fdb",
        "g": "83701de4c94d991c",
        "name": "check1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1130,
        "y": 80,
        "wires": [
            [
                "ecee2844604823d8"
            ]
        ]
    },
    {
        "id": "ecee2844604823d8",
        "type": "redis-out",
        "z": "b9310c7ff0384fdb",
        "g": "83701de4c94d991c",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "check1",
        "obj": false,
        "x": 1140,
        "y": 120,
        "wires": []
    },
    {
        "id": "bb17c377c91aaa32",
        "type": "inject",
        "z": "b9310c7ff0384fdb",
        "g": "83701de4c94d991c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "SOLUSDT-1742747929",
        "payloadType": "str",
        "x": 760,
        "y": 220,
        "wires": [
            [
                "83ec01ef3a96c722"
            ]
        ]
    },
    {
        "id": "83ec01ef3a96c722",
        "type": "redis-out",
        "z": "b9310c7ff0384fdb",
        "g": "83701de4c94d991c",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "reset",
        "obj": true,
        "x": 950,
        "y": 220,
        "wires": []
    },
    {
        "id": "2fef2cb707937aa1",
        "type": "comment",
        "z": "b9310c7ff0384fdb",
        "g": "35c2a239ec051eff",
        "name": "stop for debug",
        "info": "",
        "x": 1460,
        "y": 120,
        "wires": []
    },
    {
        "id": "4e7b8b9f31ecf663",
        "type": "inject",
        "z": "cfa22530d851bb95",
        "name": "Init Worker ",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "true",
        "payloadType": "str",
        "x": 150,
        "y": 60,
        "wires": [
            [
                "280d1e9d63583f2a"
            ]
        ]
    },
    {
        "id": "f6e61617db218bcd",
        "type": "redis-in",
        "z": "cfa22530d851bb95",
        "server": "a0efbb89.5e42d8",
        "command": "subscribe",
        "name": "job",
        "topic": "job",
        "obj": true,
        "timeout": 0,
        "x": 130,
        "y": 580,
        "wires": [
            [
                "b78e6be40ac49fcd"
            ]
        ]
    },
    {
        "id": "280d1e9d63583f2a",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "Worker : Init",
        "func": "// ==== Настройка ====\nlet redis = context.global.get('redis');\n\n// Используем context.flow для получения ID воркера, если он уже существует, иначе генерируем новый\nconst workerId = context.flow.get('workerId') || 'worker:' + RED.util.generateId();\ncontext.flow.set('workerId', workerId);\n\n// Регистрируем воркера\n(async () => await redis.set(workerId, 1))();\nnode.status({fill:\"green\",shape:\"dot\",text:\"Воркер запущен:\" + workerId});\n\nmsg.workerID = workerId;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "b78e6be40ac49fcd",
        "type": "switch",
        "z": "cfa22530d851bb95",
        "name": "workerId",
        "property": "payload.workerId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "workerId",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 140,
        "y": 640,
        "wires": [
            [
                "90cec57c5565d869"
            ]
        ]
    },
    {
        "id": "90cec57c5565d869",
        "type": "switch",
        "z": "cfa22530d851bb95",
        "name": "task.cmd",
        "property": "payload.task.cmd",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "changesettings",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "onoff",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "tsl_edit",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "check",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "regist_lead",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "buy_on_binance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cancel_on_binance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sell_on_binance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "msell_on_binance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sell_cancel_on_binance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cancel_for_msell_on_binance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "order_status_on_binance",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 12,
        "x": 320,
        "y": 700,
        "wires": [
            [
                "0371b9c9be8c28df"
            ],
            [
                "86817bdc1de2e230"
            ],
            [
                "83f68290b8ab76a2"
            ],
            [
                "79337c7d8ab09d11"
            ],
            [
                "8bc1c610f7ce01a1"
            ],
            [
                "e280f6b67fdbb311"
            ],
            [
                "4456d460db3dba39"
            ],
            [
                "d52c935722e1c24e"
            ],
            [
                "bc7ccefa60fdbc1b"
            ],
            [
                "ec8514696f8b938f"
            ],
            [
                "379238f98d1dce8a"
            ],
            [
                "b09866db43dbf521"
            ]
        ]
    },
    {
        "id": "86817bdc1de2e230",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "onoff",
        "func": "msg.payload.bot.onoff = !msg.payload.bot.onoff\n\nif (!msg.payload.bot.onoff) {\n    msg.payload.bot.status.rezhim=\"Остановлен\"\n}\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 400,
        "wires": [
            [
                "a054780b4e8c5098"
            ]
        ]
    },
    {
        "id": "83f68290b8ab76a2",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "tsl_edit",
        "func": "msg.payload.bot.tsl = msg.payload.task.tsl\nmsg.payload.bot.status = msg.payload.task.status\nmsg.payload.bot.onoff = msg.payload.task.onoff\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 480,
        "wires": [
            [
                "413e11c32b043f79"
            ]
        ]
    },
    {
        "id": "79337c7d8ab09d11",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "check ",
        "func": "const redis = context.global.get('redis');\nconst tilog = global.get('tilog');\nconst botname = msg.payload.bot.botname;\nconst enableLogging = true;\n\nfunction log(nodeName, logNumber, message, data = null) {\n    if (enableLogging && tilog) {\n        const text = data ? `${message}: ${JSON.stringify(data, null, 2)}` : message;\n        tilog(botname, `[${nodeName}] [${logNumber}] ${text}`);\n    }\n}\n\nfunction getCurrentPrice(key) {\n    return new Promise((resolve, reject) => {\n        redis.get(key, (err, data) => {\n            err ? reject(err) : resolve(data);\n        });\n    });\n}\n\nconst pair = msg.payload.bot.settings.pair;\nconst exchange = msg.payload.bot.settings.exchange;\n\nlet redisKey;\nif (exchange === \"TestB\") {\n    redisKey = 'testb:currentprice';\n    log('calc-raschstopprice', '1', `Using TestB exchange, fetching price from Redis key: ${redisKey}`);\n} else {\n    redisKey = `prices:${pair}`;\n    //  log('calc-raschstopprice', '2', `Using default exchange, fetching price from Redis key: ${redisKey}`);\n}\n\nlet currentprice = await getCurrentPrice(redisKey);\ncurrentprice = Number(currentprice);\n\n\nmsg.payload.bot.status.currentprice = currentprice;\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 840,
        "wires": [
            [
                "1c4354689098f730"
            ]
        ]
    },
    {
        "id": "8bc1c610f7ce01a1",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "регистрация сделки",
        "func": "let leads = global.get('leads') || [];\n\nlet node_time = new Date().getTime();\nlet date = new Date();\nlet endtime = date.toString().split('GMT')[0];\n\n\nfunction calculateProfitAndCommission(data) {\n    const buyed = data.openpos.buyed;\n    const sellInfo = data.tsl.resp;\n\n    // Рассчитываем общие затраты на покупку (включая комиссию)\n    let totalBuyCost = 0;\n    let totalBuyQuantity = 0;\n    let totalCommission = 0;\n\n    for (const buy of buyed) {\n        const [orderId, quantityStr, priceStr, commissionStr] = buy;\n        const quantity = parseFloat(quantityStr);\n        const price = parseFloat(priceStr);\n        const commission = parseFloat(commissionStr);\n\n        totalBuyCost += quantity * price;\n        totalBuyQuantity += quantity;\n        totalCommission += commission;\n    }\n\n    // Получаем данные о продаже\n    const sellQuantity = parseFloat(sellInfo.executedQty);\n    const sellPrice = parseFloat(sellInfo.price);\n    const sellAmount = parseFloat(sellInfo.cummulativeQuoteQty);\n\n    // Проверяем, что количество купленного и проданного совпадает\n    if (Math.abs(totalBuyQuantity - sellQuantity) > 0.0001) {\n        console.warn(`Количество купленного (${totalBuyQuantity}) и проданного (${sellQuantity}) не совпадает!`);\n    }\n\n    // Рассчитываем прибыль\n    const profit = sellAmount - totalBuyCost;\n\n    // Комиссия при продаже (Binance берет комиссию с суммы сделки)\n    const sellCommission = sellAmount * 0.001; // предполагаемая комиссия 0.1%\n    totalCommission += sellCommission;\n\n    return {\n        profit: profit,\n        totalCommission: totalCommission,\n        netProfit: profit - totalCommission,\n        buyCost: totalBuyCost,\n        sellAmount: sellAmount,\n        buyQuantity: totalBuyQuantity,\n        sellQuantity: sellQuantity,\n        averageBuyPrice: totalBuyCost / totalBuyQuantity,\n        sellPrice: sellPrice\n    };\n}\n\n// Функция для форматирования времени\nfunction formatTime(timestamp) {\n    let date = new Date(timestamp);\n    return date.toString().split('GMT')[0];\n}\n\n// Функция для вычисления временного интервала\nfunction timeDistance(date1, date2) {\n    let distance = Math.abs(date1 - date2);\n    const hours = Math.floor(distance / 3600000);\n    distance -= hours * 3600000;\n    const minutes = Math.floor(distance / 60000);\n    distance -= minutes * 60000;\n    const seconds = Math.floor(distance / 1000);\n    return `${hours}:${('0' + minutes).slice(-2)}:${('0' + seconds).slice(-2)}`;\n}\n\n// Функция для логирования\nfunction log(nodeName, logNumber, message, data = null) {\n    if (enableLogging && tilog) {\n        if (data) {\n            tilog(botname, `[${nodeName}] [${logNumber}] ${message}: ${JSON.stringify(data, null, 2)}`);\n        } else {\n            tilog(botname, `[${nodeName}] [${logNumber}] ${message}`);\n        }\n    }\n}\n\nconst botname = msg.payload.bot.botname;\nconst tilog = global.get('tilog');\nconst enableLogging = true;\n\nconst calcResult = calculateProfitAndCommission(msg.payload.bot);\n\n// Формируем отчет в виде строки для телеграма\nconst result = `\n📊 Отчет о сделке: ${botname}\n\n🛒 Покупка:\n- Средняя цена покупки: ${calcResult.averageBuyPrice.toFixed(8)}\n- Общее количество: ${calcResult.buyQuantity.toFixed(8)}\n- Общая стоимость: ${calcResult.buyCost.toFixed(8)}\n\n💰 Продажа:\n- Цена продажи: ${calcResult.sellPrice.toFixed(8)}\n- Количество: ${calcResult.sellQuantity.toFixed(8)}\n- Сумма продажи: ${calcResult.sellAmount.toFixed(8)}\n\n💵 Финансовый результат:\n- Прибыль: ${calcResult.profit.toFixed(8)}\n- Комиссии: ${calcResult.totalCommission.toFixed(8)}\n- Чистая прибыль: ${calcResult.netProfit.toFixed(8)}\n\n⏱ Время завершения: ${endtime}\n`;\n\nnode.send([null, {payload: result, originalData: calcResult}]);\n\nlog('registration', 3, \"complete\");\nnode.status({ fill: \"green\", shape: \"dot\" });\nnode.warn(\"Регистрация сделки\");\n\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1240,
        "wires": [
            [
                "081a7380474d8486"
            ],
            [
                "9e707a93ba39aa6a"
            ]
        ]
    },
    {
        "id": "e280f6b67fdbb311",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "buy_on_binance",
        "func": "const binance = global.get('binance');\nconst tilog = global.get('tilog'); // Логирование\nconst botname = msg.payload.bot.botname;\n\n// Переменная для управления логированием\nconst enableLogging = true; // true - логирование включено, false - выключено\n\n// Функция для логирования\nfunction log(message, data = null) {\n    let nodeName = node.name;\n    let botname = msg.payload.bot.botname;\n    if (enableLogging && tilog) {\n        if (data) {\n            tilog(botname, `[${nodeName}] ${message}: ${JSON.stringify(data, null, 2)}`);\n        } else {\n            tilog(botname, `[${nodeName}] ${message}`);\n        }\n    }\n}\n\n// Функция для парсинга ошибок API\nfunction parseApiError(error) {\n    if (error.body) {\n        try {\n            const resp = JSON.parse(error.body);\n            return resp.msg;\n        } catch (e) {\n            // pass thru\n        }\n    }\n    return `Unknown error. Status code: ${error.statusCode}`;\n}\n\n// Промисификация функции binance.buy\nasync function buyBinanceOrder(pair, quantity, price) {\n    return new Promise((resolve, reject) => {\n        binance.buy(pair, quantity, price, { type: 'LIMIT' }, (err, resp) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(resp);\n            }\n        });\n    });\n}\n\n// Функция для обработки ошибок\nfunction handleError(msg, err) {\n    const errorMsg = parseApiError(err);\n    log(`Ошибка при покупке: ${errorMsg}`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = `Остановлен в результате ошибки ${errorMsg}`;\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    msg.err = err;\n    node.send([msg, null]);\n}\n\n// Функция для обработки успешного выполнения\nfunction handleSuccess(msg, resp, floor, quantity) {\n    log(`Ордер успешно размещен: orderId=${resp.orderId}, status=${resp.status}`);\n\n    floor.status = \"set_buy\"; // Обновлено состояние\n    floor.buyId = resp.orderId;\n    floor.buyDate = new Date().getTime();\n    floor.buyStatus = resp.status;\n    floor.vol = quantity;\n    msg.payload.bot.floors[msg.payload.task.floor.floorNumber] = floor;\n\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"green\", shape: \"dot\" });\n    msg.resp = resp;\n    node.send([msg, msg]);\n}\n\n// Функция для обработки таймаута\nfunction handleTimeout(msg) {\n    log(`Таймаут при размещении ордера`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = \"Остановлен в результате таймаута\";\n    msg.payload.bot.status.updated = new Date().getTime();\n\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    node.send([msg, null]);\n}\n\nconst floor = msg.payload.task.floor;\nconst quantity = Number((Number(msg.payload.bot.finance.depo) * Number(msg.payload.bot.settings.ordersize) / 100 / Number(msg.payload.bot.status.currentprice)).toFixed(msg.payload.bot.settings.digitq));\nconst pair = msg.payload.bot.settings.pair;\nconst price = floor.initBuyPrice;\n\nlog(`Начало размещения ордера: pair=${pair}, quantity=${quantity}, price=${price}`);\n\nconst TIMEOUT = 2000;\n\nconst timeout = setTimeout(() => {\n    handleTimeout(msg);\n}, TIMEOUT);\n\n// Используем серверное время для размещения ордера\nbinance.useServerTime(async () => {\n    try {\n        const resp = await buyBinanceOrder(pair, quantity, price);\n        if (resp && resp.code) {\n            log(`Ошибка: ${resp.msg}`);\n            handleError(msg, { body: JSON.stringify({ msg: resp.msg, floor: floor }) });\n        } else {\n\n            clearTimeout(timeout);\n            handleSuccess(msg, resp, floor, quantity);\n        }\n    } catch (err) {\n        clearTimeout(timeout);\n        handleError(msg, err);\n    }\n});\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1320,
        "wires": [
            [
                "679eef77781c38a5"
            ],
            [
                "4917a1fc6fec42d7"
            ]
        ]
    },
    {
        "id": "4456d460db3dba39",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": " cancel_on_binance",
        "func": "const binance = global.get('binance');\nconst tilog = global.get('tilog'); // Логирование\nconst botname = msg.payload.bot.botname;\n\n// Переменная для управления логированием\nconst enableLogging = true; // true - логирование включено, false - выключено\n\n// Функция для логирования\nfunction log(message, data = null) {\n    let nodeName = node.name;\n    let botname = msg.payload.bot.botname;\n    if (enableLogging && tilog) {\n        if (data) {\n            tilog(botname, `[${nodeName}] ${message}: ${JSON.stringify(data, null, 2)}`);\n        } else {\n            tilog(botname, `[${nodeName}] ${message}`);\n        }\n    }\n}\n\n// Функция для парсинга ошибок API\nfunction parseApiError(error) {\n    if (error.body) {\n        try {\n            const resp = JSON.parse(error.body);\n            return resp.msg;\n        } catch (e) {\n            // pass thru\n        }\n    }\n    return `Unknown error. Status code: ${error.statusCode}`;\n}\n\n// Промисификация функции binance.buy\n\nasync function cancelBinanceOrder(pair, orderId) {\n    return new Promise((resolve, reject) => {\n        binance.cancel(pair, orderId, (err, resp) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(resp);\n            }\n        });\n    });\n}\n\n// Функция для обработки ошибок\nfunction handleError(msg, err) {\n    const errorMsg = parseApiError(err);\n    log(`Ошибка : ${errorMsg}`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = `Остановлен в результате ошибки ${errorMsg}`;\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    msg.err = err;\n    node.send([msg, null]);\n}\n\n// Функция для обработки таймаута\nfunction handleTimeout(msg) {\n    log(`Остановлен в результате таймаута`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = \"Остановлен в результате таймаута\";\n    msg.payload.bot.status.updated = new Date().getTime();\n\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    node.send([msg, null]);\n}\n\nconst floor = msg.payload.task.floor;\nconst pair = msg.payload.bot.settings.pair;\nconst TIMEOUT = 2000;\n\nconst timeout = setTimeout(() => {\n    handleTimeout(msg);\n}, TIMEOUT);\n\n// Используем серверное время для размещения ордера\nbinance.useServerTime(async () => {\n    try {\n        const resp = await cancelBinanceOrder(pair, floor.buyId);\n        clearTimeout(timeout);\n\n        if (resp && resp.code) {\n            log(5, `Ошибка при отмене ордера: ${resp.msg}`);\n            handleError(msg, { body: JSON.stringify({ msg: resp.msg, floor: floor }) });\n        } else {\n            log(6, `Ордер успешно отменен`);\n            floor.buyStatus = \"CANCELED\";\n            floor.status = \"0\";\n            msg.payload.bot.floors[floor.floorNumber] = floor; // Обновляем объект бота\n\n            msg.payload.bot.status.updated = new Date().getTime();\n            msg.topic = \"fjob\";\n            node.status({ fill: \"green\", shape: \"dot\" });\n            node.send([msg, msg]);\n        }\n    } catch (err) {\n        clearTimeout(timeout);\n        handleError(msg, err);\n    }\n});\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1420,
        "wires": [
            [
                "0e2531780c341180"
            ],
            [
                "b02fb414d15a8c11"
            ]
        ]
    },
    {
        "id": "d52c935722e1c24e",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": " sell_on_binance",
        "func": "const binance = global.get('binance');\nconst tilog = global.get('tilog'); // Логирование\nconst botname = msg.payload.bot.botname;\n\n// Переменная для управления логированием\nconst enableLogging = true; // true - логирование включено, false - выключено\n\n// Функция для логирования\nfunction log(message, data = null) {\n    let nodeName = node.name;\n    let botname = msg.payload.bot.botname;\n    if (enableLogging && tilog) {\n        if (data) {\n            tilog(botname, `[${nodeName}] ${message}: ${JSON.stringify(data, null, 2)}`);\n        } else {\n            tilog(botname, `[${nodeName}] ${message}`);\n        }\n    }\n}\n\n// Функция для парсинга ошибок API\nfunction parseApiError(error) {\n    if (error.body) {\n        try {\n            const resp = JSON.parse(error.body);\n            return resp.msg;\n        } catch (e) {\n            // pass thru\n        }\n    }\n    return `Unknown error. Status code: ${error.statusCode}`;\n}\n\nasync function sellBinanceOrder(pair, quantity, price, stopPrice) {\n    return new Promise((resolve, reject) => {\n        binance.sell(pair, quantity, price, {\n            stopPrice,\n            type: \"STOP_LOSS_LIMIT\"\n        }, (err, resp) => {\n            if (err) {\n                log(`Ошибка при размещении sell ордера: ${JSON.stringify(err)}`);\n                reject(err);\n            } else {\n                log(`Sell ордер успешно размещен: ${JSON.stringify(resp)}`);\n                resolve(resp);\n            }\n        });\n    });\n}\n\n// Функция для обработки ошибок\nfunction handleError(msg, err) {\n    const errorMsg = parseApiError(err);\n    log(`Ошибка : ${errorMsg}`);\n    node.warn(errorMsg);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = `Остановлен в результате ошибки ${errorMsg}`;\n\n    node.status({ fill: \"red\", shape: \"ring\" });\n    msg.err = err;\n    node.send([msg, msg]);\n}\n\n// Функция для обработки успешного выполнения\nfunction handleSuccess(msg) {\n    log(`Успешно`);\n    // Обновляем состояние\n    msg.payload.bot.tsl = {\n        ...msg.payload.bot.tsl,\n        curorderid: msg.payload.bot.tsl.curorderid,\n        curstop: msg.payload.bot.tsl.curstop,\n        curprice: msg.payload.bot.tsl.curprice,\n        curquantity: msg.payload.bot.tsl.curquantity,\n        state: 'set_sell'\n    };\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send([msg, msg]);\n}\n\n// Используем серверное время для размещения ордера\nbinance.useServerTime(async () => {\n    try {\n        const { pair, price, stopprice, quantity } = msg.payload.task.params;\n        const resp = await sellBinanceOrder(pair, quantity, price, stopprice);\n\n        if (resp && resp.code) {\n            log(`Ошибка: ${resp.msg}`);\n            handleError(msg, { body: JSON.stringify({ msg: resp.msg }) });\n        } else {\n            // Обновление состояния бота\n            msg.payload.bot.tsl = {\n                ...msg.payload.bot.tsl,\n                curorderid: resp.orderId,\n                curstop: stopprice,\n                curprice: price,\n                curquantity: quantity,\n                state: 'set_sell'\n            };\n            handleSuccess(msg);\n        }\n    } catch (err) {\n        handleError(msg, err);\n    }\n});",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1540,
        "wires": [
            [
                "6af9770e2d692aa3"
            ],
            [
                "b87e2337c0680e0b"
            ]
        ]
    },
    {
        "id": "bc7ccefa60fdbc1b",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": " msell_on_binance",
        "func": "const binance = global.get('binance');\nconst tilog = global.get('tilog'); // Логирование\nconst botname = msg.payload.bot.botname;\n\n// Переменная для управления логированием\nconst enableLogging = true; // true - логирование включено, false - выключено\n\n// Функция для логирования\nfunction log(message, data = null) {\n    let nodeName = node.name;\n    let botname = msg.payload.bot.botname;\n    if (enableLogging && tilog) {\n        if (data) {\n            tilog(botname, `[${nodeName}] ${message}: ${JSON.stringify(data, null, 2)}`);\n        } else {\n            tilog(botname, `[${nodeName}] ${message}`);\n        }\n    }\n}\n\n// Функция для парсинга ошибок API\nfunction parseApiError(error) {\n    if (error.body) {\n        try {\n            const resp = JSON.parse(error.body);\n            return resp.msg;\n        } catch (e) {\n            // pass thru\n        }\n    }\n    return `Unknown error. Status code: ${error.statusCode}`;\n}\n\nasync function marketSellBinanceOrder(pair, quantity) {\n    return new Promise((resolve, reject) => {\n        binance.marketSell(pair, quantity, (err, resp) => {\n            if (err) {\n                log(2, `Ошибка при размещении market sell ордера: ${JSON.stringify(err)}`);\n                reject(err);\n            } else {\n                log(3, `Market sell ордер успешно размещен: ${JSON.stringify(resp)}`);\n                resolve(resp);\n            }\n        });\n    });\n}\n\n// Функция для обработки ошибок\nfunction handleError(msg, err) {\n    const errorMsg = parseApiError(err);\n    log(`Ошибка : ${errorMsg}`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = `Остановлен в результате ошибки ${errorMsg}`;\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    msg.err = err;\n    node.send([msg, null]);\n}\n\n// Функция для обработки успешного выполнения\nfunction handleSuccess(msg) {\n    log(`Успешно`);\n    //обновляем состояние\n\n    ///\n\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send([msg, msg]);\n}\n\n// Функция для обработки таймаута\nfunction handleTimeout(msg) {\n    log(`Остановлен в результате таймаута`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = \"Остановлен в результате таймаута\";\n    msg.payload.bot.status.updated = new Date().getTime();\n\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    node.send([msg, null]);\n}\n\n\nconst TIMEOUT = 2000;\n\nconst timeout = setTimeout(() => {\n    handleTimeout(msg);\n}, TIMEOUT);\n\n\nconst { pair } = msg.payload.bot.settings;\nconst quantity = msg.payload.bot.tsl.quantity_for_msell;\n\n// Используем серверное время для размещения ордера\nbinance.useServerTime(async () => {\n    try {\n        const resp = await marketSellBinanceOrder(pair, quantity);\n        clearTimeout(timeout);\n\n        // Обновление состояния бота\n        msg.payload.bot.tsl = {\n            ...msg.payload.bot.tsl,\n            curorderid: resp.orderId,\n            msellresp: resp,\n            state: 'sold'\n        };\n\n\n        handleSuccess(msg);\n    } catch (err) {\n        clearTimeout(timeout);\n        handleError(msg, err);\n    }\n});\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1640,
        "wires": [
            [
                "551112655314b92d"
            ],
            [
                "e091ec3382a28c42"
            ]
        ]
    },
    {
        "id": "ec8514696f8b938f",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": " sell_cancel_on_binance",
        "func": "const binance = global.get('binance');\nconst redis = context.global.get('redis');\nconst tilog = global.get('tilog'); // Логирование\nconst botname = msg.payload.bot.botname;\n\n// Переменная для управления логированием\nconst enableLogging = true; // true - логирование включено, false - выключено\n\n// Функция для логирования\nfunction log(message, data = null) {\n    let nodeName = node.name;\n    let botname = msg.payload.bot.botname;\n    if (enableLogging && tilog) {\n        if (data) {\n            tilog(botname, `[${nodeName}] ${message}: ${JSON.stringify(data, null, 2)}`);\n        } else {\n            tilog(botname, `[${nodeName}] ${message}`);\n        }\n    }\n}\n\n// Функция для парсинга ошибок API\nfunction parseApiError(error) {\n    if (error.body) {\n        try {\n            const resp = JSON.parse(error.body);\n            return resp.msg;\n        } catch (e) {\n            // pass thru\n        }\n    }\n    return `Unknown error. Status code: ${error.statusCode}`;\n}\n\n\n\nasync function cancelBinanceOrder(pair, orderId) {\n    return new Promise((resolve, reject) => {\n        binance.cancel(pair, orderId, (err, resp) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(resp);\n            }\n        });\n    });\n}\n\n// Функция для обработки ошибок\nfunction handleError(msg, err) {\n    const errorMsg = parseApiError(err);\n    log(`Ошибка : ${errorMsg}`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = `Остановлен в результате ошибки ${errorMsg}`;\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    msg.err = err;\n    node.send([msg, null]);\n}\n\n// Функция для обработки успешного выполнения\nfunction handleSuccess(msg) {\n    log(`Успешно`);\n    //обновляем состояние\n\n    ///\n\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send([msg, msg]);\n}\n\n// Функция для обработки таймаута\nfunction handleTimeout(msg) {\n    log(`Остановлен в результате таймаута`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = \"Остановлен в результате таймаута\";\n    msg.payload.bot.status.updated = new Date().getTime();\n\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    node.send([msg, null]);\n}\n\n\nconst TIMEOUT = 2000;\n\nconst timeout = setTimeout(() => {\n    handleTimeout(msg);\n}, TIMEOUT);\n\nconst { pair } = msg.payload.bot.settings;\nconst orderId = msg.payload.bot.tsl?.curorderid;\n\n// Используем серверное время для размещения ордера\nbinance.useServerTime(async () => {\n    try {\n        const resp = await cancelBinanceOrder(pair, orderId);\n        clearTimeout(timeout);\n        if (resp && resp.code) {\n            log(`Ошибка: ${resp.msg}`);\n            handleError(msg, { body: JSON.stringify({ msg: resp.msg }) });\n        } else {\n            // Обновление состояния\n            msg.payload.bot.tsl = {\n                \n                curorderid: null,\n                curstop: 0,\n                curprice: 0,\n                curquantity: 0,\n                state: '0',\n                orderstatus: null\n            };\n            clearTimeout(timeout);\n            redis.set(`orders-status:${pair}:${orderId}`, 'CANCELED');\n            handleSuccess(msg);\n        }\n    } catch (err) {\n        clearTimeout(timeout);\n        handleError(msg, err);\n    }\n});\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1740,
        "wires": [
            [
                "4df69e5c81c3fa87"
            ],
            [
                "482dd15f4fc7cb3b"
            ]
        ]
    },
    {
        "id": "379238f98d1dce8a",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": " cancel_for_msell_on_binance",
        "func": "const binance = global.get('binance');\nconst tilog = global.get('tilog'); // Логирование\nconst botname = msg.payload.bot.botname;\n\n// Переменная для управления логированием\nconst enableLogging = true; // true - логирование включено, false - выключено\n\n// Функция для логирования\nfunction log(message, data = null) {\n    let nodeName = node.name;\n    let botname = msg.payload.bot.botname;\n    if (enableLogging && tilog) {\n        if (data) {\n            tilog(botname, `[${nodeName}] ${message}: ${JSON.stringify(data, null, 2)}`);\n        } else {\n            tilog(botname, `[${nodeName}] ${message}`);\n        }\n    }\n}\n\n// Функция для парсинга ошибок API\nfunction parseApiError(error) {\n    if (error.body) {\n        try {\n            const resp = JSON.parse(error.body);\n            return resp.msg;\n        } catch (e) {\n            // pass thru\n        }\n    }\n    return `Unknown error. Status code: ${error.statusCode}`;\n}\n\n\n\nasync function cancelBinanceOrder(pair, orderId) {\n    return new Promise((resolve, reject) => {\n        binance.cancel(pair, orderId, (err, resp) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(resp);\n            }\n        });\n    });\n}\n\n// Функция для обработки ошибок\nfunction handleError(msg, err) {\n    const errorMsg = parseApiError(err);\n    log(`Ошибка : ${errorMsg}`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = `Остановлен в результате ошибки ${errorMsg}`;\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    msg.err = err;\n    node.send([msg, null]);\n}\n\n// Функция для обработки успешного выполнения\nfunction handleSuccess(msg) {\n    log(`Успешно`);\n    //обновляем состояние\n\n    ///\n\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send([msg, msg]);\n}\n\n// Функция для обработки таймаута\nfunction handleTimeout(msg) {\n    log(`Остановлен в результате таймаута`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = \"Остановлен в результате таймаута\";\n    msg.payload.bot.status.updated = new Date().getTime();\n\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    node.send([msg, null]);\n}\n\n\nconst TIMEOUT = 2000;\n\nconst timeout = setTimeout(() => {\n    handleTimeout(msg);\n}, TIMEOUT);\n\n// Используем серверное время для размещения ордера\nbinance.useServerTime(async () => {\n    try {\n        const resp = await cancelBinanceOrder(msg.payload.bot.settings.pair, msg.payload.bot.tsl.curorderid)\n        clearTimeout(timeout);\n        if (resp && resp.code) {\n            log(`Ошибка: ${resp.msg}`);\n            handleError(msg, { body: JSON.stringify({ msg: resp.msg }) });\n        } else {\n            // Обновление состояния\n       \n        \n        msg.payload.bot.tsl = {\n            ...msg.payload.bot.tsl,\n            curorderid: null,\n            curstop: 0,\n            curprice: 0,\n            curquantity: 0,\n            state: 'canceled_for_msell'\n        };\n            clearTimeout(timeout);\n            handleSuccess(msg);\n        }\n    } catch (err) {\n        clearTimeout(timeout);\n        handleError(msg, err);\n    }\n});\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1840,
        "wires": [
            [
                "4fd3da1d5c49f8ce"
            ],
            [
                "113e9adda39fe872"
            ]
        ]
    },
    {
        "id": "b09866db43dbf521",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": " order_status_on_binance",
        "func": "const binance = global.get('binance');\nconst tilog = global.get('tilog'); // Логирование\nconst botname = msg.payload.bot.botname;\n\n// Переменная для управления логированием\nconst enableLogging = true; // true - логирование включено, false - выключено\n\n// Функция для логирования\nfunction log(message, data = null) {\n    let nodeName = node.name;\n    let botname = msg.payload.bot.botname;\n    if (enableLogging && tilog) {\n        if (data) {\n            tilog(botname, `[${nodeName}] ${message}: ${JSON.stringify(data, null, 2)}`);\n        } else {\n            tilog(botname, `[${nodeName}] ${message}`);\n        }\n    }\n}\n\n// Функция для парсинга ошибок API\nfunction parseApiError(error) {\n    if (error.body) {\n        try {\n            const resp = JSON.parse(error.body);\n            return resp.msg;\n        } catch (e) {\n            // pass thru\n        }\n    }\n    return `Unknown error. Status code: ${error.statusCode}`;\n}\n\n// Промисификация функции binance.orderStatus\nasync function orderStatus(msg) {\n    return new Promise((resolve, reject) => {\n        binance.orderStatus(msg.payload.bot.settings.pair, undefined, (error, resp, symbol) => {\n            if (error) {\n                reject(error);\n            } else {\n                resolve(resp);\n            }\n        }, { orderId: msg.payload.bot.tsl.curorderid });\n\n\n\n\n\n    });\n}\n\n// Функция для обработки ошибок\nfunction handleError(msg, err) {\n    const errorMsg = parseApiError(err);\n    log(`Ошибка : ${errorMsg}`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = `Остановлен в результате ошибки ${errorMsg}`;\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    msg.err = err;\n    node.send([msg, null]);\n}\n\n// Функция для обработки успешного выполнения\nfunction handleSuccess(msg) {\n    log(`Успешно`);\n    //обновляем состояние\n\n    ///\n\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send([msg, msg]);\n}\n\n// Функция для обработки таймаута\nfunction handleTimeout(msg) {\n    log(`Остановлен в результате таймаута`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = \"Остановлен в результате таймаута\";\n    msg.payload.bot.status.updated = new Date().getTime();\n\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    node.send([msg, null]);\n}\n\n\nconst TIMEOUT = 2000;\n\nconst timeout = setTimeout(() => {\n    handleTimeout(msg);\n}, TIMEOUT);\n\n// Используем серверное время для размещения ордера\nbinance.useServerTime(async () => {\n    try {\n        const resp = await orderStatus(msg);\n\n        msg.payload.bot.tsl = {\n            ...msg.payload.bot.tsl,\n            resp: resp,\n            state: \"order_status\"\n        };\n\n        clearTimeout(timeout);\n        handleSuccess(msg);\n    } catch (err) {\n        clearTimeout(timeout);\n        handleError(msg, err);\n    }\n});\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1960,
        "wires": [
            [
                "3271b3e88dfb2d6d"
            ],
            [
                "a840f35efb55517c"
            ]
        ]
    },
    {
        "id": "aa67dd386ff15506",
        "type": "switch",
        "z": "cfa22530d851bb95",
        "name": "openpos.quantity > 0",
        "property": "msg.payload.bot.openpos.quantity",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 980,
        "y": 840,
        "wires": [
            [
                "60e231d1643749c5"
            ],
            [
                "93391cf49d9113b2"
            ]
        ]
    },
    {
        "id": "4917a1fc6fec42d7",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "floor_edit",
        "func": "msg.payload  = {\n\n    task: {\n        bot_id: msg.payload.bot.botname,\n        cmd: \"floor_edit\",\n        floor: msg.payload.bot.floors[msg.payload.task.floor.floorNumber]\n\n    }\n}\nmsg.topic = \"new_tasks \"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1360,
        "wires": [
            [
                "3cfb310bb63646f3"
            ]
        ]
    },
    {
        "id": "b02fb414d15a8c11",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "floor_edit",
        "func": "msg.payload  = {\n\n    task: {\n        bot_id: msg.payload.bot.botname,\n        cmd: \"floor_edit\",\n        floor: msg.payload.bot.floors[msg.payload.task.floor.floorNumber]\n\n    }\n}\nmsg.topic = \"new_tasks\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1460,
        "wires": [
            [
                "f29466ab8c64f4e2"
            ]
        ]
    },
    {
        "id": "b87e2337c0680e0b",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "tsl_edit",
        "func": "msg.payload  = {\n\n    task: {\n        bot_id: msg.payload.bot.botname,\n        cmd: \"tsl_edit\",\n        tsl: msg.payload.bot.tsl,\n        status: msg.payload.bot.status,\n        onoff: msg.payload.bot.onoff\n\n    }\n}\nmsg.topic = \"new_tasks\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1580,
        "wires": [
            [
                "1b30ee1de0aed232"
            ]
        ]
    },
    {
        "id": "e091ec3382a28c42",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "tsl_edit",
        "func": "msg.payload  = {\n\n    task: {\n        bot_id: msg.payload.bot.botname,\n        cmd: \"tsl_edit\",\n        tsl: msg.payload.bot.tsl,\n        status: msg.payload.bot.status,\n        onoff: msg.payload.bot.onoff\n\n    }\n}\nmsg.topic = \"new_tasks\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1680,
        "wires": [
            [
                "94c25c8eb4035535"
            ]
        ]
    },
    {
        "id": "482dd15f4fc7cb3b",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "tsl_edit",
        "func": "msg.payload  = {\n\n    task: {\n        bot_id: msg.payload.bot.botname,\n        cmd: \"tsl_edit\",\n        tsl: msg.payload.bot.tsl,\n        status: msg.payload.bot.status,\n        onoff: msg.payload.bot.onoff\n\n    }\n}\nmsg.topic = \"new_tasks\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1780,
        "wires": [
            [
                "d3596fa74b5040b0"
            ]
        ]
    },
    {
        "id": "113e9adda39fe872",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "tsl_edit",
        "func": "msg.payload  = {\n\n    task: {\n        bot_id: msg.payload.bot.botname,\n        cmd: \"tsl_edit\",\n        tsl: msg.payload.bot.tsl,\n        status: msg.payload.bot.status,\n        onoff: msg.payload.bot.onoff\n\n    }\n}\nmsg.topic = \"new_tasks\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1880,
        "wires": [
            [
                "b540fedcbf6f1524"
            ]
        ]
    },
    {
        "id": "a840f35efb55517c",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "tsl_edit",
        "func": "msg.payload  = {\n\n    task: {\n        bot_id: msg.payload.bot.botname,\n        cmd: \"tsl_edit\",\n        tsl: msg.payload.bot.tsl,\n        status: msg.payload.bot.status,\n        onoff: msg.payload.bot.onoff\n\n    }\n}\nmsg.topic = \"new_tasks\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 2000,
        "wires": [
            [
                "5f2785e712d88264"
            ]
        ]
    },
    {
        "id": "60e231d1643749c5",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "calc raschstopprice",
        "func": "const redis = context.global.get('redis');\nconst tilog = global.get('tilog');\nconst botname = msg.payload.bot.botname;\nconst enableLogging = true;\n\nfunction log(nodeName, logNumber, message, data = null) {\n    if (enableLogging && tilog) {\n        const text = data ? `${message}: ${JSON.stringify(data, null, 2)}` : message;\n        tilog(botname, `[${nodeName}] [${logNumber}] ${text}`);\n    }\n}\n\nconst pair = msg.payload.bot.settings.pair;\nconst offsettop = Number(msg.payload.bot.settings.offsettop);\nconst digitprice = Number(msg.payload.bot.settings.digitprice);\n\nlet currentprice = Number(msg.payload.bot.status.currentprice);\n\nmsg.payload.bot.status.currentprice = currentprice;\nmsg.payload.bot.tsl.raschstopprice = Number((currentprice * (1 - offsettop / 100)).toFixed(digitprice));\n//log('calc-raschstopprice', '4', `Calculated raschstopprice: ${msg.payload.bot.tsl.raschstopprice}`);\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 840,
        "wires": [
            [
                "fc7e2a8a79f580b7"
            ]
        ]
    },
    {
        "id": "93391cf49d9113b2",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "bypass1",
        "func": "\nmsg.payload.bot.status.rezhim = \"Ожидание покупки\"\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 920,
        "wires": [
            [
                "ef132b1b8cca2b52"
            ]
        ]
    },
    {
        "id": "fc7e2a8a79f580b7",
        "type": "switch",
        "z": "cfa22530d851bb95",
        "name": "tsl.state",
        "property": "payload.bot.tsl.state",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "set_sell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "order_status",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "canceled_for_msell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sold",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pending_order_status",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pending_cancel_for_msell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pending_sell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pending_cancel_up",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pending_msell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pending_for_regist",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 12,
        "x": 1400,
        "y": 840,
        "wires": [
            [
                "4e5c88f4416748a7"
            ],
            [
                "1f618f0419f958a9"
            ],
            [
                "215b83f2f6132ae6"
            ],
            [
                "dc204349401d7432"
            ],
            [
                "4ed31955c8caf457"
            ],
            [
                "39aba6d27f9557a7"
            ],
            [
                "39aba6d27f9557a7"
            ],
            [
                "39aba6d27f9557a7"
            ],
            [
                "39aba6d27f9557a7"
            ],
            [
                "39aba6d27f9557a7"
            ],
            [
                "39aba6d27f9557a7"
            ],
            [
                "39aba6d27f9557a7"
            ]
        ]
    },
    {
        "id": "ef132b1b8cca2b52",
        "type": "link out",
        "z": "cfa22530d851bb95",
        "name": "link out 24",
        "mode": "link",
        "links": [
            "f0fd6d983a7f20ea"
        ],
        "x": 1285,
        "y": 920,
        "wires": []
    },
    {
        "id": "4e5c88f4416748a7",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "sell_on_binance",
        "func": "const tilog = global.get('tilog');\nconst botname = msg.payload.bot.botname;\nconst enableLogging = true;\n\nfunction log(nodeName, logNumber, message, data = null) {\n    if (enableLogging && tilog) {\n        const text = data ? `${message}: ${JSON.stringify(data, null, 2)}` : message;\n        tilog(botname, `[${nodeName}] [${logNumber}] ${text}`);\n    }\n}\n\nconst pair = msg.payload.bot.settings.pair;\nconst offsettop = Number(msg.payload.bot.settings.offsettop);\nconst digitprice = Number(msg.payload.bot.settings.digitprice);\nlet raschstopprice = msg.payload.bot.tsl.raschstopprice;\nconst offsetbottom = Number(msg.payload.bot.settings.offsetbottom);\n\n\nconst price = Number((raschstopprice * (1 - offsetbottom / 100)).toFixed(digitprice));\nconst stopprice = Number(raschstopprice.toFixed(digitprice));\nconst quantity = msg.payload.bot.openpos.quantity;\n\nnode.log(`Рассчитанная цена: ${price}, стоп-цена: ${stopprice}, количество: ${quantity}`);\n\nmsg.payload.bot.status.rezhim = `Размещен ордер - цена: ${price}, стоп-цена: ${stopprice}, количество: ${quantity}`;\nmsg.payload.bot.tsl.state = 'pending_sell';\nmsg.payload.bot.tsl.curstop = stopprice;\n\n\nnode.send([null, {\n    payload: {\n\n        task: {\n            bot_id: msg.payload.bot.botname,\n            cmd: `sell_on_${msg.payload.bot.settings.exchange.toLowerCase()}`,\n            params: {\n                pair,\n                quantity,\n                price,\n                stopprice\n            }\n        }\n    }\n}]);\n\nnode.log(`Отправлена команда на продажу с параметрами: ${JSON.stringify({ pair, quantity, price, stopprice })}`);\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 580,
        "wires": [
            [
                "ba82ef3f8597453f"
            ],
            [
                "f36fc2b9ab3840c3"
            ]
        ]
    },
    {
        "id": "1f618f0419f958a9",
        "type": "switch",
        "z": "cfa22530d851bb95",
        "name": "raschstopprice > curstop",
        "property": "payload.bot.tsl.raschstopprice",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "payload.bot.tsl.curstop",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1690,
        "y": 680,
        "wires": [
            [
                "1f501933682d08ce"
            ],
            [
                "2d4a138119064683"
            ]
        ]
    },
    {
        "id": "215b83f2f6132ae6",
        "type": "switch",
        "z": "cfa22530d851bb95",
        "name": "resp.status",
        "property": "payload.bot.tsl.resp.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1650,
        "y": 820,
        "wires": [
            [
                "c265d6a05bdae8f2"
            ],
            [
                "2b4ba10a8377bfc0"
            ]
        ]
    },
    {
        "id": "dc204349401d7432",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "msell",
        "func": "const pair = msg.payload.bot.settings.pair;\nconst quantity = msg.payload.bot.tsl.quantity_for_msell\n\n\nmsg.payload.bot.tsl.state = 'pending_msell';\n\n\nnode.send([null, {\n    payload: {\n\n        task: {\n            bot_id: msg.payload.bot.botname,\n            cmd: `msell_on_${msg.payload.bot.settings.exchange.toLowerCase()}`,\n            params: {\n                pair,\n                quantity,\n                \n            }\n        }\n    }\n}]);\n\nmsg.topic = 'fjob';\nmsg.payload.bot.status.updated = new Date().getTime();\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 920,
        "wires": [
            [
                "8e3cfa950f6b852f"
            ],
            [
                "8a71bd758a439e59"
            ]
        ]
    },
    {
        "id": "4ed31955c8caf457",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "regist_lead",
        "func": "msg.payload.bot.tsl.state = 'pending_for_regist';\nmsg.payload.bot.status.rezhim = `Регистрация сделки`;\nnode.send([null, {\n    payload: {\n        task: {\n            bot_id: msg.payload.bot.botname,\n            cmd: `regist_lead`,\n\n        }\n    }\n}]);\n\n\n\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 1040,
        "wires": [
            [
                "d4fed728262f1493"
            ],
            [
                "d6cc632cf714c107"
            ]
        ]
    },
    {
        "id": "39aba6d27f9557a7",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "bypass4",
        "func": "msg.topic = 'fjob';\nmsg.payload.bot.status.updated = new Date().getTime();\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1120,
        "wires": [
            [
                "8e47fd014e75be95"
            ]
        ]
    },
    {
        "id": "ba82ef3f8597453f",
        "type": "link out",
        "z": "cfa22530d851bb95",
        "name": "link out 25",
        "mode": "link",
        "links": [
            "f0fd6d983a7f20ea"
        ],
        "x": 1795,
        "y": 560,
        "wires": []
    },
    {
        "id": "1f501933682d08ce",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "cancel_up",
        "func": "//отменяем ордер, что повлечет за собой его выставление заново\nconst redis = context.global.get('redis');\nconst pair = msg.payload.bot.settings.pair;\nconst curorderid = msg.payload.bot.tsl.curorderid;\n\nasync function getOrderStatus(orderId) {\n    return new Promise((resolve, reject) => {\n        redis.get(`orders-status:${pair}:${orderId}`, (err, data) => {\n            err ? reject(err) : resolve(data);\n        });\n    });\n}\nconst status = await getOrderStatus(curorderid);\nif (status === \"NEW\") {\n    msg.payload.bot.tsl.state = 'pending_cancel_up';\n    msg.payload.bot.status.rezhim = `Перевыставляю ордер`;\n    node.send([null, {\n        payload: {\n\n            task: {\n                bot_id: msg.payload.bot.botname,\n                cmd: `sell_cancel_on_${msg.payload.bot.settings.exchange.toLowerCase()}`,\n                params: {\n                    orderId: curorderid\n                }\n            }\n        }\n    }]);\n}\n\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 640,
        "wires": [
            [
                "784a408d85228030"
            ],
            [
                "40dacc2a0a27c42d"
            ]
        ]
    },
    {
        "id": "2d4a138119064683",
        "type": "switch",
        "z": "cfa22530d851bb95",
        "name": "currentprice >= curstop",
        "property": "payload.bot.status.currentprice",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "payload.bot.tsl.curstop",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1990,
        "y": 720,
        "wires": [
            [
                "10eb0692b5656a7a"
            ],
            [
                "f675b6671e297a67"
            ]
        ],
        "outputLabels": [
            "",
            "Проскальзывание"
        ]
    },
    {
        "id": "c265d6a05bdae8f2",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "sold",
        "func": "\n//msg.payload.bot.tsl.averageSellPrice = \n\nmsg.payload.bot.tsl.state = 'sold';\n\nmsg.topic = 'fjob';\nmsg.payload.bot.status.updated = new Date().getTime();\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 800,
        "wires": [
            [
                "adb87cd1cf0b9a57"
            ]
        ]
    },
    {
        "id": "2b4ba10a8377bfc0",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "cancel_for_msell",
        "func": "\nlet executedQty = msg.payload.bot.tsl.resp.executedQty;\nlet cummulativeQuoteQty = msg.payload.bot.tsl.resp.cummulativeQuoteQty;\n\nlet curorderid = msg.payload.bot.tsl.curorderid;\n\n\nmsg.payload.bot.tsl.sellprice1 = Number(cummulativeQuoteQty)/Number(executedQty);\n\nmsg.payload.bot.tsl.quantity_for_msell = msg.payload.bot.tsl.curquantity - executedQty;\n\nmsg.payload.bot.tsl.state = 'pending_cancel_for_msell';\n  node.send([null, {\n        payload: {\n\n            task: {\n                bot_id: msg.payload.bot.botname,\n                cmd: `cancel_for_msell_on_${msg.payload.bot.settings.exchange.toLowerCase()}`,\n                params: {\n                    orderId: curorderid\n                }\n            }\n        }\n    }]);\n\n\nmsg.topic = 'fjob';\nmsg.payload.bot.status.updated = new Date().getTime();\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 840,
        "wires": [
            [
                "212b271d64c2b850"
            ],
            [
                "55a3d9fb8c9e98df"
            ]
        ]
    },
    {
        "id": "8e3cfa950f6b852f",
        "type": "link out",
        "z": "cfa22530d851bb95",
        "name": "link out 26",
        "mode": "link",
        "links": [
            "f0fd6d983a7f20ea"
        ],
        "x": 1735,
        "y": 900,
        "wires": []
    },
    {
        "id": "d4fed728262f1493",
        "type": "link out",
        "z": "cfa22530d851bb95",
        "name": "link out 27",
        "mode": "link",
        "links": [
            "f0fd6d983a7f20ea"
        ],
        "x": 1775,
        "y": 1020,
        "wires": []
    },
    {
        "id": "8e47fd014e75be95",
        "type": "link out",
        "z": "cfa22530d851bb95",
        "name": "link out 28",
        "mode": "link",
        "links": [
            "f0fd6d983a7f20ea"
        ],
        "x": 1755,
        "y": 1120,
        "wires": []
    },
    {
        "id": "784a408d85228030",
        "type": "link out",
        "z": "cfa22530d851bb95",
        "name": "link out 29",
        "mode": "link",
        "links": [
            "f0fd6d983a7f20ea"
        ],
        "x": 2075,
        "y": 620,
        "wires": []
    },
    {
        "id": "10eb0692b5656a7a",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "getOrderStatus1",
        "func": "const redis = context.global.get('redis');\nconst tilog = global.get('tilog');\n\nconst botname = msg.payload.bot.botname;\n\n\n\nconst pair = msg.payload.bot.settings.pair;\n\nasync function getOrderStatus(orderId) {\n    return new Promise((resolve, reject) => {\n        redis.get(`orders-status:${pair}:${orderId}`, (err, data) => {\n            err ? reject(err) : resolve(data);\n        });\n    });\n}\n\n\nconst orderId = msg.payload.bot.tsl.curorderid;\nconst status = await getOrderStatus(orderId);\n\nmsg.payload.bot.tsl.orderstatus = status;\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2300,
        "y": 660,
        "wires": [
            [
                "2beaea02641ae3c7"
            ]
        ]
    },
    {
        "id": "f675b6671e297a67",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "getOrderStatus2",
        "func": "const redis = context.global.get('redis');\nconst tilog = global.get('tilog');\n\nconst botname = msg.payload.bot.botname;\n\nconst enableLogging = true;\n\nfunction log(nodeName, logNumber, message, data = null) {\n    if (enableLogging && tilog) {\n        const text = data ? `${message}: ${JSON.stringify(data, null, 2)}` : message;\n        tilog(botname, `[${nodeName}] [${logNumber}] ${text}`);\n    }\n}\n\nconst pair = msg.payload.bot.settings.pair;\n\nfunction getOrderStatus(orderId) {\n    return new Promise((resolve, reject) => {\n        redis.get(`orders-status:${pair}:${orderId}`, (err, data) => {\n            err ? reject(err) : resolve(data);\n        });\n    });\n}\n\n\nconst orderId = msg.payload.bot.tsl.curorderid;\nconst status = await getOrderStatus(orderId);\n\nmsg.payload.bot.tsl.orderstatus = status;\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2300,
        "y": 800,
        "wires": [
            [
                "90cac22fc757f772"
            ]
        ]
    },
    {
        "id": "adb87cd1cf0b9a57",
        "type": "link out",
        "z": "cfa22530d851bb95",
        "name": "link out 30",
        "mode": "link",
        "links": [
            "f0fd6d983a7f20ea"
        ],
        "x": 1915,
        "y": 800,
        "wires": []
    },
    {
        "id": "212b271d64c2b850",
        "type": "link out",
        "z": "cfa22530d851bb95",
        "name": "link out 31",
        "mode": "link",
        "links": [
            "f0fd6d983a7f20ea"
        ],
        "x": 1995,
        "y": 820,
        "wires": []
    },
    {
        "id": "2beaea02641ae3c7",
        "type": "switch",
        "z": "cfa22530d851bb95",
        "name": "статус ордера",
        "property": "payload.bot.tsl.orderstatus",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 2500,
        "y": 660,
        "wires": [
            [
                "2fe75db8fb9dc4c1"
            ],
            [
                "54715a46cb72ac19"
            ],
            [
                "54715a46cb72ac19"
            ],
            [
                "54715a46cb72ac19"
            ],
            [
                "54715a46cb72ac19"
            ],
            [
                "54715a46cb72ac19"
            ],
            [
                "54715a46cb72ac19"
            ]
        ]
    },
    {
        "id": "90cac22fc757f772",
        "type": "switch",
        "z": "cfa22530d851bb95",
        "name": "статус ордера",
        "property": "payload.bot.tsl.orderstatus",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 2500,
        "y": 800,
        "wires": [
            [
                "3a31424a1c50fe10"
            ],
            [
                "3a31424a1c50fe10"
            ],
            [
                "4872d0f6a6dfeba3"
            ],
            [
                "4872d0f6a6dfeba3"
            ],
            [
                "4872d0f6a6dfeba3"
            ],
            [
                "4872d0f6a6dfeba3"
            ],
            [
                "4872d0f6a6dfeba3"
            ]
        ]
    },
    {
        "id": "2fe75db8fb9dc4c1",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "fetchOrderOnExch1",
        "func": "\nconst curorderid = msg.payload.bot.tsl.curorderid;\n\n\nmsg.payload.bot.tsl.state = 'pending_order_status';\n  node.send([null, {\n        payload: {\n\n            task: {\n                bot_id: msg.payload.bot.botname,\n                cmd: `order_status_on_${msg.payload.bot.settings.exchange.toLowerCase()}`,\n                params: {\n                    orderId: curorderid\n                }\n            }\n        }\n    }]);\n\n\nmsg.topic = 'fjob';\nmsg.payload.bot.status.updated = new Date().getTime();\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2720,
        "y": 620,
        "wires": [
            [
                "f5dcb047930f8644"
            ],
            [
                "1f75140775a79aa1"
            ]
        ]
    },
    {
        "id": "54715a46cb72ac19",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "bypass2",
        "func": "\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2680,
        "y": 680,
        "wires": [
            [
                "eb7cae98c6ee983b"
            ]
        ]
    },
    {
        "id": "3a31424a1c50fe10",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "fetchOrderOnExch2",
        "func": "\nconst curorderid = msg.payload.bot.tsl.curorderid;\n\n\nmsg.payload.bot.tsl.state = 'pending_order_status';\n  node.send([null, {\n        payload: {\n\n            task: {\n                bot_id: msg.payload.bot.botname,\n                cmd: `order_status_on_${msg.payload.bot.settings.exchange.toLowerCase()}`,\n                params: {\n                    orderId: curorderid\n                }\n            }\n        }\n    }]);\n\n\nmsg.topic = 'fjob';\nmsg.payload.bot.status.updated = new Date().getTime();\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2720,
        "y": 760,
        "wires": [
            [
                "2481267629deb912"
            ],
            [
                "1bd1839ce2a22085"
            ]
        ]
    },
    {
        "id": "4872d0f6a6dfeba3",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "bypass3",
        "func": "msg.topic = 'fjob';\nmsg.payload.bot.status.updated = new Date().getTime();\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2680,
        "y": 820,
        "wires": [
            [
                "8d8b80cf487e9cdd"
            ]
        ]
    },
    {
        "id": "f5dcb047930f8644",
        "type": "link out",
        "z": "cfa22530d851bb95",
        "name": "link out 32",
        "mode": "link",
        "links": [
            "f0fd6d983a7f20ea"
        ],
        "x": 2875,
        "y": 600,
        "wires": []
    },
    {
        "id": "eb7cae98c6ee983b",
        "type": "link out",
        "z": "cfa22530d851bb95",
        "name": "link out 33",
        "mode": "link",
        "links": [
            "f0fd6d983a7f20ea"
        ],
        "x": 2795,
        "y": 680,
        "wires": []
    },
    {
        "id": "2481267629deb912",
        "type": "link out",
        "z": "cfa22530d851bb95",
        "name": "link out 34",
        "mode": "link",
        "links": [
            "f0fd6d983a7f20ea"
        ],
        "x": 2875,
        "y": 740,
        "wires": []
    },
    {
        "id": "8d8b80cf487e9cdd",
        "type": "link out",
        "z": "cfa22530d851bb95",
        "name": "link out 35",
        "mode": "link",
        "links": [
            "f0fd6d983a7f20ea"
        ],
        "x": 2795,
        "y": 820,
        "wires": []
    },
    {
        "id": "f0fd6d983a7f20ea",
        "type": "link in",
        "z": "cfa22530d851bb95",
        "name": "link in 1",
        "links": [
            "ef132b1b8cca2b52",
            "ba82ef3f8597453f",
            "784a408d85228030",
            "adb87cd1cf0b9a57",
            "212b271d64c2b850",
            "eb7cae98c6ee983b",
            "f5dcb047930f8644",
            "2481267629deb912",
            "8d8b80cf487e9cdd",
            "d4fed728262f1493",
            "8e3cfa950f6b852f",
            "8e47fd014e75be95",
            "a054780b4e8c5098",
            "413e11c32b043f79",
            "232093a15895d74d",
            "679eef77781c38a5",
            "6af9770e2d692aa3",
            "551112655314b92d",
            "4df69e5c81c3fa87",
            "4fd3da1d5c49f8ce",
            "3271b3e88dfb2d6d",
            "0e2531780c341180",
            "f6306a911fb76f6a"
        ],
        "x": 105,
        "y": 900,
        "wires": [
            [
                "600e6e8df7465c83"
            ]
        ]
    },
    {
        "id": "f36fc2b9ab3840c3",
        "type": "redis-out",
        "z": "cfa22530d851bb95",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1850,
        "y": 600,
        "wires": []
    },
    {
        "id": "40dacc2a0a27c42d",
        "type": "redis-out",
        "z": "cfa22530d851bb95",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 2130,
        "y": 660,
        "wires": []
    },
    {
        "id": "55a3d9fb8c9e98df",
        "type": "redis-out",
        "z": "cfa22530d851bb95",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 2050,
        "y": 860,
        "wires": []
    },
    {
        "id": "8a71bd758a439e59",
        "type": "redis-out",
        "z": "cfa22530d851bb95",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1790,
        "y": 940,
        "wires": []
    },
    {
        "id": "d6cc632cf714c107",
        "type": "redis-out",
        "z": "cfa22530d851bb95",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1830,
        "y": 1060,
        "wires": []
    },
    {
        "id": "1f75140775a79aa1",
        "type": "redis-out",
        "z": "cfa22530d851bb95",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 2930,
        "y": 640,
        "wires": []
    },
    {
        "id": "1bd1839ce2a22085",
        "type": "redis-out",
        "z": "cfa22530d851bb95",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 2930,
        "y": 780,
        "wires": []
    },
    {
        "id": "3cfb310bb63646f3",
        "type": "redis-out",
        "z": "cfa22530d851bb95",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1008.3333129882812,
        "y": 1366.6666259765625,
        "wires": []
    },
    {
        "id": "f29466ab8c64f4e2",
        "type": "redis-out",
        "z": "cfa22530d851bb95",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1010,
        "y": 1460,
        "wires": []
    },
    {
        "id": "1b30ee1de0aed232",
        "type": "redis-out",
        "z": "cfa22530d851bb95",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1010,
        "y": 1580,
        "wires": []
    },
    {
        "id": "94c25c8eb4035535",
        "type": "redis-out",
        "z": "cfa22530d851bb95",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1010,
        "y": 1680,
        "wires": []
    },
    {
        "id": "d3596fa74b5040b0",
        "type": "redis-out",
        "z": "cfa22530d851bb95",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1010,
        "y": 1780,
        "wires": []
    },
    {
        "id": "b540fedcbf6f1524",
        "type": "redis-out",
        "z": "cfa22530d851bb95",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1010,
        "y": 1880,
        "wires": []
    },
    {
        "id": "5f2785e712d88264",
        "type": "redis-out",
        "z": "cfa22530d851bb95",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1010,
        "y": 2000,
        "wires": []
    },
    {
        "id": "a054780b4e8c5098",
        "type": "link out",
        "z": "cfa22530d851bb95",
        "name": "link out 36",
        "mode": "link",
        "links": [
            "f0fd6d983a7f20ea"
        ],
        "x": 815,
        "y": 400,
        "wires": []
    },
    {
        "id": "413e11c32b043f79",
        "type": "link out",
        "z": "cfa22530d851bb95",
        "name": "link out 37",
        "mode": "link",
        "links": [
            "f0fd6d983a7f20ea"
        ],
        "x": 825,
        "y": 480,
        "wires": []
    },
    {
        "id": "232093a15895d74d",
        "type": "link out",
        "z": "cfa22530d851bb95",
        "name": "link out 38",
        "mode": "link",
        "links": [
            "f0fd6d983a7f20ea"
        ],
        "x": 1125,
        "y": 1220,
        "wires": []
    },
    {
        "id": "679eef77781c38a5",
        "type": "link out",
        "z": "cfa22530d851bb95",
        "name": "link out 39",
        "mode": "link",
        "links": [
            "f0fd6d983a7f20ea"
        ],
        "x": 955,
        "y": 1320,
        "wires": []
    },
    {
        "id": "6af9770e2d692aa3",
        "type": "link out",
        "z": "cfa22530d851bb95",
        "name": "link out 40",
        "mode": "link",
        "links": [
            "f0fd6d983a7f20ea"
        ],
        "x": 955,
        "y": 1540,
        "wires": []
    },
    {
        "id": "551112655314b92d",
        "type": "link out",
        "z": "cfa22530d851bb95",
        "name": "link out 41",
        "mode": "link",
        "links": [
            "f0fd6d983a7f20ea"
        ],
        "x": 955,
        "y": 1640,
        "wires": []
    },
    {
        "id": "4df69e5c81c3fa87",
        "type": "link out",
        "z": "cfa22530d851bb95",
        "name": "link out 42",
        "mode": "link",
        "links": [
            "f0fd6d983a7f20ea"
        ],
        "x": 955,
        "y": 1740,
        "wires": []
    },
    {
        "id": "4fd3da1d5c49f8ce",
        "type": "link out",
        "z": "cfa22530d851bb95",
        "name": "link out 43",
        "mode": "link",
        "links": [
            "f0fd6d983a7f20ea"
        ],
        "x": 955,
        "y": 1840,
        "wires": []
    },
    {
        "id": "3271b3e88dfb2d6d",
        "type": "link out",
        "z": "cfa22530d851bb95",
        "name": "link out 44",
        "mode": "link",
        "links": [
            "f0fd6d983a7f20ea"
        ],
        "x": 955,
        "y": 1960,
        "wires": []
    },
    {
        "id": "375ac42544ee4fa3",
        "type": "redis-out",
        "z": "cfa22530d851bb95",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "fjob",
        "obj": true,
        "x": 150,
        "y": 960,
        "wires": []
    },
    {
        "id": "600e6e8df7465c83",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "msg.topic = \"fjob\"",
        "func": "msg.payload.bot.status.updated = new Date().getTime();\nmsg.topic = \"fjob\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 900,
        "wires": [
            [
                "375ac42544ee4fa3"
            ]
        ]
    },
    {
        "id": "0e2531780c341180",
        "type": "link out",
        "z": "cfa22530d851bb95",
        "name": "link out 45",
        "mode": "link",
        "links": [
            "f0fd6d983a7f20ea"
        ],
        "x": 955,
        "y": 1420,
        "wires": []
    },
    {
        "id": "1c4354689098f730",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "buyed",
        "func": "// Функция для сканирования и обработки ордеров\nfunction scanAndProcessOrders(pair, redisClient, callback) {\n\n    let cursor = '0'; // Начальный курсор для SCAN\n\n    function scan(cursor) {\n        redisClient.scan(cursor, 'MATCH', `orders-status:${pair}:*`, 'COUNT', 100, (err, reply) => {\n            if (err) {\n                node.error(\"Ошибка при сканировании Redis: \" + err, msg);\n                return callback(buyed); // Возвращаем пустой массив в случае ошибки\n            }\n\n            let nextCursor = reply[0]; // Следующий курсор\n            let keys = reply[1]; // Найденные ключи\n\n\n            // Если ключи найдены\n            if (keys.length > 0) {\n                let processedKeys = 0; // Счетчик обработанных ключей\n\n                keys.forEach(key => {\n                    // Проверяем, что ключ заканчивается на \"-side\"\n                    if (key.endsWith(\"-side\")) {\n                        redisClient.get(key, (err, side) => {\n                            if (err) {\n                                node.error(\"Ошибка при получении значения ключа: \" + err, msg);\n                                return;\n                            }\n\n                            // Проверяем, что side = 'BUY'\n                            if (side === 'BUY') {\n                                // Извлекаем номер ордера (удаляем суффикс \"-side\")\n                                let number = key.split(':')[2].replace(\"-side\", \"\");\n\n\n                                // Проверяем, есть ли номер ордера уже в buyed\n                                let isAlreadyProcessed = buyed.some(order => order[0] === number);\n\n                                // Если ордер еще не обработан\n                                if (!isAlreadyProcessed) {\n                                    // Получаем данные по ордеру\n                                    redisClient.mget(\n                                        [\n                                            `orders-status:${pair}:${number}-price`,\n                                            `orders-status:${pair}:${number}-comsa`,\n                                            `orders-status:${pair}:${number}-quantity`\n                                        ],\n                                        (err, results) => {\n                                            if (err) {\n                                                node.error(\"Ошибка при получении данных ордера: \" + err, msg);\n                                                return;\n                                            }\n\n                                            let [price, comsa, quantity] = results;\n\n                                            // Добавляем данные в массив buyed\n                                            buyed.push([number, quantity, price, comsa]);\n\n                                            // Увеличиваем счетчик обработанных ключей\n                                            processedKeys++;\n\n                                            // Если все ключи обработаны, продолжаем сканирование\n                                            if (processedKeys === keys.length && nextCursor !== '0') {\n                                                scan(nextCursor);\n                                            } else if (processedKeys === keys.length && nextCursor === '0') {\n                                                callback(buyed); // Возвращаем результат, если сканирование завершено\n                                            }\n                                        }\n                                    );\n                                } else {\n                                    // Увеличиваем счетчик обработанных ключей\n                                    processedKeys++;\n\n                                    // Если все ключи обработаны, продолжаем сканирование\n                                    if (processedKeys === keys.length && nextCursor !== '0') {\n                                        scan(nextCursor);\n                                    } else if (processedKeys === keys.length && nextCursor === '0') {\n                                        callback(buyed); // Возвращаем результат, если сканирование завершено\n                                    }\n                                }\n                            } else {\n                                // Увеличиваем счетчик обработанных ключей\n                                processedKeys++;\n\n                                // Если все ключи обработаны, продолжаем сканирование\n                                if (processedKeys === keys.length && nextCursor !== '0') {\n                                    scan(nextCursor);\n                                } else if (processedKeys === keys.length && nextCursor === '0') {\n                                    callback(buyed); // Возвращаем результат, если сканирование завершено\n                                }\n                            }\n                        });\n                    } else {\n                        // Если ключ не заканчивается на \"-side\", просто увеличиваем счетчик\n                        processedKeys++;\n\n                        // Если все ключи обработаны, продолжаем сканирование\n                        if (processedKeys === keys.length && nextCursor !== '0') {\n                            scan(nextCursor);\n                        } else if (processedKeys === keys.length && nextCursor === '0') {\n                            callback(buyed); // Возвращаем результат, если сканирование завершено\n                        }\n                    }\n                });\n            } else {\n                // Если ключей нет, продолжаем сканирование или завершаем\n                if (nextCursor !== '0') {\n                    scan(nextCursor);\n                } else {\n                    callback(buyed); // Возвращаем результат, если сканирование завершено\n                }\n            }\n        });\n    }\n\n    scan(cursor); // Начинаем сканирование\n}\n\nfunction sumSecondElements(array) {\n    return array.reduce((sum, subArray) => sum + parseFloat(subArray[1]), 0);\n}\n\n// Основная логика\nlet pair = msg.payload.bot.settings.pair\nconst redisClient = context.global.get('redis');\nconst digitq = Number(msg.payload.bot.settings.digitq);\nlet buyed = msg.payload.bot.openpos.buyed || []; // Массив для хранения данных о купленных ордерах\n\n\nscanAndProcessOrders(pair, redisClient, (buyed) => {\n\n    msg.payload.bot.openpos.buyed = buyed // Записываем результат \n\n    let q = sumSecondElements(buyed);\n    msg.payload.bot.openpos.quantity = Number((q).toFixed(digitq));\nmsg.payload.bot.finance.depo = msg.payload.bot.openpos.quantity * msg.payload.bot.status.currentprice\n\n    let totalBuyCost = 0;\n    for (const buy of buyed) {\n        const [orderId, quantityStr, priceStr, commissionStr] = buy;\n        const quantity = parseFloat(quantityStr);\n        const price = parseFloat(priceStr);\n        const commission = parseFloat(commissionStr);\n\n        totalBuyCost += quantity * price;\n\n    }\n\n\n\n    msg.payload.bot.finance.startdepo = totalBuyCost\n \n\n    if (msg.payload.bot.openpos.quantity !== msg.payload.bot.tsl.curquantity) {\n        msg.payload.bot.status.rezhim = `Изменился размер ордера`;\n        node.send([null, msg]);\n    }\n    node.send([msg, null]); // Отправляем сообщение дальше\n});",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 840,
        "wires": [
            [
                "aa67dd386ff15506"
            ],
            [
                "410cc47006d1a74b"
            ]
        ]
    },
    {
        "id": "0371b9c9be8c28df",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "changesettings",
        "func": "let newsettings = msg.payload.task.params\nmsg.payload.bot.settings = newsettings\n\n\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 340,
        "wires": [
            [
                "63f44010f30dd6be"
            ]
        ]
    },
    {
        "id": "f6306a911fb76f6a",
        "type": "link out",
        "z": "cfa22530d851bb95",
        "name": "link out 46",
        "mode": "link",
        "links": [
            "f0fd6d983a7f20ea"
        ],
        "x": 1015,
        "y": 320,
        "wires": []
    },
    {
        "id": "9e707a93ba39aa6a",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "tgmsg",
        "func": "let tgmsg = msg.payload;\n\n\nmsg = {};\nmsg.payload = {tgmsg};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1260,
        "wires": [
            [
                "0e5028a09366f9cc"
            ]
        ]
    },
    {
        "id": "0e5028a09366f9cc",
        "type": "redis-out",
        "z": "cfa22530d851bb95",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "tgpost",
        "obj": true,
        "x": 1030,
        "y": 1260,
        "wires": []
    },
    {
        "id": "63f44010f30dd6be",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "cancel_up",
        "func": "//отменяем ордер, что повлечет за собой его выставление заново\nconst redis = context.global.get('redis');\nconst pair = msg.payload.bot.settings.pair;\nconst curorderid = msg.payload.bot.tsl.curorderid;\n\nasync function getOrderStatus(orderId) {\n    return new Promise((resolve, reject) => {\n        redis.get(`orders-status:${pair}:${orderId}`, (err, data) => {\n            err ? reject(err) : resolve(data);\n        });\n    });\n}\nconst status = await getOrderStatus(curorderid);\nif (status === \"NEW\") {\n    msg.payload.bot.tsl.state = 'pending_cancel_up';\n    msg.payload.bot.status.rezhim = `Изменились настройки - перевыставляю ордер`;\n    node.send([null, {\n        payload: {\n\n            task: {\n                bot_id: msg.payload.bot.botname,\n                cmd: `sell_cancel_on_${msg.payload.bot.settings.exchange.toLowerCase()}`,\n                params: {\n                    orderId: curorderid\n                }\n            }\n        }\n    }]);\n}\n\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 340,
        "wires": [
            [
                "f6306a911fb76f6a"
            ],
            [
                "b7bce3d787352242"
            ]
        ]
    },
    {
        "id": "b7bce3d787352242",
        "type": "redis-out",
        "z": "cfa22530d851bb95",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1070,
        "y": 360,
        "wires": []
    },
    {
        "id": "e9f3a9e085c7aea3",
        "type": "redis-out",
        "z": "cfa22530d851bb95",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 970,
        "y": 920,
        "wires": []
    },
    {
        "id": "410cc47006d1a74b",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "cancel_up",
        "func": "//отменяем ордер, что повлечет за собой его выставление заново\nconst redis = context.global.get('redis');\nconst pair = msg.payload.bot.settings.pair;\nconst curorderid = msg.payload.bot.tsl.curorderid;\n\nasync function getOrderStatus(orderId) {\n    return new Promise((resolve, reject) => {\n        redis.get(`orders-status:${pair}:${orderId}`, (err, data) => {\n            err ? reject(err) : resolve(data);\n        });\n    });\n}\nconst status = await getOrderStatus(curorderid);\nif (status === \"NEW\") {\n    msg.payload.bot.tsl.state = 'pending_cancel_up';\n\n    node.send([{\n        payload: {\n\n            task: {\n                bot_id: msg.payload.bot.botname,\n                cmd: `sell_cancel_on_${msg.payload.bot.settings.exchange.toLowerCase()}`,\n                params: {\n                    orderId: curorderid\n                }\n            }\n        }\n    }]);\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 920,
        "wires": [
            [
                "e9f3a9e085c7aea3"
            ]
        ]
    },
    {
        "id": "081a7380474d8486",
        "type": "function",
        "z": "cfa22530d851bb95",
        "name": "сброс TSL и openpos",
        "func": "msg.payload.bot.tsl = { \"raschstopprice\": 0, \"curstop\": 0, \"curorderid\": 0, \"quantity\": 0, \"filledquantity\": 0, \"sold\": false, \"state\": \"0\", \"busy\": false }\nmsg.payload.bot.openpos = { \"quantity\": 0, \"buyed\": [] }\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1220,
        "wires": [
            [
                "232093a15895d74d"
            ]
        ]
    },
    {
        "id": "c5981311db05dc2d",
        "type": "inject",
        "z": "cfa22530d851bb95",
        "g": "8d9652841578873f",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 890,
        "y": 60,
        "wires": [
            [
                "1107aa8f9a1c0dae"
            ]
        ]
    },
    {
        "id": "1107aa8f9a1c0dae",
        "type": "redis-out",
        "z": "cfa22530d851bb95",
        "g": "8d9652841578873f",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 890,
        "y": 100,
        "wires": []
    },
    {
        "id": "85121c1fd6c8653a",
        "type": "inject",
        "z": "cfa22530d851bb95",
        "g": "8d9652841578873f",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 710,
        "y": 60,
        "wires": [
            [
                "c58b35895b1cb82b"
            ]
        ]
    },
    {
        "id": "c58b35895b1cb82b",
        "type": "redis-out",
        "z": "cfa22530d851bb95",
        "g": "8d9652841578873f",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 710,
        "y": 100,
        "wires": []
    },
    {
        "id": "a2b40c9c0995c701",
        "type": "inject",
        "z": "cfa22530d851bb95",
        "g": "8d9652841578873f",
        "name": "check1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1130,
        "y": 60,
        "wires": [
            [
                "2aeec6c09a137820"
            ]
        ]
    },
    {
        "id": "2aeec6c09a137820",
        "type": "redis-out",
        "z": "cfa22530d851bb95",
        "g": "8d9652841578873f",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "check1",
        "obj": false,
        "x": 1140,
        "y": 100,
        "wires": []
    },
    {
        "id": "cb971c7c18b23d99",
        "type": "inject",
        "z": "cfa22530d851bb95",
        "g": "8d9652841578873f",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "SOLUSDT-1742747929",
        "payloadType": "str",
        "x": 760,
        "y": 200,
        "wires": [
            [
                "308e49969036f6b0"
            ]
        ]
    },
    {
        "id": "308e49969036f6b0",
        "type": "redis-out",
        "z": "cfa22530d851bb95",
        "g": "8d9652841578873f",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "reset",
        "obj": true,
        "x": 950,
        "y": 200,
        "wires": []
    },
    {
        "id": "b36b590670477a56",
        "type": "debug",
        "z": "cfa22530d851bb95",
        "g": "7f32f00d81c1f721",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1780,
        "y": 100,
        "wires": []
    },
    {
        "id": "ba89d3763932ce26",
        "type": "catch",
        "z": "cfa22530d851bb95",
        "g": "7f32f00d81c1f721",
        "name": "catch all",
        "scope": null,
        "uncaught": false,
        "x": 1440,
        "y": 160,
        "wires": [
            [
                "b36b590670477a56",
                "7c39eb46b26148db"
            ]
        ]
    },
    {
        "id": "becafd7870cee9bf",
        "type": "redis-out",
        "z": "cfa22530d851bb95",
        "g": "7f32f00d81c1f721",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 1790,
        "y": 160,
        "wires": []
    },
    {
        "id": "7c39eb46b26148db",
        "type": "function",
        "z": "cfa22530d851bb95",
        "g": "7f32f00d81c1f721",
        "name": "msg.reset = true",
        "func": "msg.reset = true\nmsg.topic = 'stop'\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 160,
        "wires": [
            [
                "becafd7870cee9bf"
            ]
        ]
    },
    {
        "id": "3c2f9ee785f2d2a3",
        "type": "comment",
        "z": "cfa22530d851bb95",
        "g": "7f32f00d81c1f721",
        "name": "stop for debug",
        "info": "",
        "x": 1460,
        "y": 100,
        "wires": []
    },
    {
        "id": "34737af6b55a68e0",
        "type": "inject",
        "z": "fdbc682a3811866c",
        "name": "Init Worker ",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "true",
        "payloadType": "str",
        "x": 150,
        "y": 60,
        "wires": [
            [
                "9068ef18aa969a41"
            ]
        ]
    },
    {
        "id": "ccbb0716be1aac32",
        "type": "redis-in",
        "z": "fdbc682a3811866c",
        "server": "a0efbb89.5e42d8",
        "command": "subscribe",
        "name": "job",
        "topic": "job",
        "obj": true,
        "timeout": 0,
        "x": 130,
        "y": 580,
        "wires": [
            [
                "f7f9c79ecad7ac37"
            ]
        ]
    },
    {
        "id": "9068ef18aa969a41",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "Worker : Init",
        "func": "// ==== Настройка ====\nlet redis = context.global.get('redis');\n\n// Используем context.flow для получения ID воркера, если он уже существует, иначе генерируем новый\nconst workerId = context.flow.get('workerId') || 'worker:' + RED.util.generateId();\ncontext.flow.set('workerId', workerId);\n\n// Регистрируем воркера\n(async () => await redis.set(workerId, 1))();\nnode.status({fill:\"green\",shape:\"dot\",text:\"Воркер запущен:\" + workerId});\n\nmsg.workerID = workerId;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "f7f9c79ecad7ac37",
        "type": "switch",
        "z": "fdbc682a3811866c",
        "name": "workerId",
        "property": "payload.workerId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "workerId",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 140,
        "y": 640,
        "wires": [
            [
                "e3dc23e2d8c20233"
            ]
        ]
    },
    {
        "id": "e3dc23e2d8c20233",
        "type": "switch",
        "z": "fdbc682a3811866c",
        "name": "task.cmd",
        "property": "payload.task.cmd",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "changesettings",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "onoff",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "tsl_edit",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "check",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "regist_lead",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "buy_on_binance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cancel_on_binance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sell_on_binance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "msell_on_binance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sell_cancel_on_binance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cancel_for_msell_on_binance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "order_status_on_binance",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 12,
        "x": 320,
        "y": 700,
        "wires": [
            [
                "fb1bed9fb7ee6ba6"
            ],
            [
                "8921024546cfbc90"
            ],
            [
                "f498c1e3b5fd0718"
            ],
            [
                "7fe1bdc209eed73f"
            ],
            [
                "cb0ac1830c4d857e"
            ],
            [
                "6e5edfc49d8fc439"
            ],
            [
                "b4094d3ba3fb61e9"
            ],
            [
                "baf6a9d9edd7c021"
            ],
            [
                "e2acd418706414b3"
            ],
            [
                "33d2a0e7870b0da5"
            ],
            [
                "f3250bca40331867"
            ],
            [
                "cccc81029fad2f12"
            ]
        ]
    },
    {
        "id": "8921024546cfbc90",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "onoff",
        "func": "msg.payload.bot.onoff = !msg.payload.bot.onoff\n\nif (!msg.payload.bot.onoff) {\n    msg.payload.bot.status.rezhim=\"Остановлен\"\n}\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 400,
        "wires": [
            [
                "f44e353694073997"
            ]
        ]
    },
    {
        "id": "f498c1e3b5fd0718",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "tsl_edit",
        "func": "msg.payload.bot.tsl = msg.payload.task.tsl\nmsg.payload.bot.status = msg.payload.task.status\nmsg.payload.bot.onoff = msg.payload.task.onoff\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 480,
        "wires": [
            [
                "203e0bcdecacd437"
            ]
        ]
    },
    {
        "id": "7fe1bdc209eed73f",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "check ",
        "func": "const redis = context.global.get('redis');\nconst tilog = global.get('tilog');\nconst botname = msg.payload.bot.botname;\nconst enableLogging = true;\n\nfunction log(nodeName, logNumber, message, data = null) {\n    if (enableLogging && tilog) {\n        const text = data ? `${message}: ${JSON.stringify(data, null, 2)}` : message;\n        tilog(botname, `[${nodeName}] [${logNumber}] ${text}`);\n    }\n}\n\nfunction getCurrentPrice(key) {\n    return new Promise((resolve, reject) => {\n        redis.get(key, (err, data) => {\n            err ? reject(err) : resolve(data);\n        });\n    });\n}\n\nconst pair = msg.payload.bot.settings.pair;\nconst exchange = msg.payload.bot.settings.exchange;\n\nlet redisKey;\nif (exchange === \"TestB\") {\n    redisKey = 'testb:currentprice';\n    log('calc-raschstopprice', '1', `Using TestB exchange, fetching price from Redis key: ${redisKey}`);\n} else {\n    redisKey = `prices:${pair}`;\n    //  log('calc-raschstopprice', '2', `Using default exchange, fetching price from Redis key: ${redisKey}`);\n}\n\nlet currentprice = await getCurrentPrice(redisKey);\ncurrentprice = Number(currentprice);\n\n\nmsg.payload.bot.status.currentprice = currentprice;\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 840,
        "wires": [
            [
                "3c52c2838aab0505"
            ]
        ]
    },
    {
        "id": "cb0ac1830c4d857e",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "регистрация сделки",
        "func": "let leads = global.get('leads') || [];\n\nlet node_time = new Date().getTime();\nlet date = new Date();\nlet endtime = date.toString().split('GMT')[0];\n\n\nfunction calculateProfitAndCommission(data) {\n    const buyed = data.openpos.buyed;\n    const sellInfo = data.tsl.resp;\n\n    // Рассчитываем общие затраты на покупку (включая комиссию)\n    let totalBuyCost = 0;\n    let totalBuyQuantity = 0;\n    let totalCommission = 0;\n\n    for (const buy of buyed) {\n        const [orderId, quantityStr, priceStr, commissionStr] = buy;\n        const quantity = parseFloat(quantityStr);\n        const price = parseFloat(priceStr);\n        const commission = parseFloat(commissionStr);\n\n        totalBuyCost += quantity * price;\n        totalBuyQuantity += quantity;\n        totalCommission += commission;\n    }\n\n    // Получаем данные о продаже\n    const sellQuantity = parseFloat(sellInfo.executedQty);\n    const sellPrice = parseFloat(sellInfo.price);\n    const sellAmount = parseFloat(sellInfo.cummulativeQuoteQty);\n\n    // Проверяем, что количество купленного и проданного совпадает\n    if (Math.abs(totalBuyQuantity - sellQuantity) > 0.0001) {\n        console.warn(`Количество купленного (${totalBuyQuantity}) и проданного (${sellQuantity}) не совпадает!`);\n    }\n\n    // Рассчитываем прибыль\n    const profit = sellAmount - totalBuyCost;\n\n    // Комиссия при продаже (Binance берет комиссию с суммы сделки)\n    const sellCommission = sellAmount * 0.001; // предполагаемая комиссия 0.1%\n    totalCommission += sellCommission;\n\n    return {\n        profit: profit,\n        totalCommission: totalCommission,\n        netProfit: profit - totalCommission,\n        buyCost: totalBuyCost,\n        sellAmount: sellAmount,\n        buyQuantity: totalBuyQuantity,\n        sellQuantity: sellQuantity,\n        averageBuyPrice: totalBuyCost / totalBuyQuantity,\n        sellPrice: sellPrice\n    };\n}\n\n// Функция для форматирования времени\nfunction formatTime(timestamp) {\n    let date = new Date(timestamp);\n    return date.toString().split('GMT')[0];\n}\n\n// Функция для вычисления временного интервала\nfunction timeDistance(date1, date2) {\n    let distance = Math.abs(date1 - date2);\n    const hours = Math.floor(distance / 3600000);\n    distance -= hours * 3600000;\n    const minutes = Math.floor(distance / 60000);\n    distance -= minutes * 60000;\n    const seconds = Math.floor(distance / 1000);\n    return `${hours}:${('0' + minutes).slice(-2)}:${('0' + seconds).slice(-2)}`;\n}\n\n// Функция для логирования\nfunction log(nodeName, logNumber, message, data = null) {\n    if (enableLogging && tilog) {\n        if (data) {\n            tilog(botname, `[${nodeName}] [${logNumber}] ${message}: ${JSON.stringify(data, null, 2)}`);\n        } else {\n            tilog(botname, `[${nodeName}] [${logNumber}] ${message}`);\n        }\n    }\n}\n\nconst botname = msg.payload.bot.botname;\nconst tilog = global.get('tilog');\nconst enableLogging = true;\n\nconst calcResult = calculateProfitAndCommission(msg.payload.bot);\n\n// Формируем отчет в виде строки для телеграма\nconst result = `\n📊 Отчет о сделке: ${botname}\n\n🛒 Покупка:\n- Средняя цена покупки: ${calcResult.averageBuyPrice.toFixed(8)}\n- Общее количество: ${calcResult.buyQuantity.toFixed(8)}\n- Общая стоимость: ${calcResult.buyCost.toFixed(8)}\n\n💰 Продажа:\n- Цена продажи: ${calcResult.sellPrice.toFixed(8)}\n- Количество: ${calcResult.sellQuantity.toFixed(8)}\n- Сумма продажи: ${calcResult.sellAmount.toFixed(8)}\n\n💵 Финансовый результат:\n- Прибыль: ${calcResult.profit.toFixed(8)}\n- Комиссии: ${calcResult.totalCommission.toFixed(8)}\n- Чистая прибыль: ${calcResult.netProfit.toFixed(8)}\n\n⏱ Время завершения: ${endtime}\n`;\n\nnode.send([null, {payload: result, originalData: calcResult}]);\n\nlog('registration', 3, \"complete\");\nnode.status({ fill: \"green\", shape: \"dot\" });\nnode.warn(\"Регистрация сделки\");\n\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1240,
        "wires": [
            [
                "6b877ed0a19e7edb"
            ],
            [
                "6d4b2ffd9d178b2a"
            ]
        ]
    },
    {
        "id": "6e5edfc49d8fc439",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "buy_on_binance",
        "func": "const binance = global.get('binance');\nconst tilog = global.get('tilog'); // Логирование\nconst botname = msg.payload.bot.botname;\n\n// Переменная для управления логированием\nconst enableLogging = true; // true - логирование включено, false - выключено\n\n// Функция для логирования\nfunction log(message, data = null) {\n    let nodeName = node.name;\n    let botname = msg.payload.bot.botname;\n    if (enableLogging && tilog) {\n        if (data) {\n            tilog(botname, `[${nodeName}] ${message}: ${JSON.stringify(data, null, 2)}`);\n        } else {\n            tilog(botname, `[${nodeName}] ${message}`);\n        }\n    }\n}\n\n// Функция для парсинга ошибок API\nfunction parseApiError(error) {\n    if (error.body) {\n        try {\n            const resp = JSON.parse(error.body);\n            return resp.msg;\n        } catch (e) {\n            // pass thru\n        }\n    }\n    return `Unknown error. Status code: ${error.statusCode}`;\n}\n\n// Промисификация функции binance.buy\nasync function buyBinanceOrder(pair, quantity, price) {\n    return new Promise((resolve, reject) => {\n        binance.buy(pair, quantity, price, { type: 'LIMIT' }, (err, resp) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(resp);\n            }\n        });\n    });\n}\n\n// Функция для обработки ошибок\nfunction handleError(msg, err) {\n    const errorMsg = parseApiError(err);\n    log(`Ошибка при покупке: ${errorMsg}`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = `Остановлен в результате ошибки ${errorMsg}`;\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    msg.err = err;\n    node.send([msg, null]);\n}\n\n// Функция для обработки успешного выполнения\nfunction handleSuccess(msg, resp, floor, quantity) {\n    log(`Ордер успешно размещен: orderId=${resp.orderId}, status=${resp.status}`);\n\n    floor.status = \"set_buy\"; // Обновлено состояние\n    floor.buyId = resp.orderId;\n    floor.buyDate = new Date().getTime();\n    floor.buyStatus = resp.status;\n    floor.vol = quantity;\n    msg.payload.bot.floors[msg.payload.task.floor.floorNumber] = floor;\n\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"green\", shape: \"dot\" });\n    msg.resp = resp;\n    node.send([msg, msg]);\n}\n\n// Функция для обработки таймаута\nfunction handleTimeout(msg) {\n    log(`Таймаут при размещении ордера`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = \"Остановлен в результате таймаута\";\n    msg.payload.bot.status.updated = new Date().getTime();\n\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    node.send([msg, null]);\n}\n\nconst floor = msg.payload.task.floor;\nconst quantity = Number((Number(msg.payload.bot.finance.depo) * Number(msg.payload.bot.settings.ordersize) / 100 / Number(msg.payload.bot.status.currentprice)).toFixed(msg.payload.bot.settings.digitq));\nconst pair = msg.payload.bot.settings.pair;\nconst price = floor.initBuyPrice;\n\nlog(`Начало размещения ордера: pair=${pair}, quantity=${quantity}, price=${price}`);\n\nconst TIMEOUT = 2000;\n\nconst timeout = setTimeout(() => {\n    handleTimeout(msg);\n}, TIMEOUT);\n\n// Используем серверное время для размещения ордера\nbinance.useServerTime(async () => {\n    try {\n        const resp = await buyBinanceOrder(pair, quantity, price);\n        if (resp && resp.code) {\n            log(`Ошибка: ${resp.msg}`);\n            handleError(msg, { body: JSON.stringify({ msg: resp.msg, floor: floor }) });\n        } else {\n\n            clearTimeout(timeout);\n            handleSuccess(msg, resp, floor, quantity);\n        }\n    } catch (err) {\n        clearTimeout(timeout);\n        handleError(msg, err);\n    }\n});\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1320,
        "wires": [
            [
                "747b98d576dadff0"
            ],
            [
                "37c770f1b2e46b6c"
            ]
        ]
    },
    {
        "id": "b4094d3ba3fb61e9",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": " cancel_on_binance",
        "func": "const binance = global.get('binance');\nconst tilog = global.get('tilog'); // Логирование\nconst botname = msg.payload.bot.botname;\n\n// Переменная для управления логированием\nconst enableLogging = true; // true - логирование включено, false - выключено\n\n// Функция для логирования\nfunction log(message, data = null) {\n    let nodeName = node.name;\n    let botname = msg.payload.bot.botname;\n    if (enableLogging && tilog) {\n        if (data) {\n            tilog(botname, `[${nodeName}] ${message}: ${JSON.stringify(data, null, 2)}`);\n        } else {\n            tilog(botname, `[${nodeName}] ${message}`);\n        }\n    }\n}\n\n// Функция для парсинга ошибок API\nfunction parseApiError(error) {\n    if (error.body) {\n        try {\n            const resp = JSON.parse(error.body);\n            return resp.msg;\n        } catch (e) {\n            // pass thru\n        }\n    }\n    return `Unknown error. Status code: ${error.statusCode}`;\n}\n\n// Промисификация функции binance.buy\n\nasync function cancelBinanceOrder(pair, orderId) {\n    return new Promise((resolve, reject) => {\n        binance.cancel(pair, orderId, (err, resp) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(resp);\n            }\n        });\n    });\n}\n\n// Функция для обработки ошибок\nfunction handleError(msg, err) {\n    const errorMsg = parseApiError(err);\n    log(`Ошибка : ${errorMsg}`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = `Остановлен в результате ошибки ${errorMsg}`;\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    msg.err = err;\n    node.send([msg, null]);\n}\n\n// Функция для обработки таймаута\nfunction handleTimeout(msg) {\n    log(`Остановлен в результате таймаута`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = \"Остановлен в результате таймаута\";\n    msg.payload.bot.status.updated = new Date().getTime();\n\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    node.send([msg, null]);\n}\n\nconst floor = msg.payload.task.floor;\nconst pair = msg.payload.bot.settings.pair;\nconst TIMEOUT = 2000;\n\nconst timeout = setTimeout(() => {\n    handleTimeout(msg);\n}, TIMEOUT);\n\n// Используем серверное время для размещения ордера\nbinance.useServerTime(async () => {\n    try {\n        const resp = await cancelBinanceOrder(pair, floor.buyId);\n        clearTimeout(timeout);\n\n        if (resp && resp.code) {\n            log(5, `Ошибка при отмене ордера: ${resp.msg}`);\n            handleError(msg, { body: JSON.stringify({ msg: resp.msg, floor: floor }) });\n        } else {\n            log(6, `Ордер успешно отменен`);\n            floor.buyStatus = \"CANCELED\";\n            floor.status = \"0\";\n            msg.payload.bot.floors[floor.floorNumber] = floor; // Обновляем объект бота\n\n            msg.payload.bot.status.updated = new Date().getTime();\n            msg.topic = \"fjob\";\n            node.status({ fill: \"green\", shape: \"dot\" });\n            node.send([msg, msg]);\n        }\n    } catch (err) {\n        clearTimeout(timeout);\n        handleError(msg, err);\n    }\n});\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1420,
        "wires": [
            [
                "176abc618ab45cc8"
            ],
            [
                "52552ffb5f96cd94"
            ]
        ]
    },
    {
        "id": "baf6a9d9edd7c021",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": " sell_on_binance",
        "func": "const binance = global.get('binance');\nconst tilog = global.get('tilog'); // Логирование\nconst botname = msg.payload.bot.botname;\n\n// Переменная для управления логированием\nconst enableLogging = true; // true - логирование включено, false - выключено\n\n// Функция для логирования\nfunction log(message, data = null) {\n    let nodeName = node.name;\n    let botname = msg.payload.bot.botname;\n    if (enableLogging && tilog) {\n        if (data) {\n            tilog(botname, `[${nodeName}] ${message}: ${JSON.stringify(data, null, 2)}`);\n        } else {\n            tilog(botname, `[${nodeName}] ${message}`);\n        }\n    }\n}\n\n// Функция для парсинга ошибок API\nfunction parseApiError(error) {\n    if (error.body) {\n        try {\n            const resp = JSON.parse(error.body);\n            return resp.msg;\n        } catch (e) {\n            // pass thru\n        }\n    }\n    return `Unknown error. Status code: ${error.statusCode}`;\n}\n\nasync function sellBinanceOrder(pair, quantity, price, stopPrice) {\n    return new Promise((resolve, reject) => {\n        binance.sell(pair, quantity, price, {\n            stopPrice,\n            type: \"STOP_LOSS_LIMIT\"\n        }, (err, resp) => {\n            if (err) {\n                log(`Ошибка при размещении sell ордера: ${JSON.stringify(err)}`);\n                reject(err);\n            } else {\n                log(`Sell ордер успешно размещен: ${JSON.stringify(resp)}`);\n                resolve(resp);\n            }\n        });\n    });\n}\n\n// Функция для обработки ошибок\nfunction handleError(msg, err) {\n    const errorMsg = parseApiError(err);\n    log(`Ошибка : ${errorMsg}`);\n    node.warn(errorMsg);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = `Остановлен в результате ошибки ${errorMsg}`;\n\n    node.status({ fill: \"red\", shape: \"ring\" });\n    msg.err = err;\n    node.send([msg, msg]);\n}\n\n// Функция для обработки успешного выполнения\nfunction handleSuccess(msg) {\n    log(`Успешно`);\n    // Обновляем состояние\n    msg.payload.bot.tsl = {\n        ...msg.payload.bot.tsl,\n        curorderid: msg.payload.bot.tsl.curorderid,\n        curstop: msg.payload.bot.tsl.curstop,\n        curprice: msg.payload.bot.tsl.curprice,\n        curquantity: msg.payload.bot.tsl.curquantity,\n        state: 'set_sell'\n    };\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send([msg, msg]);\n}\n\n// Используем серверное время для размещения ордера\nbinance.useServerTime(async () => {\n    try {\n        const { pair, price, stopprice, quantity } = msg.payload.task.params;\n        const resp = await sellBinanceOrder(pair, quantity, price, stopprice);\n\n        if (resp && resp.code) {\n            log(`Ошибка: ${resp.msg}`);\n            handleError(msg, { body: JSON.stringify({ msg: resp.msg }) });\n        } else {\n            // Обновление состояния бота\n            msg.payload.bot.tsl = {\n                ...msg.payload.bot.tsl,\n                curorderid: resp.orderId,\n                curstop: stopprice,\n                curprice: price,\n                curquantity: quantity,\n                state: 'set_sell'\n            };\n            handleSuccess(msg);\n        }\n    } catch (err) {\n        handleError(msg, err);\n    }\n});",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1540,
        "wires": [
            [
                "d093bf15fa78ff34"
            ],
            [
                "9cca2a40b3324922"
            ]
        ]
    },
    {
        "id": "e2acd418706414b3",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": " msell_on_binance",
        "func": "const binance = global.get('binance');\nconst tilog = global.get('tilog'); // Логирование\nconst botname = msg.payload.bot.botname;\n\n// Переменная для управления логированием\nconst enableLogging = true; // true - логирование включено, false - выключено\n\n// Функция для логирования\nfunction log(message, data = null) {\n    let nodeName = node.name;\n    let botname = msg.payload.bot.botname;\n    if (enableLogging && tilog) {\n        if (data) {\n            tilog(botname, `[${nodeName}] ${message}: ${JSON.stringify(data, null, 2)}`);\n        } else {\n            tilog(botname, `[${nodeName}] ${message}`);\n        }\n    }\n}\n\n// Функция для парсинга ошибок API\nfunction parseApiError(error) {\n    if (error.body) {\n        try {\n            const resp = JSON.parse(error.body);\n            return resp.msg;\n        } catch (e) {\n            // pass thru\n        }\n    }\n    return `Unknown error. Status code: ${error.statusCode}`;\n}\n\nasync function marketSellBinanceOrder(pair, quantity) {\n    return new Promise((resolve, reject) => {\n        binance.marketSell(pair, quantity, (err, resp) => {\n            if (err) {\n                log(2, `Ошибка при размещении market sell ордера: ${JSON.stringify(err)}`);\n                reject(err);\n            } else {\n                log(3, `Market sell ордер успешно размещен: ${JSON.stringify(resp)}`);\n                resolve(resp);\n            }\n        });\n    });\n}\n\n// Функция для обработки ошибок\nfunction handleError(msg, err) {\n    const errorMsg = parseApiError(err);\n    log(`Ошибка : ${errorMsg}`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = `Остановлен в результате ошибки ${errorMsg}`;\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    msg.err = err;\n    node.send([msg, null]);\n}\n\n// Функция для обработки успешного выполнения\nfunction handleSuccess(msg) {\n    log(`Успешно`);\n    //обновляем состояние\n\n    ///\n\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send([msg, msg]);\n}\n\n// Функция для обработки таймаута\nfunction handleTimeout(msg) {\n    log(`Остановлен в результате таймаута`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = \"Остановлен в результате таймаута\";\n    msg.payload.bot.status.updated = new Date().getTime();\n\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    node.send([msg, null]);\n}\n\n\nconst TIMEOUT = 2000;\n\nconst timeout = setTimeout(() => {\n    handleTimeout(msg);\n}, TIMEOUT);\n\n\nconst { pair } = msg.payload.bot.settings;\nconst quantity = msg.payload.bot.tsl.quantity_for_msell;\n\n// Используем серверное время для размещения ордера\nbinance.useServerTime(async () => {\n    try {\n        const resp = await marketSellBinanceOrder(pair, quantity);\n        clearTimeout(timeout);\n\n        // Обновление состояния бота\n        msg.payload.bot.tsl = {\n            ...msg.payload.bot.tsl,\n            curorderid: resp.orderId,\n            msellresp: resp,\n            state: 'sold'\n        };\n\n\n        handleSuccess(msg);\n    } catch (err) {\n        clearTimeout(timeout);\n        handleError(msg, err);\n    }\n});\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1640,
        "wires": [
            [
                "0298af4d164f2aeb"
            ],
            [
                "ed7fe99ca91ec676"
            ]
        ]
    },
    {
        "id": "33d2a0e7870b0da5",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": " sell_cancel_on_binance",
        "func": "const binance = global.get('binance');\nconst redis = context.global.get('redis');\nconst tilog = global.get('tilog'); // Логирование\nconst botname = msg.payload.bot.botname;\n\n// Переменная для управления логированием\nconst enableLogging = true; // true - логирование включено, false - выключено\n\n// Функция для логирования\nfunction log(message, data = null) {\n    let nodeName = node.name;\n    let botname = msg.payload.bot.botname;\n    if (enableLogging && tilog) {\n        if (data) {\n            tilog(botname, `[${nodeName}] ${message}: ${JSON.stringify(data, null, 2)}`);\n        } else {\n            tilog(botname, `[${nodeName}] ${message}`);\n        }\n    }\n}\n\n// Функция для парсинга ошибок API\nfunction parseApiError(error) {\n    if (error.body) {\n        try {\n            const resp = JSON.parse(error.body);\n            return resp.msg;\n        } catch (e) {\n            // pass thru\n        }\n    }\n    return `Unknown error. Status code: ${error.statusCode}`;\n}\n\n\n\nasync function cancelBinanceOrder(pair, orderId) {\n    return new Promise((resolve, reject) => {\n        binance.cancel(pair, orderId, (err, resp) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(resp);\n            }\n        });\n    });\n}\n\n// Функция для обработки ошибок\nfunction handleError(msg, err) {\n    const errorMsg = parseApiError(err);\n    log(`Ошибка : ${errorMsg}`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = `Остановлен в результате ошибки ${errorMsg}`;\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    msg.err = err;\n    node.send([msg, null]);\n}\n\n// Функция для обработки успешного выполнения\nfunction handleSuccess(msg) {\n    log(`Успешно`);\n    //обновляем состояние\n\n    ///\n\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send([msg, msg]);\n}\n\n// Функция для обработки таймаута\nfunction handleTimeout(msg) {\n    log(`Остановлен в результате таймаута`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = \"Остановлен в результате таймаута\";\n    msg.payload.bot.status.updated = new Date().getTime();\n\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    node.send([msg, null]);\n}\n\n\nconst TIMEOUT = 2000;\n\nconst timeout = setTimeout(() => {\n    handleTimeout(msg);\n}, TIMEOUT);\n\nconst { pair } = msg.payload.bot.settings;\nconst orderId = msg.payload.bot.tsl?.curorderid;\n\n// Используем серверное время для размещения ордера\nbinance.useServerTime(async () => {\n    try {\n        const resp = await cancelBinanceOrder(pair, orderId);\n        clearTimeout(timeout);\n        if (resp && resp.code) {\n            log(`Ошибка: ${resp.msg}`);\n            handleError(msg, { body: JSON.stringify({ msg: resp.msg }) });\n        } else {\n            // Обновление состояния\n            msg.payload.bot.tsl = {\n                \n                curorderid: null,\n                curstop: 0,\n                curprice: 0,\n                curquantity: 0,\n                state: '0',\n                orderstatus: null\n            };\n            clearTimeout(timeout);\n            redis.set(`orders-status:${pair}:${orderId}`, 'CANCELED');\n            handleSuccess(msg);\n        }\n    } catch (err) {\n        clearTimeout(timeout);\n        handleError(msg, err);\n    }\n});\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1740,
        "wires": [
            [
                "93ea015e72f3ee56"
            ],
            [
                "9651d3c225d79fb8"
            ]
        ]
    },
    {
        "id": "f3250bca40331867",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": " cancel_for_msell_on_binance",
        "func": "const binance = global.get('binance');\nconst tilog = global.get('tilog'); // Логирование\nconst botname = msg.payload.bot.botname;\n\n// Переменная для управления логированием\nconst enableLogging = true; // true - логирование включено, false - выключено\n\n// Функция для логирования\nfunction log(message, data = null) {\n    let nodeName = node.name;\n    let botname = msg.payload.bot.botname;\n    if (enableLogging && tilog) {\n        if (data) {\n            tilog(botname, `[${nodeName}] ${message}: ${JSON.stringify(data, null, 2)}`);\n        } else {\n            tilog(botname, `[${nodeName}] ${message}`);\n        }\n    }\n}\n\n// Функция для парсинга ошибок API\nfunction parseApiError(error) {\n    if (error.body) {\n        try {\n            const resp = JSON.parse(error.body);\n            return resp.msg;\n        } catch (e) {\n            // pass thru\n        }\n    }\n    return `Unknown error. Status code: ${error.statusCode}`;\n}\n\n\n\nasync function cancelBinanceOrder(pair, orderId) {\n    return new Promise((resolve, reject) => {\n        binance.cancel(pair, orderId, (err, resp) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(resp);\n            }\n        });\n    });\n}\n\n// Функция для обработки ошибок\nfunction handleError(msg, err) {\n    const errorMsg = parseApiError(err);\n    log(`Ошибка : ${errorMsg}`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = `Остановлен в результате ошибки ${errorMsg}`;\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    msg.err = err;\n    node.send([msg, null]);\n}\n\n// Функция для обработки успешного выполнения\nfunction handleSuccess(msg) {\n    log(`Успешно`);\n    //обновляем состояние\n\n    ///\n\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send([msg, msg]);\n}\n\n// Функция для обработки таймаута\nfunction handleTimeout(msg) {\n    log(`Остановлен в результате таймаута`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = \"Остановлен в результате таймаута\";\n    msg.payload.bot.status.updated = new Date().getTime();\n\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    node.send([msg, null]);\n}\n\n\nconst TIMEOUT = 2000;\n\nconst timeout = setTimeout(() => {\n    handleTimeout(msg);\n}, TIMEOUT);\n\n// Используем серверное время для размещения ордера\nbinance.useServerTime(async () => {\n    try {\n        const resp = await cancelBinanceOrder(msg.payload.bot.settings.pair, msg.payload.bot.tsl.curorderid)\n        clearTimeout(timeout);\n        if (resp && resp.code) {\n            log(`Ошибка: ${resp.msg}`);\n            handleError(msg, { body: JSON.stringify({ msg: resp.msg }) });\n        } else {\n            // Обновление состояния\n       \n        \n        msg.payload.bot.tsl = {\n            ...msg.payload.bot.tsl,\n            curorderid: null,\n            curstop: 0,\n            curprice: 0,\n            curquantity: 0,\n            state: 'canceled_for_msell'\n        };\n            clearTimeout(timeout);\n            handleSuccess(msg);\n        }\n    } catch (err) {\n        clearTimeout(timeout);\n        handleError(msg, err);\n    }\n});\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1840,
        "wires": [
            [
                "a0ba868edcde227c"
            ],
            [
                "c150d15291977432"
            ]
        ]
    },
    {
        "id": "cccc81029fad2f12",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": " order_status_on_binance",
        "func": "const binance = global.get('binance');\nconst tilog = global.get('tilog'); // Логирование\nconst botname = msg.payload.bot.botname;\n\n// Переменная для управления логированием\nconst enableLogging = true; // true - логирование включено, false - выключено\n\n// Функция для логирования\nfunction log(message, data = null) {\n    let nodeName = node.name;\n    let botname = msg.payload.bot.botname;\n    if (enableLogging && tilog) {\n        if (data) {\n            tilog(botname, `[${nodeName}] ${message}: ${JSON.stringify(data, null, 2)}`);\n        } else {\n            tilog(botname, `[${nodeName}] ${message}`);\n        }\n    }\n}\n\n// Функция для парсинга ошибок API\nfunction parseApiError(error) {\n    if (error.body) {\n        try {\n            const resp = JSON.parse(error.body);\n            return resp.msg;\n        } catch (e) {\n            // pass thru\n        }\n    }\n    return `Unknown error. Status code: ${error.statusCode}`;\n}\n\n// Промисификация функции binance.orderStatus\nasync function orderStatus(msg) {\n    return new Promise((resolve, reject) => {\n        binance.orderStatus(msg.payload.bot.settings.pair, undefined, (error, resp, symbol) => {\n            if (error) {\n                reject(error);\n            } else {\n                resolve(resp);\n            }\n        }, { orderId: msg.payload.bot.tsl.curorderid });\n\n\n\n\n\n    });\n}\n\n// Функция для обработки ошибок\nfunction handleError(msg, err) {\n    const errorMsg = parseApiError(err);\n    log(`Ошибка : ${errorMsg}`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = `Остановлен в результате ошибки ${errorMsg}`;\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    msg.err = err;\n    node.send([msg, null]);\n}\n\n// Функция для обработки успешного выполнения\nfunction handleSuccess(msg) {\n    log(`Успешно`);\n    //обновляем состояние\n\n    ///\n\n    msg.payload.bot.status.updated = new Date().getTime();\n    msg.topic = \"fjob\";\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send([msg, msg]);\n}\n\n// Функция для обработки таймаута\nfunction handleTimeout(msg) {\n    log(`Остановлен в результате таймаута`);\n    msg.payload.bot.onoff = false;\n    msg.payload.bot.status.errmsg = \"Остановлен в результате таймаута\";\n    msg.payload.bot.status.updated = new Date().getTime();\n\n    msg.topic = \"fjob\";\n    node.status({ fill: \"red\", shape: \"ring\" });\n    node.send([msg, null]);\n}\n\n\nconst TIMEOUT = 2000;\n\nconst timeout = setTimeout(() => {\n    handleTimeout(msg);\n}, TIMEOUT);\n\n// Используем серверное время для размещения ордера\nbinance.useServerTime(async () => {\n    try {\n        const resp = await orderStatus(msg);\n\n        msg.payload.bot.tsl = {\n            ...msg.payload.bot.tsl,\n            resp: resp,\n            state: \"order_status\"\n        };\n\n        clearTimeout(timeout);\n        handleSuccess(msg);\n    } catch (err) {\n        clearTimeout(timeout);\n        handleError(msg, err);\n    }\n});\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1960,
        "wires": [
            [
                "1c75bad9a9bf3345"
            ],
            [
                "5febfa175ae23fc1"
            ]
        ]
    },
    {
        "id": "c4dee7a9970db75c",
        "type": "switch",
        "z": "fdbc682a3811866c",
        "name": "openpos.quantity > 0",
        "property": "msg.payload.bot.openpos.quantity",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 980,
        "y": 840,
        "wires": [
            [
                "76c9fe5edfbd5a85"
            ],
            [
                "d22180199eb6eb6a"
            ]
        ]
    },
    {
        "id": "37c770f1b2e46b6c",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "floor_edit",
        "func": "msg.payload  = {\n\n    task: {\n        bot_id: msg.payload.bot.botname,\n        cmd: \"floor_edit\",\n        floor: msg.payload.bot.floors[msg.payload.task.floor.floorNumber]\n\n    }\n}\nmsg.topic = \"new_tasks \"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1360,
        "wires": [
            [
                "2d2beb8b2c0a2189"
            ]
        ]
    },
    {
        "id": "52552ffb5f96cd94",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "floor_edit",
        "func": "msg.payload  = {\n\n    task: {\n        bot_id: msg.payload.bot.botname,\n        cmd: \"floor_edit\",\n        floor: msg.payload.bot.floors[msg.payload.task.floor.floorNumber]\n\n    }\n}\nmsg.topic = \"new_tasks\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1460,
        "wires": [
            [
                "81f7dde56ad3ed4e"
            ]
        ]
    },
    {
        "id": "9cca2a40b3324922",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "tsl_edit",
        "func": "msg.payload  = {\n\n    task: {\n        bot_id: msg.payload.bot.botname,\n        cmd: \"tsl_edit\",\n        tsl: msg.payload.bot.tsl,\n        status: msg.payload.bot.status,\n        onoff: msg.payload.bot.onoff\n\n    }\n}\nmsg.topic = \"new_tasks\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1580,
        "wires": [
            [
                "7f8995e7289d798d"
            ]
        ]
    },
    {
        "id": "ed7fe99ca91ec676",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "tsl_edit",
        "func": "msg.payload  = {\n\n    task: {\n        bot_id: msg.payload.bot.botname,\n        cmd: \"tsl_edit\",\n        tsl: msg.payload.bot.tsl,\n        status: msg.payload.bot.status,\n        onoff: msg.payload.bot.onoff\n\n    }\n}\nmsg.topic = \"new_tasks\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1680,
        "wires": [
            [
                "430446d2f6022d80"
            ]
        ]
    },
    {
        "id": "9651d3c225d79fb8",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "tsl_edit",
        "func": "msg.payload  = {\n\n    task: {\n        bot_id: msg.payload.bot.botname,\n        cmd: \"tsl_edit\",\n        tsl: msg.payload.bot.tsl,\n        status: msg.payload.bot.status,\n        onoff: msg.payload.bot.onoff\n\n    }\n}\nmsg.topic = \"new_tasks\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1780,
        "wires": [
            [
                "76b7b5791e1e5975"
            ]
        ]
    },
    {
        "id": "c150d15291977432",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "tsl_edit",
        "func": "msg.payload  = {\n\n    task: {\n        bot_id: msg.payload.bot.botname,\n        cmd: \"tsl_edit\",\n        tsl: msg.payload.bot.tsl,\n        status: msg.payload.bot.status,\n        onoff: msg.payload.bot.onoff\n\n    }\n}\nmsg.topic = \"new_tasks\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1880,
        "wires": [
            [
                "cb1ab252074e6f3f"
            ]
        ]
    },
    {
        "id": "5febfa175ae23fc1",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "tsl_edit",
        "func": "msg.payload  = {\n\n    task: {\n        bot_id: msg.payload.bot.botname,\n        cmd: \"tsl_edit\",\n        tsl: msg.payload.bot.tsl,\n        status: msg.payload.bot.status,\n        onoff: msg.payload.bot.onoff\n\n    }\n}\nmsg.topic = \"new_tasks\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 2000,
        "wires": [
            [
                "e7e298eaf1aa345b"
            ]
        ]
    },
    {
        "id": "76c9fe5edfbd5a85",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "calc raschstopprice",
        "func": "const redis = context.global.get('redis');\nconst tilog = global.get('tilog');\nconst botname = msg.payload.bot.botname;\nconst enableLogging = true;\n\nfunction log(nodeName, logNumber, message, data = null) {\n    if (enableLogging && tilog) {\n        const text = data ? `${message}: ${JSON.stringify(data, null, 2)}` : message;\n        tilog(botname, `[${nodeName}] [${logNumber}] ${text}`);\n    }\n}\n\nconst pair = msg.payload.bot.settings.pair;\nconst offsettop = Number(msg.payload.bot.settings.offsettop);\nconst digitprice = Number(msg.payload.bot.settings.digitprice);\n\nlet currentprice = Number(msg.payload.bot.status.currentprice);\n\nmsg.payload.bot.status.currentprice = currentprice;\nmsg.payload.bot.tsl.raschstopprice = Number((currentprice * (1 - offsettop / 100)).toFixed(digitprice));\n//log('calc-raschstopprice', '4', `Calculated raschstopprice: ${msg.payload.bot.tsl.raschstopprice}`);\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 840,
        "wires": [
            [
                "ea05d7ebb03a3805"
            ]
        ]
    },
    {
        "id": "d22180199eb6eb6a",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "bypass1",
        "func": "\nmsg.payload.bot.status.rezhim = \"Ожидание покупки\"\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 920,
        "wires": [
            [
                "2cf0c0e0fe3433e8"
            ]
        ]
    },
    {
        "id": "ea05d7ebb03a3805",
        "type": "switch",
        "z": "fdbc682a3811866c",
        "name": "tsl.state",
        "property": "payload.bot.tsl.state",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "set_sell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "order_status",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "canceled_for_msell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sold",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pending_order_status",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pending_cancel_for_msell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pending_sell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pending_cancel_up",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pending_msell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pending_for_regist",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 12,
        "x": 1400,
        "y": 840,
        "wires": [
            [
                "0a10c3e1d04c45ca"
            ],
            [
                "8d1f99dd223e9191"
            ],
            [
                "6014611891d3380b"
            ],
            [
                "ccde2e088017c987"
            ],
            [
                "9d9e653af44f1033"
            ],
            [
                "6c7868c592ad1ac4"
            ],
            [
                "6c7868c592ad1ac4"
            ],
            [
                "6c7868c592ad1ac4"
            ],
            [
                "6c7868c592ad1ac4"
            ],
            [
                "6c7868c592ad1ac4"
            ],
            [
                "6c7868c592ad1ac4"
            ],
            [
                "6c7868c592ad1ac4"
            ]
        ]
    },
    {
        "id": "2cf0c0e0fe3433e8",
        "type": "link out",
        "z": "fdbc682a3811866c",
        "name": "link out 47",
        "mode": "link",
        "links": [
            "4be95edf66fa0397"
        ],
        "x": 1285,
        "y": 920,
        "wires": []
    },
    {
        "id": "0a10c3e1d04c45ca",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "sell_on_binance",
        "func": "const tilog = global.get('tilog');\nconst botname = msg.payload.bot.botname;\nconst enableLogging = true;\n\nfunction log(nodeName, logNumber, message, data = null) {\n    if (enableLogging && tilog) {\n        const text = data ? `${message}: ${JSON.stringify(data, null, 2)}` : message;\n        tilog(botname, `[${nodeName}] [${logNumber}] ${text}`);\n    }\n}\n\nconst pair = msg.payload.bot.settings.pair;\nconst offsettop = Number(msg.payload.bot.settings.offsettop);\nconst digitprice = Number(msg.payload.bot.settings.digitprice);\nlet raschstopprice = msg.payload.bot.tsl.raschstopprice;\nconst offsetbottom = Number(msg.payload.bot.settings.offsetbottom);\n\n\nconst price = Number((raschstopprice * (1 - offsetbottom / 100)).toFixed(digitprice));\nconst stopprice = Number(raschstopprice.toFixed(digitprice));\nconst quantity = msg.payload.bot.openpos.quantity;\n\nnode.log(`Рассчитанная цена: ${price}, стоп-цена: ${stopprice}, количество: ${quantity}`);\n\nmsg.payload.bot.status.rezhim = `Размещен ордер - цена: ${price}, стоп-цена: ${stopprice}, количество: ${quantity}`;\nmsg.payload.bot.tsl.state = 'pending_sell';\nmsg.payload.bot.tsl.curstop = stopprice;\n\n\nnode.send([null, {\n    payload: {\n\n        task: {\n            bot_id: msg.payload.bot.botname,\n            cmd: `sell_on_${msg.payload.bot.settings.exchange.toLowerCase()}`,\n            params: {\n                pair,\n                quantity,\n                price,\n                stopprice\n            }\n        }\n    }\n}]);\n\nnode.log(`Отправлена команда на продажу с параметрами: ${JSON.stringify({ pair, quantity, price, stopprice })}`);\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 580,
        "wires": [
            [
                "896b1f0ab649f06f"
            ],
            [
                "2a62d61f51b0670b"
            ]
        ]
    },
    {
        "id": "8d1f99dd223e9191",
        "type": "switch",
        "z": "fdbc682a3811866c",
        "name": "raschstopprice > curstop",
        "property": "payload.bot.tsl.raschstopprice",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "payload.bot.tsl.curstop",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1690,
        "y": 680,
        "wires": [
            [
                "5578c8a94511c439"
            ],
            [
                "68f43c335596cf60"
            ]
        ]
    },
    {
        "id": "6014611891d3380b",
        "type": "switch",
        "z": "fdbc682a3811866c",
        "name": "resp.status",
        "property": "payload.bot.tsl.resp.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1650,
        "y": 820,
        "wires": [
            [
                "96918b2ee2e7649f"
            ],
            [
                "ac1cc756545bb84b"
            ]
        ]
    },
    {
        "id": "ccde2e088017c987",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "msell",
        "func": "const pair = msg.payload.bot.settings.pair;\nconst quantity = msg.payload.bot.tsl.quantity_for_msell\n\n\nmsg.payload.bot.tsl.state = 'pending_msell';\n\n\nnode.send([null, {\n    payload: {\n\n        task: {\n            bot_id: msg.payload.bot.botname,\n            cmd: `msell_on_${msg.payload.bot.settings.exchange.toLowerCase()}`,\n            params: {\n                pair,\n                quantity,\n                \n            }\n        }\n    }\n}]);\n\nmsg.topic = 'fjob';\nmsg.payload.bot.status.updated = new Date().getTime();\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 920,
        "wires": [
            [
                "f082a33fa1e9f9ae"
            ],
            [
                "6ee24c1196399308"
            ]
        ]
    },
    {
        "id": "9d9e653af44f1033",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "regist_lead",
        "func": "msg.payload.bot.tsl.state = 'pending_for_regist';\nmsg.payload.bot.status.rezhim = `Регистрация сделки`;\nnode.send([null, {\n    payload: {\n        task: {\n            bot_id: msg.payload.bot.botname,\n            cmd: `regist_lead`,\n\n        }\n    }\n}]);\n\n\n\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 1040,
        "wires": [
            [
                "d0f1d0b9a6264656"
            ],
            [
                "d075c01f2c5e3838"
            ]
        ]
    },
    {
        "id": "6c7868c592ad1ac4",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "bypass4",
        "func": "msg.topic = 'fjob';\nmsg.payload.bot.status.updated = new Date().getTime();\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1120,
        "wires": [
            [
                "32ca5df5eaed5d46"
            ]
        ]
    },
    {
        "id": "896b1f0ab649f06f",
        "type": "link out",
        "z": "fdbc682a3811866c",
        "name": "link out 48",
        "mode": "link",
        "links": [
            "4be95edf66fa0397"
        ],
        "x": 1795,
        "y": 560,
        "wires": []
    },
    {
        "id": "5578c8a94511c439",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "cancel_up",
        "func": "//отменяем ордер, что повлечет за собой его выставление заново\nconst redis = context.global.get('redis');\nconst pair = msg.payload.bot.settings.pair;\nconst curorderid = msg.payload.bot.tsl.curorderid;\n\nasync function getOrderStatus(orderId) {\n    return new Promise((resolve, reject) => {\n        redis.get(`orders-status:${pair}:${orderId}`, (err, data) => {\n            err ? reject(err) : resolve(data);\n        });\n    });\n}\nconst status = await getOrderStatus(curorderid);\nif (status === \"NEW\") {\n    msg.payload.bot.tsl.state = 'pending_cancel_up';\n    msg.payload.bot.status.rezhim = `Перевыставляю ордер`;\n    node.send([null, {\n        payload: {\n\n            task: {\n                bot_id: msg.payload.bot.botname,\n                cmd: `sell_cancel_on_${msg.payload.bot.settings.exchange.toLowerCase()}`,\n                params: {\n                    orderId: curorderid\n                }\n            }\n        }\n    }]);\n}\n\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 640,
        "wires": [
            [
                "14bc97d122e1d749"
            ],
            [
                "bc83c2fd18ceb075"
            ]
        ]
    },
    {
        "id": "68f43c335596cf60",
        "type": "switch",
        "z": "fdbc682a3811866c",
        "name": "currentprice >= curstop",
        "property": "payload.bot.status.currentprice",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "payload.bot.tsl.curstop",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1990,
        "y": 720,
        "wires": [
            [
                "8c1ab185912e8b0c"
            ],
            [
                "36b196115df601bd"
            ]
        ],
        "outputLabels": [
            "",
            "Проскальзывание"
        ]
    },
    {
        "id": "96918b2ee2e7649f",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "sold",
        "func": "\n//msg.payload.bot.tsl.averageSellPrice = \n\nmsg.payload.bot.tsl.state = 'sold';\n\nmsg.topic = 'fjob';\nmsg.payload.bot.status.updated = new Date().getTime();\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 800,
        "wires": [
            [
                "20cf55f4b7f3f396"
            ]
        ]
    },
    {
        "id": "ac1cc756545bb84b",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "cancel_for_msell",
        "func": "\nlet executedQty = msg.payload.bot.tsl.resp.executedQty;\nlet cummulativeQuoteQty = msg.payload.bot.tsl.resp.cummulativeQuoteQty;\n\nlet curorderid = msg.payload.bot.tsl.curorderid;\n\n\nmsg.payload.bot.tsl.sellprice1 = Number(cummulativeQuoteQty)/Number(executedQty);\n\nmsg.payload.bot.tsl.quantity_for_msell = msg.payload.bot.tsl.curquantity - executedQty;\n\nmsg.payload.bot.tsl.state = 'pending_cancel_for_msell';\n  node.send([null, {\n        payload: {\n\n            task: {\n                bot_id: msg.payload.bot.botname,\n                cmd: `cancel_for_msell_on_${msg.payload.bot.settings.exchange.toLowerCase()}`,\n                params: {\n                    orderId: curorderid\n                }\n            }\n        }\n    }]);\n\n\nmsg.topic = 'fjob';\nmsg.payload.bot.status.updated = new Date().getTime();\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 840,
        "wires": [
            [
                "90a16e240e6a5faf"
            ],
            [
                "eecf5a98d67e5be5"
            ]
        ]
    },
    {
        "id": "f082a33fa1e9f9ae",
        "type": "link out",
        "z": "fdbc682a3811866c",
        "name": "link out 49",
        "mode": "link",
        "links": [
            "4be95edf66fa0397"
        ],
        "x": 1735,
        "y": 900,
        "wires": []
    },
    {
        "id": "d0f1d0b9a6264656",
        "type": "link out",
        "z": "fdbc682a3811866c",
        "name": "link out 50",
        "mode": "link",
        "links": [
            "4be95edf66fa0397"
        ],
        "x": 1775,
        "y": 1020,
        "wires": []
    },
    {
        "id": "32ca5df5eaed5d46",
        "type": "link out",
        "z": "fdbc682a3811866c",
        "name": "link out 51",
        "mode": "link",
        "links": [
            "4be95edf66fa0397"
        ],
        "x": 1755,
        "y": 1120,
        "wires": []
    },
    {
        "id": "14bc97d122e1d749",
        "type": "link out",
        "z": "fdbc682a3811866c",
        "name": "link out 52",
        "mode": "link",
        "links": [
            "4be95edf66fa0397"
        ],
        "x": 2075,
        "y": 620,
        "wires": []
    },
    {
        "id": "8c1ab185912e8b0c",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "getOrderStatus1",
        "func": "const redis = context.global.get('redis');\nconst tilog = global.get('tilog');\n\nconst botname = msg.payload.bot.botname;\n\n\n\nconst pair = msg.payload.bot.settings.pair;\n\nasync function getOrderStatus(orderId) {\n    return new Promise((resolve, reject) => {\n        redis.get(`orders-status:${pair}:${orderId}`, (err, data) => {\n            err ? reject(err) : resolve(data);\n        });\n    });\n}\n\n\nconst orderId = msg.payload.bot.tsl.curorderid;\nconst status = await getOrderStatus(orderId);\n\nmsg.payload.bot.tsl.orderstatus = status;\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2300,
        "y": 660,
        "wires": [
            [
                "4796352bc784981e"
            ]
        ]
    },
    {
        "id": "36b196115df601bd",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "getOrderStatus2",
        "func": "const redis = context.global.get('redis');\nconst tilog = global.get('tilog');\n\nconst botname = msg.payload.bot.botname;\n\nconst enableLogging = true;\n\nfunction log(nodeName, logNumber, message, data = null) {\n    if (enableLogging && tilog) {\n        const text = data ? `${message}: ${JSON.stringify(data, null, 2)}` : message;\n        tilog(botname, `[${nodeName}] [${logNumber}] ${text}`);\n    }\n}\n\nconst pair = msg.payload.bot.settings.pair;\n\nfunction getOrderStatus(orderId) {\n    return new Promise((resolve, reject) => {\n        redis.get(`orders-status:${pair}:${orderId}`, (err, data) => {\n            err ? reject(err) : resolve(data);\n        });\n    });\n}\n\n\nconst orderId = msg.payload.bot.tsl.curorderid;\nconst status = await getOrderStatus(orderId);\n\nmsg.payload.bot.tsl.orderstatus = status;\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2300,
        "y": 800,
        "wires": [
            [
                "a0a9e602c4afca71"
            ]
        ]
    },
    {
        "id": "20cf55f4b7f3f396",
        "type": "link out",
        "z": "fdbc682a3811866c",
        "name": "link out 53",
        "mode": "link",
        "links": [
            "4be95edf66fa0397"
        ],
        "x": 1915,
        "y": 800,
        "wires": []
    },
    {
        "id": "90a16e240e6a5faf",
        "type": "link out",
        "z": "fdbc682a3811866c",
        "name": "link out 54",
        "mode": "link",
        "links": [
            "4be95edf66fa0397"
        ],
        "x": 1995,
        "y": 820,
        "wires": []
    },
    {
        "id": "4796352bc784981e",
        "type": "switch",
        "z": "fdbc682a3811866c",
        "name": "статус ордера",
        "property": "payload.bot.tsl.orderstatus",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 2500,
        "y": 660,
        "wires": [
            [
                "149b2a202c3ce3ef"
            ],
            [
                "c4a05b70d5ac5618"
            ],
            [
                "c4a05b70d5ac5618"
            ],
            [
                "c4a05b70d5ac5618"
            ],
            [
                "c4a05b70d5ac5618"
            ],
            [
                "c4a05b70d5ac5618"
            ],
            [
                "c4a05b70d5ac5618"
            ]
        ]
    },
    {
        "id": "a0a9e602c4afca71",
        "type": "switch",
        "z": "fdbc682a3811866c",
        "name": "статус ордера",
        "property": "payload.bot.tsl.orderstatus",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 2500,
        "y": 800,
        "wires": [
            [
                "99ddb9d15236d0e7"
            ],
            [
                "99ddb9d15236d0e7"
            ],
            [
                "8c4a79d1db419b5f"
            ],
            [
                "8c4a79d1db419b5f"
            ],
            [
                "8c4a79d1db419b5f"
            ],
            [
                "8c4a79d1db419b5f"
            ],
            [
                "8c4a79d1db419b5f"
            ]
        ]
    },
    {
        "id": "149b2a202c3ce3ef",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "fetchOrderOnExch1",
        "func": "\nconst curorderid = msg.payload.bot.tsl.curorderid;\n\n\nmsg.payload.bot.tsl.state = 'pending_order_status';\n  node.send([null, {\n        payload: {\n\n            task: {\n                bot_id: msg.payload.bot.botname,\n                cmd: `order_status_on_${msg.payload.bot.settings.exchange.toLowerCase()}`,\n                params: {\n                    orderId: curorderid\n                }\n            }\n        }\n    }]);\n\n\nmsg.topic = 'fjob';\nmsg.payload.bot.status.updated = new Date().getTime();\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2720,
        "y": 620,
        "wires": [
            [
                "3618021d3c1182fb"
            ],
            [
                "e66ca7a4ace63744"
            ]
        ]
    },
    {
        "id": "c4a05b70d5ac5618",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "bypass2",
        "func": "\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2680,
        "y": 680,
        "wires": [
            [
                "cee45a3cad52f8de"
            ]
        ]
    },
    {
        "id": "99ddb9d15236d0e7",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "fetchOrderOnExch2",
        "func": "\nconst curorderid = msg.payload.bot.tsl.curorderid;\n\n\nmsg.payload.bot.tsl.state = 'pending_order_status';\n  node.send([null, {\n        payload: {\n\n            task: {\n                bot_id: msg.payload.bot.botname,\n                cmd: `order_status_on_${msg.payload.bot.settings.exchange.toLowerCase()}`,\n                params: {\n                    orderId: curorderid\n                }\n            }\n        }\n    }]);\n\n\nmsg.topic = 'fjob';\nmsg.payload.bot.status.updated = new Date().getTime();\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2720,
        "y": 760,
        "wires": [
            [
                "1e8f7974b63f4465"
            ],
            [
                "81f1050c1c8c1be1"
            ]
        ]
    },
    {
        "id": "8c4a79d1db419b5f",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "bypass3",
        "func": "msg.topic = 'fjob';\nmsg.payload.bot.status.updated = new Date().getTime();\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2680,
        "y": 820,
        "wires": [
            [
                "adf7c4bfef682716"
            ]
        ]
    },
    {
        "id": "3618021d3c1182fb",
        "type": "link out",
        "z": "fdbc682a3811866c",
        "name": "link out 55",
        "mode": "link",
        "links": [
            "4be95edf66fa0397"
        ],
        "x": 2875,
        "y": 600,
        "wires": []
    },
    {
        "id": "cee45a3cad52f8de",
        "type": "link out",
        "z": "fdbc682a3811866c",
        "name": "link out 56",
        "mode": "link",
        "links": [
            "4be95edf66fa0397"
        ],
        "x": 2795,
        "y": 680,
        "wires": []
    },
    {
        "id": "1e8f7974b63f4465",
        "type": "link out",
        "z": "fdbc682a3811866c",
        "name": "link out 57",
        "mode": "link",
        "links": [
            "4be95edf66fa0397"
        ],
        "x": 2875,
        "y": 740,
        "wires": []
    },
    {
        "id": "adf7c4bfef682716",
        "type": "link out",
        "z": "fdbc682a3811866c",
        "name": "link out 58",
        "mode": "link",
        "links": [
            "4be95edf66fa0397"
        ],
        "x": 2795,
        "y": 820,
        "wires": []
    },
    {
        "id": "4be95edf66fa0397",
        "type": "link in",
        "z": "fdbc682a3811866c",
        "name": "link in 2",
        "links": [
            "2cf0c0e0fe3433e8",
            "896b1f0ab649f06f",
            "14bc97d122e1d749",
            "20cf55f4b7f3f396",
            "90a16e240e6a5faf",
            "cee45a3cad52f8de",
            "3618021d3c1182fb",
            "1e8f7974b63f4465",
            "adf7c4bfef682716",
            "d0f1d0b9a6264656",
            "f082a33fa1e9f9ae",
            "32ca5df5eaed5d46",
            "f44e353694073997",
            "203e0bcdecacd437",
            "852772840ce30ec6",
            "747b98d576dadff0",
            "d093bf15fa78ff34",
            "0298af4d164f2aeb",
            "93ea015e72f3ee56",
            "a0ba868edcde227c",
            "1c75bad9a9bf3345",
            "176abc618ab45cc8",
            "8b85a6ee32929e43"
        ],
        "x": 105,
        "y": 900,
        "wires": [
            [
                "b53d8c275a8bd916"
            ]
        ]
    },
    {
        "id": "2a62d61f51b0670b",
        "type": "redis-out",
        "z": "fdbc682a3811866c",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1850,
        "y": 600,
        "wires": []
    },
    {
        "id": "bc83c2fd18ceb075",
        "type": "redis-out",
        "z": "fdbc682a3811866c",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 2130,
        "y": 660,
        "wires": []
    },
    {
        "id": "eecf5a98d67e5be5",
        "type": "redis-out",
        "z": "fdbc682a3811866c",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 2050,
        "y": 860,
        "wires": []
    },
    {
        "id": "6ee24c1196399308",
        "type": "redis-out",
        "z": "fdbc682a3811866c",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1790,
        "y": 940,
        "wires": []
    },
    {
        "id": "d075c01f2c5e3838",
        "type": "redis-out",
        "z": "fdbc682a3811866c",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1830,
        "y": 1060,
        "wires": []
    },
    {
        "id": "e66ca7a4ace63744",
        "type": "redis-out",
        "z": "fdbc682a3811866c",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 2930,
        "y": 640,
        "wires": []
    },
    {
        "id": "81f1050c1c8c1be1",
        "type": "redis-out",
        "z": "fdbc682a3811866c",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 2930,
        "y": 780,
        "wires": []
    },
    {
        "id": "2d2beb8b2c0a2189",
        "type": "redis-out",
        "z": "fdbc682a3811866c",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1008.3333129882812,
        "y": 1366.6666259765625,
        "wires": []
    },
    {
        "id": "81f7dde56ad3ed4e",
        "type": "redis-out",
        "z": "fdbc682a3811866c",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1010,
        "y": 1460,
        "wires": []
    },
    {
        "id": "7f8995e7289d798d",
        "type": "redis-out",
        "z": "fdbc682a3811866c",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1010,
        "y": 1580,
        "wires": []
    },
    {
        "id": "430446d2f6022d80",
        "type": "redis-out",
        "z": "fdbc682a3811866c",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1010,
        "y": 1680,
        "wires": []
    },
    {
        "id": "76b7b5791e1e5975",
        "type": "redis-out",
        "z": "fdbc682a3811866c",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1010,
        "y": 1780,
        "wires": []
    },
    {
        "id": "cb1ab252074e6f3f",
        "type": "redis-out",
        "z": "fdbc682a3811866c",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1010,
        "y": 1880,
        "wires": []
    },
    {
        "id": "e7e298eaf1aa345b",
        "type": "redis-out",
        "z": "fdbc682a3811866c",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1010,
        "y": 2000,
        "wires": []
    },
    {
        "id": "f44e353694073997",
        "type": "link out",
        "z": "fdbc682a3811866c",
        "name": "link out 59",
        "mode": "link",
        "links": [
            "4be95edf66fa0397"
        ],
        "x": 815,
        "y": 400,
        "wires": []
    },
    {
        "id": "203e0bcdecacd437",
        "type": "link out",
        "z": "fdbc682a3811866c",
        "name": "link out 60",
        "mode": "link",
        "links": [
            "4be95edf66fa0397"
        ],
        "x": 825,
        "y": 480,
        "wires": []
    },
    {
        "id": "852772840ce30ec6",
        "type": "link out",
        "z": "fdbc682a3811866c",
        "name": "link out 61",
        "mode": "link",
        "links": [
            "4be95edf66fa0397"
        ],
        "x": 1125,
        "y": 1220,
        "wires": []
    },
    {
        "id": "747b98d576dadff0",
        "type": "link out",
        "z": "fdbc682a3811866c",
        "name": "link out 62",
        "mode": "link",
        "links": [
            "4be95edf66fa0397"
        ],
        "x": 955,
        "y": 1320,
        "wires": []
    },
    {
        "id": "d093bf15fa78ff34",
        "type": "link out",
        "z": "fdbc682a3811866c",
        "name": "link out 63",
        "mode": "link",
        "links": [
            "4be95edf66fa0397"
        ],
        "x": 955,
        "y": 1540,
        "wires": []
    },
    {
        "id": "0298af4d164f2aeb",
        "type": "link out",
        "z": "fdbc682a3811866c",
        "name": "link out 64",
        "mode": "link",
        "links": [
            "4be95edf66fa0397"
        ],
        "x": 955,
        "y": 1640,
        "wires": []
    },
    {
        "id": "93ea015e72f3ee56",
        "type": "link out",
        "z": "fdbc682a3811866c",
        "name": "link out 65",
        "mode": "link",
        "links": [
            "4be95edf66fa0397"
        ],
        "x": 955,
        "y": 1740,
        "wires": []
    },
    {
        "id": "a0ba868edcde227c",
        "type": "link out",
        "z": "fdbc682a3811866c",
        "name": "link out 66",
        "mode": "link",
        "links": [
            "4be95edf66fa0397"
        ],
        "x": 955,
        "y": 1840,
        "wires": []
    },
    {
        "id": "1c75bad9a9bf3345",
        "type": "link out",
        "z": "fdbc682a3811866c",
        "name": "link out 67",
        "mode": "link",
        "links": [
            "4be95edf66fa0397"
        ],
        "x": 955,
        "y": 1960,
        "wires": []
    },
    {
        "id": "85d689a8b965da52",
        "type": "redis-out",
        "z": "fdbc682a3811866c",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "fjob",
        "obj": true,
        "x": 150,
        "y": 960,
        "wires": []
    },
    {
        "id": "b53d8c275a8bd916",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "msg.topic = \"fjob\"",
        "func": "msg.payload.bot.status.updated = new Date().getTime();\nmsg.topic = \"fjob\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 900,
        "wires": [
            [
                "85d689a8b965da52"
            ]
        ]
    },
    {
        "id": "176abc618ab45cc8",
        "type": "link out",
        "z": "fdbc682a3811866c",
        "name": "link out 68",
        "mode": "link",
        "links": [
            "4be95edf66fa0397"
        ],
        "x": 955,
        "y": 1420,
        "wires": []
    },
    {
        "id": "3c52c2838aab0505",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "buyed",
        "func": "// Функция для сканирования и обработки ордеров\nfunction scanAndProcessOrders(pair, redisClient, callback) {\n\n    let cursor = '0'; // Начальный курсор для SCAN\n\n    function scan(cursor) {\n        redisClient.scan(cursor, 'MATCH', `orders-status:${pair}:*`, 'COUNT', 100, (err, reply) => {\n            if (err) {\n                node.error(\"Ошибка при сканировании Redis: \" + err, msg);\n                return callback(buyed); // Возвращаем пустой массив в случае ошибки\n            }\n\n            let nextCursor = reply[0]; // Следующий курсор\n            let keys = reply[1]; // Найденные ключи\n\n\n            // Если ключи найдены\n            if (keys.length > 0) {\n                let processedKeys = 0; // Счетчик обработанных ключей\n\n                keys.forEach(key => {\n                    // Проверяем, что ключ заканчивается на \"-side\"\n                    if (key.endsWith(\"-side\")) {\n                        redisClient.get(key, (err, side) => {\n                            if (err) {\n                                node.error(\"Ошибка при получении значения ключа: \" + err, msg);\n                                return;\n                            }\n\n                            // Проверяем, что side = 'BUY'\n                            if (side === 'BUY') {\n                                // Извлекаем номер ордера (удаляем суффикс \"-side\")\n                                let number = key.split(':')[2].replace(\"-side\", \"\");\n\n\n                                // Проверяем, есть ли номер ордера уже в buyed\n                                let isAlreadyProcessed = buyed.some(order => order[0] === number);\n\n                                // Если ордер еще не обработан\n                                if (!isAlreadyProcessed) {\n                                    // Получаем данные по ордеру\n                                    redisClient.mget(\n                                        [\n                                            `orders-status:${pair}:${number}-price`,\n                                            `orders-status:${pair}:${number}-comsa`,\n                                            `orders-status:${pair}:${number}-quantity`\n                                        ],\n                                        (err, results) => {\n                                            if (err) {\n                                                node.error(\"Ошибка при получении данных ордера: \" + err, msg);\n                                                return;\n                                            }\n\n                                            let [price, comsa, quantity] = results;\n\n                                            // Добавляем данные в массив buyed\n                                            buyed.push([number, quantity, price, comsa]);\n\n                                            // Увеличиваем счетчик обработанных ключей\n                                            processedKeys++;\n\n                                            // Если все ключи обработаны, продолжаем сканирование\n                                            if (processedKeys === keys.length && nextCursor !== '0') {\n                                                scan(nextCursor);\n                                            } else if (processedKeys === keys.length && nextCursor === '0') {\n                                                callback(buyed); // Возвращаем результат, если сканирование завершено\n                                            }\n                                        }\n                                    );\n                                } else {\n                                    // Увеличиваем счетчик обработанных ключей\n                                    processedKeys++;\n\n                                    // Если все ключи обработаны, продолжаем сканирование\n                                    if (processedKeys === keys.length && nextCursor !== '0') {\n                                        scan(nextCursor);\n                                    } else if (processedKeys === keys.length && nextCursor === '0') {\n                                        callback(buyed); // Возвращаем результат, если сканирование завершено\n                                    }\n                                }\n                            } else {\n                                // Увеличиваем счетчик обработанных ключей\n                                processedKeys++;\n\n                                // Если все ключи обработаны, продолжаем сканирование\n                                if (processedKeys === keys.length && nextCursor !== '0') {\n                                    scan(nextCursor);\n                                } else if (processedKeys === keys.length && nextCursor === '0') {\n                                    callback(buyed); // Возвращаем результат, если сканирование завершено\n                                }\n                            }\n                        });\n                    } else {\n                        // Если ключ не заканчивается на \"-side\", просто увеличиваем счетчик\n                        processedKeys++;\n\n                        // Если все ключи обработаны, продолжаем сканирование\n                        if (processedKeys === keys.length && nextCursor !== '0') {\n                            scan(nextCursor);\n                        } else if (processedKeys === keys.length && nextCursor === '0') {\n                            callback(buyed); // Возвращаем результат, если сканирование завершено\n                        }\n                    }\n                });\n            } else {\n                // Если ключей нет, продолжаем сканирование или завершаем\n                if (nextCursor !== '0') {\n                    scan(nextCursor);\n                } else {\n                    callback(buyed); // Возвращаем результат, если сканирование завершено\n                }\n            }\n        });\n    }\n\n    scan(cursor); // Начинаем сканирование\n}\n\nfunction sumSecondElements(array) {\n    return array.reduce((sum, subArray) => sum + parseFloat(subArray[1]), 0);\n}\n\n// Основная логика\nlet pair = msg.payload.bot.settings.pair\nconst redisClient = context.global.get('redis');\nconst digitq = Number(msg.payload.bot.settings.digitq);\nlet buyed = msg.payload.bot.openpos.buyed || []; // Массив для хранения данных о купленных ордерах\n\n\nscanAndProcessOrders(pair, redisClient, (buyed) => {\n\n    msg.payload.bot.openpos.buyed = buyed // Записываем результат \n\n    let q = sumSecondElements(buyed);\n    msg.payload.bot.openpos.quantity = Number((q).toFixed(digitq));\nmsg.payload.bot.finance.depo = msg.payload.bot.openpos.quantity * msg.payload.bot.status.currentprice\n\n    let totalBuyCost = 0;\n    for (const buy of buyed) {\n        const [orderId, quantityStr, priceStr, commissionStr] = buy;\n        const quantity = parseFloat(quantityStr);\n        const price = parseFloat(priceStr);\n        const commission = parseFloat(commissionStr);\n\n        totalBuyCost += quantity * price;\n\n    }\n\n\n\n    msg.payload.bot.finance.startdepo = totalBuyCost\n \n\n    if (msg.payload.bot.openpos.quantity !== msg.payload.bot.tsl.curquantity) {\n        msg.payload.bot.status.rezhim = `Изменился размер ордера`;\n        node.send([null, msg]);\n    }\n    node.send([msg, null]); // Отправляем сообщение дальше\n});",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 840,
        "wires": [
            [
                "c4dee7a9970db75c"
            ],
            [
                "b695884f9acb92bd"
            ]
        ]
    },
    {
        "id": "fb1bed9fb7ee6ba6",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "changesettings",
        "func": "let newsettings = msg.payload.task.params\nmsg.payload.bot.settings = newsettings\n\n\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 340,
        "wires": [
            [
                "92c9b0287a027c96"
            ]
        ]
    },
    {
        "id": "8b85a6ee32929e43",
        "type": "link out",
        "z": "fdbc682a3811866c",
        "name": "link out 69",
        "mode": "link",
        "links": [
            "4be95edf66fa0397"
        ],
        "x": 1015,
        "y": 320,
        "wires": []
    },
    {
        "id": "6d4b2ffd9d178b2a",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "tgmsg",
        "func": "let tgmsg = msg.payload;\n\n\nmsg = {};\nmsg.payload = {tgmsg};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1260,
        "wires": [
            [
                "9039c9ad97314275"
            ]
        ]
    },
    {
        "id": "9039c9ad97314275",
        "type": "redis-out",
        "z": "fdbc682a3811866c",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "tgpost",
        "obj": true,
        "x": 1030,
        "y": 1260,
        "wires": []
    },
    {
        "id": "92c9b0287a027c96",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "cancel_up",
        "func": "//отменяем ордер, что повлечет за собой его выставление заново\nconst redis = context.global.get('redis');\nconst pair = msg.payload.bot.settings.pair;\nconst curorderid = msg.payload.bot.tsl.curorderid;\n\nasync function getOrderStatus(orderId) {\n    return new Promise((resolve, reject) => {\n        redis.get(`orders-status:${pair}:${orderId}`, (err, data) => {\n            err ? reject(err) : resolve(data);\n        });\n    });\n}\nconst status = await getOrderStatus(curorderid);\nif (status === \"NEW\") {\n    msg.payload.bot.tsl.state = 'pending_cancel_up';\n    msg.payload.bot.status.rezhim = `Изменились настройки - перевыставляю ордер`;\n    node.send([null, {\n        payload: {\n\n            task: {\n                bot_id: msg.payload.bot.botname,\n                cmd: `sell_cancel_on_${msg.payload.bot.settings.exchange.toLowerCase()}`,\n                params: {\n                    orderId: curorderid\n                }\n            }\n        }\n    }]);\n}\n\n\nlet track = msg.track || [];\ntrack.push(node.name);\nmsg.track = track;\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 340,
        "wires": [
            [
                "8b85a6ee32929e43"
            ],
            [
                "efb82035258bcf3f"
            ]
        ]
    },
    {
        "id": "efb82035258bcf3f",
        "type": "redis-out",
        "z": "fdbc682a3811866c",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1070,
        "y": 360,
        "wires": []
    },
    {
        "id": "97f049cc24c6c284",
        "type": "redis-out",
        "z": "fdbc682a3811866c",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 970,
        "y": 920,
        "wires": []
    },
    {
        "id": "b695884f9acb92bd",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "cancel_up",
        "func": "//отменяем ордер, что повлечет за собой его выставление заново\nconst redis = context.global.get('redis');\nconst pair = msg.payload.bot.settings.pair;\nconst curorderid = msg.payload.bot.tsl.curorderid;\n\nasync function getOrderStatus(orderId) {\n    return new Promise((resolve, reject) => {\n        redis.get(`orders-status:${pair}:${orderId}`, (err, data) => {\n            err ? reject(err) : resolve(data);\n        });\n    });\n}\nconst status = await getOrderStatus(curorderid);\nif (status === \"NEW\") {\n    msg.payload.bot.tsl.state = 'pending_cancel_up';\n\n    node.send([{\n        payload: {\n\n            task: {\n                bot_id: msg.payload.bot.botname,\n                cmd: `sell_cancel_on_${msg.payload.bot.settings.exchange.toLowerCase()}`,\n                params: {\n                    orderId: curorderid\n                }\n            }\n        }\n    }]);\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 920,
        "wires": [
            [
                "97f049cc24c6c284"
            ]
        ]
    },
    {
        "id": "6b877ed0a19e7edb",
        "type": "function",
        "z": "fdbc682a3811866c",
        "name": "сброс TSL и openpos",
        "func": "msg.payload.bot.tsl = { \"raschstopprice\": 0, \"curstop\": 0, \"curorderid\": 0, \"quantity\": 0, \"filledquantity\": 0, \"sold\": false, \"state\": \"0\", \"busy\": false }\nmsg.payload.bot.openpos = { \"quantity\": 0, \"buyed\": [] }\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1220,
        "wires": [
            [
                "852772840ce30ec6"
            ]
        ]
    },
    {
        "id": "8a6f4f8d7865a23b",
        "type": "inject",
        "z": "fdbc682a3811866c",
        "g": "cf3f124e81357c79",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 890,
        "y": 60,
        "wires": [
            [
                "c9d413644d84ca70"
            ]
        ]
    },
    {
        "id": "c9d413644d84ca70",
        "type": "redis-out",
        "z": "fdbc682a3811866c",
        "g": "cf3f124e81357c79",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 890,
        "y": 100,
        "wires": []
    },
    {
        "id": "66c1153ac7d26b72",
        "type": "inject",
        "z": "fdbc682a3811866c",
        "g": "cf3f124e81357c79",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 710,
        "y": 60,
        "wires": [
            [
                "54ff3e999101d602"
            ]
        ]
    },
    {
        "id": "54ff3e999101d602",
        "type": "redis-out",
        "z": "fdbc682a3811866c",
        "g": "cf3f124e81357c79",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 710,
        "y": 100,
        "wires": []
    },
    {
        "id": "feca67f7c39edc8b",
        "type": "inject",
        "z": "fdbc682a3811866c",
        "g": "cf3f124e81357c79",
        "name": "check1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1130,
        "y": 60,
        "wires": [
            [
                "d3597615d65be527"
            ]
        ]
    },
    {
        "id": "d3597615d65be527",
        "type": "redis-out",
        "z": "fdbc682a3811866c",
        "g": "cf3f124e81357c79",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "check1",
        "obj": false,
        "x": 1140,
        "y": 100,
        "wires": []
    },
    {
        "id": "c3b418043da3f184",
        "type": "inject",
        "z": "fdbc682a3811866c",
        "g": "cf3f124e81357c79",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "SOLUSDT-1742747929",
        "payloadType": "str",
        "x": 760,
        "y": 200,
        "wires": [
            [
                "80d7f2bbd1c79bdf"
            ]
        ]
    },
    {
        "id": "80d7f2bbd1c79bdf",
        "type": "redis-out",
        "z": "fdbc682a3811866c",
        "g": "cf3f124e81357c79",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "reset",
        "obj": true,
        "x": 950,
        "y": 200,
        "wires": []
    },
    {
        "id": "bcb20cd4fa324a91",
        "type": "debug",
        "z": "fdbc682a3811866c",
        "g": "9551480d826d4a72",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1780,
        "y": 100,
        "wires": []
    },
    {
        "id": "24757f4c130afe7c",
        "type": "catch",
        "z": "fdbc682a3811866c",
        "g": "9551480d826d4a72",
        "name": "catch all",
        "scope": null,
        "uncaught": false,
        "x": 1440,
        "y": 160,
        "wires": [
            [
                "bcb20cd4fa324a91",
                "e103fda050740ec5"
            ]
        ]
    },
    {
        "id": "502e9e3f9f99fa9e",
        "type": "redis-out",
        "z": "fdbc682a3811866c",
        "g": "9551480d826d4a72",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 1790,
        "y": 160,
        "wires": []
    },
    {
        "id": "e103fda050740ec5",
        "type": "function",
        "z": "fdbc682a3811866c",
        "g": "9551480d826d4a72",
        "name": "msg.reset = true",
        "func": "msg.reset = true\nmsg.topic = 'stop'\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 160,
        "wires": [
            [
                "502e9e3f9f99fa9e"
            ]
        ]
    },
    {
        "id": "98773ca176569e38",
        "type": "comment",
        "z": "fdbc682a3811866c",
        "g": "9551480d826d4a72",
        "name": "stop for debug",
        "info": "",
        "x": 1460,
        "y": 100,
        "wires": []
    },
    {
        "id": "5c3c27985f0fbd46",
        "type": "redis-instance",
        "z": "cbc582fb4cfdc843",
        "server": "a0efbb89.5e42d8",
        "name": "",
        "topic": "redis",
        "location": "global",
        "x": 110,
        "y": 60,
        "wires": []
    },
    {
        "id": "7b940e6ce5fb40c7",
        "type": "inject",
        "z": "cbc582fb4cfdc843",
        "g": "814fe3ad47c48a59",
        "name": "start onload",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 440,
        "wires": [
            [
                "73c112648392b803"
            ]
        ]
    },
    {
        "id": "b8dd96d5d9b54edd",
        "type": "function",
        "z": "cbc582fb4cfdc843",
        "g": "814fe3ad47c48a59",
        "name": "Start",
        "func": "let tgmsg = \"Start\";\n\n\nmsg = {};\nmsg.payload = {tgmsg};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 440,
        "wires": [
            [
                "642ebd6d0bd5aa4a"
            ]
        ]
    },
    {
        "id": "642ebd6d0bd5aa4a",
        "type": "redis-out",
        "z": "cbc582fb4cfdc843",
        "g": "814fe3ad47c48a59",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "tgpost",
        "obj": true,
        "x": 670,
        "y": 440,
        "wires": []
    },
    {
        "id": "aee34947d1368921",
        "type": "function",
        "z": "cbc582fb4cfdc843",
        "g": "814fe3ad47c48a59",
        "name": "getleads from redis",
        "func": "let guid = global.get('guid');\nlet volname = guid + \"-leads\";\n\nconst upd = global.get('getleads')(guid);\n\nupd.then(upd => {\n    global.set(volname, JSON.parse(upd));\n\n    msg.payload = upd || [];\n    node.done();\n    node.status({ fill: \"green\", shape: \"ring\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"ring\", text: \"error\" });\n    node.error(error);\n});\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "862d002268106fd3",
        "type": "function",
        "z": "cbc582fb4cfdc843",
        "name": "redis.get('bots:list')",
        "func": "let redis = context.global.get('redis');\nredis.get('bots:list').then((botsList) => {\n    \n    if (botsList) {\n        msg.payload = JSON.parse(botsList);\n        global.set('bots:list', msg.payload);\n    }\n    node.send(msg);\n\n}).catch((err) => {\n    node.error(\"Error getting bots:list: \" + err);\n});\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "c9fb284c56bca3fb",
        "type": "inject",
        "z": "cbc582fb4cfdc843",
        "name": "start load",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "862d002268106fd3",
                "eb72a9e4e2d3fd8b"
            ]
        ]
    },
    {
        "id": "9dd629e2c6dffb84",
        "type": "inject",
        "z": "cbc582fb4cfdc843",
        "g": "032640c9ece6fb0c",
        "name": "save to redis 0.5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 260,
        "wires": [
            [
                "60505863e2a2cc5f"
            ]
        ]
    },
    {
        "id": "242adff1739cb0a3",
        "type": "redis-command",
        "z": "cbc582fb4cfdc843",
        "g": "032640c9ece6fb0c",
        "server": "a0efbb89.5e42d8",
        "command": "set",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 620,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "678e045e7541c09c",
        "type": "function",
        "z": "cbc582fb4cfdc843",
        "g": "032640c9ece6fb0c",
        "name": "set ",
        "func": "let hard = [\n    \"BNBUSDT\",\n    \"ETHUSDT\",\n    \"BTCUSDT\"\n];\n\nfunction extractUniqueSymbols(array, hard) {\n    // Используем Set для хранения уникальных символов\n    const uniqueSymbols = new Set();\n\n    // Проходим по каждому элементу массива\n    array.forEach(item => {\n        // Разделяем строку по дефису и берем первую часть\n        const symbol = item.split('-')[0];\n        // Добавляем символ в Set\n        uniqueSymbols.add(symbol);\n    });\n\n    // Добавляем символы из массива hard в Set\n    hard.forEach(symbol => {\n        uniqueSymbols.add(symbol);\n    });\n\n    // Преобразуем Set обратно в массив\n    return Array.from(uniqueSymbols);\n}\nlet botslist = global.get('bots:list') || [];\nlet monetlist = extractUniqueSymbols(botslist, hard);\n\n\n    msg = {\n        payload: [msg.topic, JSON.stringify(monetlist)]\n    }\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 320,
        "wires": [
            [
                "242adff1739cb0a3",
                "8f0f16e7afac3a07"
            ]
        ]
    },
    {
        "id": "54d897991f1f8504",
        "type": "redis-command",
        "z": "cbc582fb4cfdc843",
        "g": "032640c9ece6fb0c",
        "server": "a0efbb89.5e42d8",
        "command": "get",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 320,
        "y": 320,
        "wires": [
            [
                "678e045e7541c09c"
            ]
        ]
    },
    {
        "id": "18e2cabaa3df9c83",
        "type": "inject",
        "z": "cbc582fb4cfdc843",
        "g": "032640c9ece6fb0c",
        "name": "monetlist",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "monetlist",
        "payload": "[]",
        "payloadType": "json",
        "x": 160,
        "y": 320,
        "wires": [
            [
                "54d897991f1f8504"
            ]
        ]
    },
    {
        "id": "8f0f16e7afac3a07",
        "type": "debug",
        "z": "cbc582fb4cfdc843",
        "g": "032640c9ece6fb0c",
        "name": "debug 11",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 320,
        "wires": []
    },
    {
        "id": "60505863e2a2cc5f",
        "type": "function",
        "z": "cbc582fb4cfdc843",
        "g": "032640c9ece6fb0c",
        "name": "redis.set('bots:list'",
        "func": "let redis = context.global.get('redis');\nlet botslist = global.get('bots:list')\nredis.set('bots:list', JSON.stringify(botslist)).then(() => {\n\n   node.send(msg);\n    \n}).catch((err) => {\n    node.error(\"Error getting bots:list: \" + err);\n});\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "eb72a9e4e2d3fd8b",
        "type": "function",
        "z": "cbc582fb4cfdc843",
        "name": "global.set(\"commision\", 0.015)",
        "func": "global.set(\"commision\", 0.015)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "73c112648392b803",
        "type": "function",
        "z": "cbc582fb4cfdc843",
        "g": "814fe3ad47c48a59",
        "name": "init functions",
        "func": "function getBotDifferences(bot, botStart, ignorePaths = []) {\n\n    const ignoreSet = new Set(ignorePaths);\n\n    // Рекурсивная функция сравнения объектов\n    function compareObjects(a, b, differences = {}, path = []) {\n        const allKeys = new Set([...Object.keys(a), ...Object.keys(b)]);\n\n        allKeys.forEach(key => {\n            const currentPath = [...path, key];\n            const pathString = currentPath.join('.');\n\n            // Пропускаем игнорируемые пути\n            if (ignoreSet.has(pathString)) return;\n\n            const aVal = a[key];\n            const bVal = b[key];\n\n            // Обработка объектов\n            if (isObject(aVal) && isObject(bVal)) {\n                const nestedDiff = {};\n                compareObjects(aVal, bVal, nestedDiff, currentPath);\n                if (Object.keys(nestedDiff).length > 0) {\n                    differences[key] = nestedDiff;\n                }\n            }\n            // Обработка массивов\n            else if (Array.isArray(aVal) && Array.isArray(bVal)) {\n                if (JSON.stringify(aVal) !== JSON.stringify(bVal)) {\n                    differences[key] = { old: bVal, new: aVal };\n                }\n            }\n            // Простые значения\n            else {\n                if (!isEqual(aVal, bVal)) {\n                    differences[key] = { old: bVal, new: aVal };\n                }\n            }\n        });\n\n        return differences;\n    }\n\n    // Проверка является ли значение объектом (не массивом)\n    function isObject(val) {\n        return val !== null &&\n            typeof val === 'object' &&\n            !Array.isArray(val);\n    }\n\n    // Универсальное сравнение значений\n    function isEqual(a, b) {\n        if (a === b) return true;\n        if (a === undefined || b === undefined) return false;\n        return JSON.stringify(a) === JSON.stringify(b);\n    }\n\n    return compareObjects(bot, botStart);\n}\nglobal.set('getBotDifferences',getBotDifferences);\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 440,
        "wires": [
            [
                "b8dd96d5d9b54edd"
            ]
        ]
    },
    {
        "id": "7df07f175c58e9ed",
        "type": "function",
        "z": "cbc582fb4cfdc843",
        "g": "b808c37db35bbc10",
        "name": "tilog()",
        "func": "",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "let tilog = function (botname = msg.topic, data = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = botname;\n    msg.payload = data;\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('tilog', tilog);",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 560,
        "wires": [
            [
                "0167751a5ecb2a28"
            ]
        ]
    },
    {
        "id": "05b768c3580a190e",
        "type": "inject",
        "z": "cbc582fb4cfdc843",
        "g": "b808c37db35bbc10",
        "name": "botname, log msg",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 190,
        "y": 560,
        "wires": [
            [
                "7df07f175c58e9ed"
            ]
        ]
    },
    {
        "id": "26744aeff70a4a94",
        "type": "function",
        "z": "cbc582fb4cfdc843",
        "g": "b808c37db35bbc10",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": 0,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 560,
        "wires": []
    },
    {
        "id": "aef77d3128029bc4",
        "type": "redis-in",
        "z": "cbc582fb4cfdc843",
        "g": "b808c37db35bbc10",
        "server": "a0efbb89.5e42d8",
        "command": "subscribe",
        "name": "",
        "topic": "tilog",
        "obj": true,
        "timeout": 0,
        "x": 130,
        "y": 640,
        "wires": [
            [
                "8a423c7cd6527fef"
            ]
        ]
    },
    {
        "id": "edafaa1ad7c68a08",
        "type": "file",
        "z": "cbc582fb4cfdc843",
        "g": "b808c37db35bbc10",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 460,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "8a423c7cd6527fef",
        "type": "function",
        "z": "cbc582fb4cfdc843",
        "g": "b808c37db35bbc10",
        "name": "function 8",
        "func": "msg.filename = msg.payload.filename\nmsg.payload = msg.payload.tgmsg\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 640,
        "wires": [
            [
                "edafaa1ad7c68a08"
            ]
        ]
    },
    {
        "id": "80e64e7cf3e1af1e",
        "type": "redis-out",
        "z": "cbc582fb4cfdc843",
        "g": "b808c37db35bbc10",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "tilog",
        "obj": true,
        "x": 690,
        "y": 560,
        "wires": []
    },
    {
        "id": "0167751a5ecb2a28",
        "type": "function",
        "z": "cbc582fb4cfdc843",
        "g": "b808c37db35bbc10",
        "name": "data prepare",
        "func": "var date = new Date();\nvar time = new Date().getTime();\n\nlet tgmsg = date.toString().split('GMT')[0] + \"-\" + time + \" : \" + msg.payload;\nlet filename = \"/data/journals/\" + msg.topic + \".txt\";\n\nmsg = {\n    payload: {\n        tgmsg: tgmsg,\n        filename: filename\n    },\n    topic : \"tilog\",\n    resolve: msg.resolve\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 560,
        "wires": [
            [
                "80e64e7cf3e1af1e",
                "26744aeff70a4a94"
            ]
        ]
    },
    {
        "id": "0cfabb644d6aa8f3",
        "type": "ui-button",
        "z": "20ab889ce2631bfa",
        "g": "059ffa7d94296656",
        "group": "43df5421e413c8ff",
        "name": "",
        "label": "Проверить ping",
        "order": 5,
        "width": 3,
        "height": 0,
        "emulateClick": true,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "date",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 160,
        "y": 440,
        "wires": [
            [
                "8456a6b45afaeda2",
                "c5af8bec5b629110"
            ]
        ]
    },
    {
        "id": "5548e297bd837328",
        "type": "exec",
        "z": "20ab889ce2631bfa",
        "g": "059ffa7d94296656",
        "command": "ping -c 1 api.binance.com | grep 'time=' | awk -F'time=' '{print $2}' | awk '{print $1}'",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 690,
        "y": 640,
        "wires": [
            [
                "d97d5150d8ce9e83"
            ],
            [],
            []
        ]
    },
    {
        "id": "d97d5150d8ce9e83",
        "type": "function",
        "z": "20ab889ce2631bfa",
        "g": "059ffa7d94296656",
        "name": "prepare",
        "func": "msg.payload = Number(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 640,
        "wires": [
            [
                "75c386499a8c9e9d"
            ]
        ]
    },
    {
        "id": "75c386499a8c9e9d",
        "type": "ui-text",
        "z": "20ab889ce2631bfa",
        "g": "059ffa7d94296656",
        "group": "43df5421e413c8ff",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "ping API Binance",
        "label": "ping API Binance, ms",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 1270,
        "y": 640,
        "wires": []
    },
    {
        "id": "81ff482d4e26908f",
        "type": "redis-command",
        "z": "20ab889ce2631bfa",
        "server": "a0efbb89.5e42d8",
        "command": "get",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 440,
        "y": 280,
        "wires": [
            [
                "d764cc31cfdec81a"
            ]
        ]
    },
    {
        "id": "acae8cd315f21a21",
        "type": "inject",
        "z": "20ab889ce2631bfa",
        "name": "global_settings:binance_api_key",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "global_settings:binance_api_key",
        "payload": "[]",
        "payloadType": "json",
        "x": 200,
        "y": 280,
        "wires": [
            [
                "81ff482d4e26908f"
            ]
        ]
    },
    {
        "id": "3bc80e631973217b",
        "type": "function",
        "z": "20ab889ce2631bfa",
        "name": "prepare data",
        "func": "msg = {\n    payload: [msg.topic,msg.payload]\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 280,
        "wires": [
            [
                "872ee089cca689a2"
            ]
        ]
    },
    {
        "id": "872ee089cca689a2",
        "type": "redis-command",
        "z": "20ab889ce2631bfa",
        "server": "a0efbb89.5e42d8",
        "command": "set",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1020,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "d764cc31cfdec81a",
        "type": "ui-text-input",
        "z": "20ab889ce2631bfa",
        "group": "43df5421e413c8ff",
        "name": "",
        "label": "API KEY",
        "order": 1,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "text",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 620,
        "y": 280,
        "wires": [
            [
                "3bc80e631973217b"
            ]
        ]
    },
    {
        "id": "d7a5754c258c6a2a",
        "type": "redis-command",
        "z": "20ab889ce2631bfa",
        "server": "a0efbb89.5e42d8",
        "command": "get",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 440,
        "y": 340,
        "wires": [
            [
                "a436f2e68b2cc9b7"
            ]
        ]
    },
    {
        "id": "1980c92d79f63920",
        "type": "inject",
        "z": "20ab889ce2631bfa",
        "name": "global_settings:binance_api_secret",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "global_settings:binance_api_secret",
        "payload": "[]",
        "payloadType": "json",
        "x": 200,
        "y": 340,
        "wires": [
            [
                "d7a5754c258c6a2a"
            ]
        ]
    },
    {
        "id": "93718d8a82e5971c",
        "type": "function",
        "z": "20ab889ce2631bfa",
        "name": "prepare data",
        "func": "msg = {\n    payload: [msg.topic,msg.payload]\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 340,
        "wires": [
            [
                "5878b97e0d9547d6"
            ]
        ]
    },
    {
        "id": "5878b97e0d9547d6",
        "type": "redis-command",
        "z": "20ab889ce2631bfa",
        "server": "a0efbb89.5e42d8",
        "command": "set",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1020,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "a436f2e68b2cc9b7",
        "type": "ui-text-input",
        "z": "20ab889ce2631bfa",
        "group": "43df5421e413c8ff",
        "name": "",
        "label": "API SECRET",
        "order": 2,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "text",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 630,
        "y": 340,
        "wires": [
            [
                "93718d8a82e5971c"
            ]
        ]
    },
    {
        "id": "07cdc954b5e03b36",
        "type": "function",
        "z": "20ab889ce2631bfa",
        "g": "059ffa7d94296656",
        "name": "Initialize Binance",
        "func": "let key = msg.payload.key;\nlet secret = msg.payload.secret;\nglobal.set(\"key\", key);\nglobal.set(\"secret\", secret);\n\nconst binance = new Binance().options({\n    APIKEY: key,\n    APISECRET: secret,\n    family:4\n});\n\nglobal.set('binance', binance);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "Binance",
                "module": "node-binance-api"
            }
        ],
        "x": 510,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "8456a6b45afaeda2",
        "type": "function",
        "z": "20ab889ce2631bfa",
        "g": "059ffa7d94296656",
        "name": "global_settings:binance_api_secret",
        "func": "msg = {\n    topic: 'global_settings:binance_api_secret'\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 440,
        "wires": [
            [
                "6bd28aa1c02f86cc"
            ]
        ]
    },
    {
        "id": "f846c54cb84d797a",
        "type": "function",
        "z": "20ab889ce2631bfa",
        "g": "059ffa7d94296656",
        "name": "global_settings:binance_api_key",
        "func": "msg = {\n    topic: 'global_settings:binance_api_key',\n    secret : msg.secret\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 500,
        "wires": [
            [
                "66d508960f16e5a9"
            ]
        ]
    },
    {
        "id": "6bd28aa1c02f86cc",
        "type": "redis-command",
        "z": "20ab889ce2631bfa",
        "g": "059ffa7d94296656",
        "server": "a0efbb89.5e42d8",
        "command": "get",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 800,
        "y": 440,
        "wires": [
            [
                "3021a55b57b30753"
            ]
        ]
    },
    {
        "id": "66d508960f16e5a9",
        "type": "redis-command",
        "z": "20ab889ce2631bfa",
        "g": "059ffa7d94296656",
        "server": "a0efbb89.5e42d8",
        "command": "get",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 800,
        "y": 500,
        "wires": [
            [
                "6395daf51c0731fb"
            ]
        ]
    },
    {
        "id": "3021a55b57b30753",
        "type": "function",
        "z": "20ab889ce2631bfa",
        "g": "059ffa7d94296656",
        "name": "msg.secret",
        "func": "msg.secret = msg.payload\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 440,
        "wires": [
            [
                "f846c54cb84d797a"
            ]
        ]
    },
    {
        "id": "6395daf51c0731fb",
        "type": "function",
        "z": "20ab889ce2631bfa",
        "g": "059ffa7d94296656",
        "name": "data prepare",
        "func": "\n\nmsg = {\n    payload: {\n        secret: msg.secret,\n        key: msg.payload\n    }\n\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 500,
        "wires": [
            [
                "2a66ab862e037a3f"
            ]
        ]
    },
    {
        "id": "c5af8bec5b629110",
        "type": "delay",
        "z": "20ab889ce2631bfa",
        "g": "059ffa7d94296656",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 240,
        "y": 640,
        "wires": [
            [
                "5548e297bd837328"
            ]
        ]
    },
    {
        "id": "1d761d29e2faa81c",
        "type": "inject",
        "z": "20ab889ce2631bfa",
        "g": "059ffa7d94296656",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.3",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 520,
        "wires": [
            [
                "0cfabb644d6aa8f3"
            ]
        ]
    },
    {
        "id": "358f25f278998bd8",
        "type": "redis-command",
        "z": "20ab889ce2631bfa",
        "server": "a0efbb89.5e42d8",
        "command": "get",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 480,
        "y": 880,
        "wires": [
            [
                "7ef68eb0096a74a4"
            ]
        ]
    },
    {
        "id": "6e587edcee0a7990",
        "type": "inject",
        "z": "20ab889ce2631bfa",
        "name": "global_settings:telegram_api_key",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "global_settings:telegram_api_key",
        "payload": "[]",
        "payloadType": "json",
        "x": 240,
        "y": 880,
        "wires": [
            [
                "358f25f278998bd8"
            ]
        ]
    },
    {
        "id": "a899ef48b4c8380f",
        "type": "function",
        "z": "20ab889ce2631bfa",
        "name": "prepare data",
        "func": "msg = {\n    payload: [msg.topic,msg.payload]\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 880,
        "wires": [
            [
                "018cd14ec88b4787"
            ]
        ]
    },
    {
        "id": "018cd14ec88b4787",
        "type": "redis-command",
        "z": "20ab889ce2631bfa",
        "server": "a0efbb89.5e42d8",
        "command": "set",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1060,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "7ef68eb0096a74a4",
        "type": "ui-text-input",
        "z": "20ab889ce2631bfa",
        "group": "f9b0b0f6ab1793ef",
        "name": "",
        "label": "BOT TOKEN",
        "order": 1,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "text",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 670,
        "y": 880,
        "wires": [
            [
                "a899ef48b4c8380f"
            ]
        ]
    },
    {
        "id": "6a881eb432261d1a",
        "type": "redis-command",
        "z": "20ab889ce2631bfa",
        "server": "a0efbb89.5e42d8",
        "command": "get",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 480,
        "y": 940,
        "wires": [
            [
                "5328f0e01d2ac8f1"
            ]
        ]
    },
    {
        "id": "640b4b246cc7eda7",
        "type": "inject",
        "z": "20ab889ce2631bfa",
        "name": "global_settings:telegram_chat_id",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "global_settings:telegram_chat_id",
        "payload": "[]",
        "payloadType": "json",
        "x": 240,
        "y": 940,
        "wires": [
            [
                "6a881eb432261d1a"
            ]
        ]
    },
    {
        "id": "7254ed8ee5aad209",
        "type": "function",
        "z": "20ab889ce2631bfa",
        "name": "prepare data",
        "func": "msg = {\n    payload: [msg.topic,msg.payload]\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 940,
        "wires": [
            [
                "018947dd7ed58573"
            ]
        ]
    },
    {
        "id": "018947dd7ed58573",
        "type": "redis-command",
        "z": "20ab889ce2631bfa",
        "server": "a0efbb89.5e42d8",
        "command": "set",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1060,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "5328f0e01d2ac8f1",
        "type": "ui-text-input",
        "z": "20ab889ce2631bfa",
        "group": "f9b0b0f6ab1793ef",
        "name": "",
        "label": "CHAT ID",
        "order": 2,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "text",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 660,
        "y": 940,
        "wires": [
            [
                "7254ed8ee5aad209"
            ]
        ]
    },
    {
        "id": "2a66ab862e037a3f",
        "type": "switch",
        "z": "20ab889ce2631bfa",
        "g": "059ffa7d94296656",
        "name": "",
        "property": "payload.key",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1150,
        "y": 500,
        "wires": [
            [
                "07cdc954b5e03b36"
            ]
        ]
    },
    {
        "id": "faa4c6564f941934",
        "type": "inject",
        "z": "20ab889ce2631bfa",
        "name": " ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 1000,
        "wires": [
            [
                "21054217e58a646d"
            ]
        ]
    },
    {
        "id": "21054217e58a646d",
        "type": "exec",
        "z": "20ab889ce2631bfa",
        "command": "curl ifconfig.me",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 360,
        "y": 1000,
        "wires": [
            [
                "bcc75b5c9cebac93"
            ],
            [],
            []
        ]
    },
    {
        "id": "bcc75b5c9cebac93",
        "type": "ui-template",
        "z": "20ab889ce2631bfa",
        "group": "43df5421e413c8ff",
        "page": "",
        "ui": "",
        "name": "IP",
        "order": 3,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <div>\n        <p>IP, который нужно добавить в белый список.</p>\n   \n        <!-- Computed Rendering using Vue Computed Variables -->\n        <h3 class=\"my-class\"> {{ msg.payload }}</h3>\n    \n    </div>\n</template>\n\n\n<style>\n    /* define any styles here - supports raw CSS */\n    .my-class {\n        color: red;\n        \n    }\n</style>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 570,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "25e6c65f2f6568ee",
        "type": "http in",
        "z": "9e409c9c9837deb5",
        "g": "a515f6f54037387e",
        "name": "",
        "url": "/bot_create",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 180,
        "wires": [
            [
                "68c731b8655af003",
                "b2d858d0eb793a63"
            ]
        ]
    },
    {
        "id": "68c731b8655af003",
        "type": "http response",
        "z": "9e409c9c9837deb5",
        "g": "a515f6f54037387e",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 180,
        "y": 220,
        "wires": []
    },
    {
        "id": "2b17dbbebf1b3d5f",
        "type": "function",
        "z": "9e409c9c9837deb5",
        "name": "test bot",
        "func": "msg.payload =\n    { \"botname\": \"BNBUSDT-1737628697\", \"busy\": false, \"onoff\": true, \"settings\": { \"comment\": \"\", \"quotacoin\": \"BNB\", \"basecoin\": \"USDT\", \"minprice\": 600, \"maxprice\": 800, \"startdepo\": 110, \"profitproc\": 2, \"ordersize\": 10, \"offsetbottom\": 0.1, \"offsettop\": 1, \"digitprice\": 2, \"digitq\": 3, \"stepsize\": \"0.00100000\", \"ticksize\": \"0.01000000\", \"ma1\": 3, \"ma2\": 30, \"maxpriceforbuy\": 0, \"minpriceforbuy\": 0, \"priceforwake\": 0, \"isrunning\": false, \"handyzapretnazakup\": false, \"userid\": \"admin-id\", \"pair\": \"BNBUSDT\" }, \"floors\": [[1, 600, 619.5], [2, 619.5, 639.63375], [3, 639.63375, 660.4218468749999], [4, 660.4218468749999, 681.8855568984374], [5, 681.8855568984374, 704.0468374976366], [6, 704.0468374976366, 726.9283597163098], [7, 726.9283597163098, 750.55353140709], [8, 750.55353140709, 774.9465211778204], [9, 774.9465211778204, 800.1322831160995]], \"finance\": { \"startdepo\": 110, \"depo\": 110, \"quotanal\": 0, \"quotainorders\": 0, \"basenal\": 110, \"baseinorders\": 0, \"profityoday\": 0 }, \"sales\": { \"today\": [], \"days\": [], \"all\": [] }, \"status\": { \"currentprice\": -1, \"lastprice\": -1, \"currentfloor\": -1, \"lastfloor\": -1, \"sr_ma_big\": -1, \"sr_ma_small\": -1, \"rezhim\": \"Стартовые настройки\", \"updated\": -1 }, \"ttp\": { \"raschstopprice\": 0, \"curstop\": 0, \"curorderid\": 0, \"quantity\": 0, \"ttpbusy\": false, \"sold\": false } }\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 100,
        "wires": [
            [
                "72e996c65df78b4e",
                "b2d858d0eb793a63"
            ]
        ]
    },
    {
        "id": "fdc615679490beac",
        "type": "inject",
        "z": "9e409c9c9837deb5",
        "name": " test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 100,
        "wires": [
            [
                "2b17dbbebf1b3d5f"
            ]
        ]
    },
    {
        "id": "72e996c65df78b4e",
        "type": "debug",
        "z": "9e409c9c9837deb5",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 100,
        "wires": []
    },
    {
        "id": "b2d858d0eb793a63",
        "type": "function",
        "z": "9e409c9c9837deb5",
        "g": "a515f6f54037387e",
        "name": "prepare and save",
        "func": "let redis = context.global.get('redis');\n\n// Формируем название валютной пары\nmsg.payload.settings.pair = msg.payload.settings.quotacoin + msg.payload.settings.basecoin;\n\n\n// Сохраняем msg.payload в Redis под именем \"bots:\" + msg.payload.botname + \":data\"\nlet botDataKey = \"bots:\" + msg.payload.botname + \":data\";\n\nredis.set(botDataKey, JSON.stringify(msg.payload)).then(() => {\n    node.warn(\"Saved bot data to \" + botDataKey);\n\n    // Сохраняем копию под именем \"bots:\" + msg.start_set.botname + \":start_set\"\n    let startSetKey = \"bots:\" + msg.payload.botname + \":start_set\";\n    redis.set(startSetKey, JSON.stringify(msg.payload)).then(() => {\n        node.warn(\"Saved start set to \" + startSetKey);\n\n        // Проверка переменной bots_list в global\n        let botsList = global.get('bots:list');\n      \n            let botsArray;\n\n            if (!botsList) {\n                // Если переменная пустая, создаем массив со значением msg.payload\n                botsArray = [msg.payload.botname];\n                node.warn(\"bots:list was empty, created with msg.payload\");\n            } else {\n                // Если переменная не пустая, дополняем массив новым значением\n                botsArray = botsList;\n                botsArray.push(msg.payload.botname);\n                node.warn(\"bots:list already exists, appended msg.payload\");\n            }\n\n            global.set('bots:list', botsArray)\n            // Сохраняем обновленный массив в Redis\n            redis.set('bots:list', JSON.stringify(botsArray)).then(() => {\n                node.send(msg);\n            }).catch((err) => {\n                node.error(\"Error setting bots:list: \" + err);\n            });\n       \n    }).catch((err) => {\n        node.error(\"Error setting start set: \" + err);\n    });\n}).catch((err) => {\n    node.error(\"Error setting bot data: \" + err);\n});\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "25b9ff6cfe13789f",
        "type": "http in",
        "z": "9e409c9c9837deb5",
        "g": "d7d6cef1ce4f6e57",
        "name": "",
        "url": "/bots",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 360,
        "wires": [
            [
                "fa4d426a57d36957"
            ]
        ]
    },
    {
        "id": "204e4fcca9e41ae8",
        "type": "http response",
        "z": "9e409c9c9837deb5",
        "g": "d7d6cef1ce4f6e57",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 970,
        "y": 360,
        "wires": []
    },
    {
        "id": "fa4d426a57d36957",
        "type": "function",
        "z": "9e409c9c9837deb5",
        "g": "d7d6cef1ce4f6e57",
        "name": "global.get('bots:list')",
        "func": "\nmsg.payload = global.get('bots:list');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 360,
        "wires": [
            [
                "f33e9568474183b7"
            ]
        ]
    },
    {
        "id": "a36eda51026852aa",
        "type": "function",
        "z": "9e409c9c9837deb5",
        "g": "d7d6cef1ce4f6e57",
        "name": "data prepare",
        "func": "let redis = context.global.get('redis');\n// Инициализация переменных\nlet salessum = 0;\nlet botname = msg.payload;\nlet key = 'bots:'+botname+':data';\n\nredis.get(key).then((bot) => {\n    msg.bot = JSON.parse(bot);\n   \n    //msg.bot.sales.today.forEach(function (item) {\n    //    salessum += Number(item[5]);\n    //});\n\n    msg.botname = msg.payload;\n    let key0 = global.get(msg.botname + \"-onoff\");\n    let key2 = Number((msg.bot.finance.depo - msg.bot.finance.startdepo).toFixed(msg.bot.settings.digitprice));\n    let key3 = Number((msg.bot.finance.depo / msg.bot.finance.startdepo * 100 - 100).toFixed(2));\n    let key4 = Number(salessum.toFixed(msg.bot.settings.digitprice));\n    let key5 = Number((salessum / msg.bot.finance.startdepo * 100).toFixed(2));\n    let key6 = Number((msg.bot.finance.startdepo).toFixed(2));\n    let key7 = Number((msg.bot.finance.depo).toFixed(2));\n    let key8 = Number((msg.bot.finance.depo - msg.bot.finance.startdepo).toFixed(2));\n    let procvlozh = (Number(msg.bot.finance.basenal) + Number(msg.bot.finance.baseinorders)) / Number(msg.bot.finance.startdepo) * 100;\n    let key9 = Number(procvlozh.toFixed(2));\n    let key10 = Number((Number(msg.bot.finance.basenal) + Number(msg.bot.finance.baseinorders)).toFixed(2));\n\n    // Формирование payload\n    msg.payload = [key0, msg.botname, key2, key3, key4, key5, key6, key7, key8, key9, key10];\n    node.send(msg);\n}).catch((err) => {\n    node.error(\"Error getting bots:list: \" + err);\n});\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 360,
        "wires": [
            [
                "577c5da19353e540"
            ]
        ]
    },
    {
        "id": "f33e9568474183b7",
        "type": "split",
        "z": "9e409c9c9837deb5",
        "g": "d7d6cef1ce4f6e57",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 510,
        "y": 360,
        "wires": [
            [
                "a36eda51026852aa"
            ]
        ]
    },
    {
        "id": "577c5da19353e540",
        "type": "join",
        "z": "9e409c9c9837deb5",
        "g": "d7d6cef1ce4f6e57",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 830,
        "y": 360,
        "wires": [
            [
                "204e4fcca9e41ae8"
            ]
        ]
    },
    {
        "id": "f5ac041f9b81d217",
        "type": "http in",
        "z": "9e409c9c9837deb5",
        "g": "4a012a101ff347b5",
        "name": "",
        "url": "/bot/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 500,
        "wires": [
            [
                "bf5179dcdbbe05d1"
            ]
        ]
    },
    {
        "id": "93d5612ae58c67d6",
        "type": "http response",
        "z": "9e409c9c9837deb5",
        "g": "4a012a101ff347b5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 510,
        "y": 500,
        "wires": []
    },
    {
        "id": "bf5179dcdbbe05d1",
        "type": "function",
        "z": "9e409c9c9837deb5",
        "g": "4a012a101ff347b5",
        "name": "redis.get('bot/:id')",
        "func": "var id = msg.req.params.id;\nlet redis = context.global.get('redis');\n\nasync function getBot(botId) {\n    let key = \"bots:\" + botId + \":data\";\n    return new Promise((resolve, reject) => {\n        redis.get(key, (err, data) => {\n            err ? reject(err) : resolve(data);\n        });\n    });\n}\n\n// Функция для получения бота из редиса\n\n\n\nlet bot = await getBot(id)\nmsg.payload = JSON.parse(bot)\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 500,
        "wires": [
            [
                "93d5612ae58c67d6"
            ]
        ]
    },
    {
        "id": "8eff915ffb68dabf",
        "type": "http in",
        "z": "9e409c9c9837deb5",
        "g": "a8d6ba6a06e24f8f",
        "name": "",
        "url": "/bot/:id",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 600,
        "wires": [
            [
                "f30ec3b5862e0b3d"
            ]
        ]
    },
    {
        "id": "bab1247535b484ca",
        "type": "http response",
        "z": "9e409c9c9837deb5",
        "g": "a8d6ba6a06e24f8f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 550,
        "y": 600,
        "wires": []
    },
    {
        "id": "f30ec3b5862e0b3d",
        "type": "function",
        "z": "9e409c9c9837deb5",
        "g": "a8d6ba6a06e24f8f",
        "name": "global.get('bot/:id')",
        "func": "var id = msg.req.params.id;\nfunction removeItemFromArray(array, itemToRemove) {\n    // Итерируемся по массиву и ищем элемент, который содержит itemToRemove\n    return array.filter(item => !item.includes(itemToRemove));\n}\n\nlet botslist = global.get('bots:list');\n\nlet newbotslist = removeItemFromArray(botslist, id);\n\nglobal.set('bots:list', newbotslist)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 600,
        "wires": [
            [
                "bab1247535b484ca"
            ]
        ]
    },
    {
        "id": "b94c9a52b8188b84",
        "type": "http in",
        "z": "9e409c9c9837deb5",
        "g": "fcb359042f8f2e6b",
        "name": "",
        "url": "/botreset/:id",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 700,
        "wires": [
            [
                "f32453e4809b959e"
            ]
        ]
    },
    {
        "id": "d6d33416822fec6c",
        "type": "http response",
        "z": "9e409c9c9837deb5",
        "g": "fcb359042f8f2e6b",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 540,
        "y": 700,
        "wires": []
    },
    {
        "id": "f32453e4809b959e",
        "type": "function",
        "z": "9e409c9c9837deb5",
        "g": "fcb359042f8f2e6b",
        "name": " cmd: \"reset\",",
        "func": "let redis = context.global.get('redis');\n\n(async () => {\n\n\n    let botData;\n    try {\n        botData = await redis.get(`bots:${msg.req.params.id}:start_set`);\n        if (botData) {\n            await redis.set(`bots:${msg.req.params.id}:data`, botData);\n            node.send(msg)\n         }\n\n    } catch (err) {\n        node.error(\"Ошибка : \" + err);\n    }\n})();\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 700,
        "wires": [
            [
                "d6d33416822fec6c"
            ]
        ]
    },
    {
        "id": "64f344ad14ce6c21",
        "type": "http in",
        "z": "9e409c9c9837deb5",
        "g": "dcde9240ab799f60",
        "name": "",
        "url": "/floor_edit/:id",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 860,
        "wires": [
            [
                "59c13278a90805c5"
            ]
        ]
    },
    {
        "id": "5c54b33249078696",
        "type": "http response",
        "z": "9e409c9c9837deb5",
        "g": "dcde9240ab799f60",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 620,
        "y": 860,
        "wires": []
    },
    {
        "id": "59c13278a90805c5",
        "type": "function",
        "z": "9e409c9c9837deb5",
        "g": "dcde9240ab799f60",
        "name": "   cmd: \"floor_edit\",",
        "func": "\nmsg.payload  = {\n\n    task: {\n        bot_id: msg.req.params.id,\n        cmd: \"floor_edit\",\n        floor:msg.payload\n\n    }\n}\n\nreturn [msg,msg]\n\n\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 860,
        "wires": [
            [
                "5c54b33249078696"
            ],
            [
                "471d24978a59da55"
            ]
        ]
    },
    {
        "id": "d695863ae8e1117b",
        "type": "http in",
        "z": "9e409c9c9837deb5",
        "g": "f2b33317485d5d4f",
        "name": "",
        "url": "/onoff/:id",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 1000,
        "wires": [
            [
                "2adb3fcbc808f268"
            ]
        ]
    },
    {
        "id": "f432641a6b1e4228",
        "type": "http response",
        "z": "9e409c9c9837deb5",
        "g": "f2b33317485d5d4f",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 620,
        "y": 1000,
        "wires": []
    },
    {
        "id": "2adb3fcbc808f268",
        "type": "function",
        "z": "9e409c9c9837deb5",
        "g": "f2b33317485d5d4f",
        "name": " cmd: \"onoff\",",
        "func": "\n\n    msg.payload = {\n\n        task: {\n            bot_id: msg.req.params.id,\n            cmd: \"onoff\",\n\n        }\n    }\n\n    return [msg, msg]\n\n\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1000,
        "wires": [
            [
                "f432641a6b1e4228"
            ],
            [
                "694ab46133617e16"
            ]
        ]
    },
    {
        "id": "694ab46133617e16",
        "type": "redis-out",
        "z": "9e409c9c9837deb5",
        "g": "f2b33317485d5d4f",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 610,
        "y": 1040,
        "wires": []
    },
    {
        "id": "471d24978a59da55",
        "type": "redis-out",
        "z": "9e409c9c9837deb5",
        "g": "dcde9240ab799f60",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 610,
        "y": 900,
        "wires": []
    },
    {
        "id": "a96f8e67cbdf8c8a",
        "type": "redis-in",
        "z": "9e409c9c9837deb5",
        "g": "fcb359042f8f2e6b",
        "server": "a0efbb89.5e42d8",
        "command": "psubscribe",
        "name": "",
        "topic": "reset",
        "obj": true,
        "timeout": 0,
        "x": 130,
        "y": 740,
        "wires": [
            [
                "4da3f56705dc171d"
            ]
        ]
    },
    {
        "id": "4da3f56705dc171d",
        "type": "function",
        "z": "9e409c9c9837deb5",
        "g": "fcb359042f8f2e6b",
        "name": "data prepare",
        "func": "msg = {\n    req: {params:{id:msg.payload}}\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 740,
        "wires": [
            [
                "f32453e4809b959e"
            ]
        ]
    },
    {
        "id": "1eeb5fcc8fab4402",
        "type": "http in",
        "z": "9e409c9c9837deb5",
        "g": "afc9f0aaf46d5bf8",
        "name": "",
        "url": "/bots/:id/settings",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1160,
        "wires": [
            [
                "970f7ce4c2dbc737"
            ]
        ]
    },
    {
        "id": "6f462701c8514a72",
        "type": "http response",
        "z": "9e409c9c9837deb5",
        "g": "afc9f0aaf46d5bf8",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 700,
        "y": 1160,
        "wires": []
    },
    {
        "id": "970f7ce4c2dbc737",
        "type": "function",
        "z": "9e409c9c9837deb5",
        "g": "afc9f0aaf46d5bf8",
        "name": " cmd: \"changesettings\",",
        "func": "\n\n    msg.payload = {\n\n        task: {\n            bot_id: msg.req.params.id,\n            cmd: \"changesettings\",\n            params: msg.payload\n\n        }\n    }\n\n    return [msg, msg]\n\n\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1160,
        "wires": [
            [
                "6f462701c8514a72"
            ],
            [
                "5d00fd89db535d24"
            ]
        ]
    },
    {
        "id": "5d00fd89db535d24",
        "type": "redis-out",
        "z": "9e409c9c9837deb5",
        "g": "afc9f0aaf46d5bf8",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 710,
        "y": 1200,
        "wires": []
    },
    {
        "id": "cee3accb976b1a41",
        "type": "redis-command",
        "z": "1ec2a5454ef9b5bf",
        "server": "a0efbb89.5e42d8",
        "command": "set",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 900,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "c25162b05a106d2d",
        "type": "function",
        "z": "1ec2a5454ef9b5bf",
        "name": "set \"\" if null",
        "func": "if (msg.payload === null) {\n    let testb_currentprice = \"\"\n    msg = {\n        payload: [msg.topic, testb_currentprice]\n    }\n    global.set('testb_currentprice', testb_currentprice)\n\n} else {\n    global.set('testb_currentprice',msg.payload)\n     msg = {\n        payload: [msg.topic, msg.payload]\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 140,
        "wires": [
            [
                "cee3accb976b1a41"
            ]
        ]
    },
    {
        "id": "2737f70cee06e218",
        "type": "redis-command",
        "z": "1ec2a5454ef9b5bf",
        "server": "a0efbb89.5e42d8",
        "command": "get",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 560,
        "y": 140,
        "wires": [
            [
                "c25162b05a106d2d"
            ]
        ]
    },
    {
        "id": "7fbdc2b0f98f789c",
        "type": "inject",
        "z": "1ec2a5454ef9b5bf",
        "name": "testb:currentprice",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "testb:currentprice",
        "payload": "[]",
        "payloadType": "json",
        "x": 370,
        "y": 140,
        "wires": [
            [
                "2737f70cee06e218"
            ]
        ]
    },
    {
        "id": "3496714003bf7306",
        "type": "redis-command",
        "z": "1ec2a5454ef9b5bf",
        "server": "a0efbb89.5e42d8",
        "command": "get",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 560,
        "y": 220,
        "wires": [
            [
                "8a974fd37d8ee20d"
            ]
        ]
    },
    {
        "id": "519267d293c3d703",
        "type": "inject",
        "z": "1ec2a5454ef9b5bf",
        "name": "testb:currentprice",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "testb:currentprice",
        "payload": "[]",
        "payloadType": "json",
        "x": 370,
        "y": 220,
        "wires": [
            [
                "3496714003bf7306"
            ]
        ]
    },
    {
        "id": "e83d4dcb7cdea310",
        "type": "function",
        "z": "1ec2a5454ef9b5bf",
        "name": "prepare data",
        "func": "msg = {\n    payload: [msg.topic,msg.payload]\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 220,
        "wires": [
            [
                "1495d5d8273b0723"
            ]
        ]
    },
    {
        "id": "1495d5d8273b0723",
        "type": "redis-command",
        "z": "1ec2a5454ef9b5bf",
        "server": "a0efbb89.5e42d8",
        "command": "set",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1040,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "8a974fd37d8ee20d",
        "type": "ui-text-input",
        "z": "1ec2a5454ef9b5bf",
        "group": "fef3d44274af6766",
        "name": "Цена",
        "label": "Цена",
        "order": 1,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "text",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 710,
        "y": 220,
        "wires": [
            [
                "e83d4dcb7cdea310"
            ]
        ]
    },
    {
        "id": "2a0924b611d8bfc8",
        "type": "redis-command",
        "z": "1ec2a5454ef9b5bf",
        "server": "a0efbb89.5e42d8",
        "command": "set",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 860,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "385f7c2e97d7ac94",
        "type": "function",
        "z": "1ec2a5454ef9b5bf",
        "name": "set \"\" if null",
        "func": "if (msg.payload === null) {\n    let testb_ma_big = \"\"\n    msg = {\n        payload: [msg.topic, testb_ma_big]\n    }\n    global.set('testb_ma_big', testb_ma_big)\n\n} else {\n    global.set('testb_ma_big',msg.payload)\n     msg = {\n        payload: [msg.topic, msg.payload]\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 360,
        "wires": [
            [
                "2a0924b611d8bfc8"
            ]
        ]
    },
    {
        "id": "d1984fe3e5fea2dd",
        "type": "redis-command",
        "z": "1ec2a5454ef9b5bf",
        "server": "a0efbb89.5e42d8",
        "command": "get",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 520,
        "y": 360,
        "wires": [
            [
                "385f7c2e97d7ac94"
            ]
        ]
    },
    {
        "id": "71fbd75f8324b82c",
        "type": "inject",
        "z": "1ec2a5454ef9b5bf",
        "name": "testb:ma_big",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "testb:ma_big",
        "payload": "[]",
        "payloadType": "json",
        "x": 350,
        "y": 360,
        "wires": [
            [
                "d1984fe3e5fea2dd"
            ]
        ]
    },
    {
        "id": "f21adba3e4ac2036",
        "type": "redis-command",
        "z": "1ec2a5454ef9b5bf",
        "server": "a0efbb89.5e42d8",
        "command": "get",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 520,
        "y": 440,
        "wires": [
            [
                "554d42b752e19db7"
            ]
        ]
    },
    {
        "id": "c9be31f11096fa3a",
        "type": "inject",
        "z": "1ec2a5454ef9b5bf",
        "name": "testb:ma_big",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "testb:ma_big",
        "payload": "[]",
        "payloadType": "json",
        "x": 350,
        "y": 440,
        "wires": [
            [
                "f21adba3e4ac2036"
            ]
        ]
    },
    {
        "id": "7a4c3c87fda36050",
        "type": "function",
        "z": "1ec2a5454ef9b5bf",
        "name": "prepare data",
        "func": "msg = {\n    payload: [msg.topic,msg.payload]\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 440,
        "wires": [
            [
                "e18bb07df5cd055c"
            ]
        ]
    },
    {
        "id": "e18bb07df5cd055c",
        "type": "redis-command",
        "z": "1ec2a5454ef9b5bf",
        "server": "a0efbb89.5e42d8",
        "command": "set",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1020,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "554d42b752e19db7",
        "type": "ui-text-input",
        "z": "1ec2a5454ef9b5bf",
        "group": "fef3d44274af6766",
        "name": "MA 1 BIG",
        "label": "MA 1 BIG",
        "order": 2,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "text",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 680,
        "y": 440,
        "wires": [
            [
                "7a4c3c87fda36050"
            ]
        ]
    },
    {
        "id": "d9e9d06883f4b4a0",
        "type": "redis-command",
        "z": "1ec2a5454ef9b5bf",
        "server": "a0efbb89.5e42d8",
        "command": "set",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 880,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "d970564874d4141e",
        "type": "function",
        "z": "1ec2a5454ef9b5bf",
        "name": "set \"\" if null",
        "func": "if (msg.payload === null) {\n    let testb_ma_small = \"\"\n    msg = {\n        payload: [msg.topic, testb_ma_small]\n    }\n    global.set('testb_ma_small', testb_ma_small)\n\n} else {\n    global.set('testb_ma_small',msg.payload)\n     msg = {\n        payload: [msg.topic, msg.payload]\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 580,
        "wires": [
            [
                "d9e9d06883f4b4a0"
            ]
        ]
    },
    {
        "id": "179b0b50ec81dc27",
        "type": "redis-command",
        "z": "1ec2a5454ef9b5bf",
        "server": "a0efbb89.5e42d8",
        "command": "get",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 540,
        "y": 580,
        "wires": [
            [
                "d970564874d4141e"
            ]
        ]
    },
    {
        "id": "4fb841e7a3946c83",
        "type": "inject",
        "z": "1ec2a5454ef9b5bf",
        "name": "testb:ma_small",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "testb:ma_small",
        "payload": "[]",
        "payloadType": "json",
        "x": 360,
        "y": 580,
        "wires": [
            [
                "179b0b50ec81dc27"
            ]
        ]
    },
    {
        "id": "c88381262565a90a",
        "type": "redis-command",
        "z": "1ec2a5454ef9b5bf",
        "server": "a0efbb89.5e42d8",
        "command": "get",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 540,
        "y": 660,
        "wires": [
            [
                "326b62d4108ac6d0"
            ]
        ]
    },
    {
        "id": "a19513a3addf5eb0",
        "type": "inject",
        "z": "1ec2a5454ef9b5bf",
        "name": "testb:ma_small",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "testb:ma_small",
        "payload": "[]",
        "payloadType": "json",
        "x": 360,
        "y": 660,
        "wires": [
            [
                "c88381262565a90a"
            ]
        ]
    },
    {
        "id": "22ecaf1c67c0559f",
        "type": "function",
        "z": "1ec2a5454ef9b5bf",
        "name": "prepare data",
        "func": "msg = {\n    payload: [msg.topic,msg.payload]\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 660,
        "wires": [
            [
                "a66e6d8abe723e94"
            ]
        ]
    },
    {
        "id": "a66e6d8abe723e94",
        "type": "redis-command",
        "z": "1ec2a5454ef9b5bf",
        "server": "a0efbb89.5e42d8",
        "command": "set",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1060,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "326b62d4108ac6d0",
        "type": "ui-text-input",
        "z": "1ec2a5454ef9b5bf",
        "group": "fef3d44274af6766",
        "name": "MA 2 SMALL",
        "label": "MA 2 SMALL",
        "order": 3,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "text",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 710,
        "y": 660,
        "wires": [
            [
                "22ecaf1c67c0559f"
            ]
        ]
    }
]